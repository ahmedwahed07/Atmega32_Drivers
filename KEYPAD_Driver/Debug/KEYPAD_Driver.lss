
KEYPAD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000014b2  00001526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002268  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010f9  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000048a9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000048bc  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  000048f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00004dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00005281  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  0000529b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <main>
      7a:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vidSetPortDirection>:
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	00 d0       	rcall	.+0      	; 0x88 <DIO_vidSetPortDirection+0x6>
      88:	cd b7       	in	r28, 0x3d	; 61
      8a:	de b7       	in	r29, 0x3e	; 62
      8c:	89 83       	std	Y+1, r24	; 0x01
      8e:	6a 83       	std	Y+2, r22	; 0x02
      90:	89 81       	ldd	r24, Y+1	; 0x01
      92:	88 2f       	mov	r24, r24
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	91 05       	cpc	r25, r1
      9a:	91 f0       	breq	.+36     	; 0xc0 <DIO_vidSetPortDirection+0x3e>
      9c:	82 30       	cpi	r24, 0x02	; 2
      9e:	91 05       	cpc	r25, r1
      a0:	1c f4       	brge	.+6      	; 0xa8 <DIO_vidSetPortDirection+0x26>
      a2:	89 2b       	or	r24, r25
      a4:	39 f0       	breq	.+14     	; 0xb4 <DIO_vidSetPortDirection+0x32>
      a6:	1e c0       	rjmp	.+60     	; 0xe4 <DIO_vidSetPortDirection+0x62>
      a8:	82 30       	cpi	r24, 0x02	; 2
      aa:	91 05       	cpc	r25, r1
      ac:	79 f0       	breq	.+30     	; 0xcc <DIO_vidSetPortDirection+0x4a>
      ae:	03 97       	sbiw	r24, 0x03	; 3
      b0:	99 f0       	breq	.+38     	; 0xd8 <DIO_vidSetPortDirection+0x56>
      b2:	18 c0       	rjmp	.+48     	; 0xe4 <DIO_vidSetPortDirection+0x62>
      b4:	8a e3       	ldi	r24, 0x3A	; 58
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	2a 81       	ldd	r18, Y+2	; 0x02
      ba:	fc 01       	movw	r30, r24
      bc:	20 83       	st	Z, r18
      be:	12 c0       	rjmp	.+36     	; 0xe4 <DIO_vidSetPortDirection+0x62>
      c0:	87 e3       	ldi	r24, 0x37	; 55
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	2a 81       	ldd	r18, Y+2	; 0x02
      c6:	fc 01       	movw	r30, r24
      c8:	20 83       	st	Z, r18
      ca:	0c c0       	rjmp	.+24     	; 0xe4 <DIO_vidSetPortDirection+0x62>
      cc:	84 e3       	ldi	r24, 0x34	; 52
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	2a 81       	ldd	r18, Y+2	; 0x02
      d2:	fc 01       	movw	r30, r24
      d4:	20 83       	st	Z, r18
      d6:	06 c0       	rjmp	.+12     	; 0xe4 <DIO_vidSetPortDirection+0x62>
      d8:	81 e3       	ldi	r24, 0x31	; 49
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	2a 81       	ldd	r18, Y+2	; 0x02
      de:	fc 01       	movw	r30, r24
      e0:	20 83       	st	Z, r18
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	0f 90       	pop	r0
      e8:	0f 90       	pop	r0
      ea:	df 91       	pop	r29
      ec:	cf 91       	pop	r28
      ee:	08 95       	ret

000000f0 <DIO_vidSetPinDirection>:
	default :
		break;
	}
}

void DIO_vidSetPinDirection(u8 port_no, u8 pin_no, u8 pin_diection){
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	00 d0       	rcall	.+0      	; 0xf6 <DIO_vidSetPinDirection+0x6>
      f6:	1f 92       	push	r1
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
      fc:	89 83       	std	Y+1, r24	; 0x01
      fe:	6a 83       	std	Y+2, r22	; 0x02
     100:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_diection==OUTPUT){
     102:	8b 81       	ldd	r24, Y+3	; 0x03
     104:	81 30       	cpi	r24, 0x01	; 1
     106:	09 f0       	breq	.+2      	; 0x10a <DIO_vidSetPinDirection+0x1a>
     108:	67 c0       	rjmp	.+206    	; 0x1d8 <DIO_vidSetPinDirection+0xe8>
		switch(port_no){
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	81 30       	cpi	r24, 0x01	; 1
     112:	91 05       	cpc	r25, r1
     114:	11 f1       	breq	.+68     	; 0x15a <DIO_vidSetPinDirection+0x6a>
     116:	82 30       	cpi	r24, 0x02	; 2
     118:	91 05       	cpc	r25, r1
     11a:	1c f4       	brge	.+6      	; 0x122 <DIO_vidSetPinDirection+0x32>
     11c:	89 2b       	or	r24, r25
     11e:	41 f0       	breq	.+16     	; 0x130 <DIO_vidSetPinDirection+0x40>
     120:	5b c0       	rjmp	.+182    	; 0x1d8 <DIO_vidSetPinDirection+0xe8>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	91 05       	cpc	r25, r1
     126:	71 f1       	breq	.+92     	; 0x184 <DIO_vidSetPinDirection+0x94>
     128:	03 97       	sbiw	r24, 0x03	; 3
     12a:	09 f4       	brne	.+2      	; 0x12e <DIO_vidSetPinDirection+0x3e>
     12c:	40 c0       	rjmp	.+128    	; 0x1ae <DIO_vidSetPinDirection+0xbe>
     12e:	54 c0       	rjmp	.+168    	; 0x1d8 <DIO_vidSetPinDirection+0xe8>
		case PORTA_Reg:
			Set_Bit(DDRA,pin_no);
     130:	8a e3       	ldi	r24, 0x3A	; 58
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	2a e3       	ldi	r18, 0x3A	; 58
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	62 2f       	mov	r22, r18
     13e:	2a 81       	ldd	r18, Y+2	; 0x02
     140:	42 2f       	mov	r20, r18
     142:	50 e0       	ldi	r21, 0x00	; 0
     144:	21 e0       	ldi	r18, 0x01	; 1
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_vidSetPinDirection+0x5e>
     14a:	22 0f       	add	r18, r18
     14c:	33 1f       	adc	r19, r19
     14e:	4a 95       	dec	r20
     150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_vidSetPinDirection+0x5a>
     152:	26 2b       	or	r18, r22
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
			break;
     158:	3f c0       	rjmp	.+126    	; 0x1d8 <DIO_vidSetPinDirection+0xe8>
		case PORTB_Reg:
			Set_Bit(DDRB,pin_no);
     15a:	87 e3       	ldi	r24, 0x37	; 55
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	27 e3       	ldi	r18, 0x37	; 55
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	f9 01       	movw	r30, r18
     164:	20 81       	ld	r18, Z
     166:	62 2f       	mov	r22, r18
     168:	2a 81       	ldd	r18, Y+2	; 0x02
     16a:	42 2f       	mov	r20, r18
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	21 e0       	ldi	r18, 0x01	; 1
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_vidSetPinDirection+0x88>
     174:	22 0f       	add	r18, r18
     176:	33 1f       	adc	r19, r19
     178:	4a 95       	dec	r20
     17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_vidSetPinDirection+0x84>
     17c:	26 2b       	or	r18, r22
     17e:	fc 01       	movw	r30, r24
     180:	20 83       	st	Z, r18
			break;
     182:	2a c0       	rjmp	.+84     	; 0x1d8 <DIO_vidSetPinDirection+0xe8>
		case PORTC_Reg:
			Set_Bit(DDRC,pin_no);
     184:	84 e3       	ldi	r24, 0x34	; 52
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	24 e3       	ldi	r18, 0x34	; 52
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	f9 01       	movw	r30, r18
     18e:	20 81       	ld	r18, Z
     190:	62 2f       	mov	r22, r18
     192:	2a 81       	ldd	r18, Y+2	; 0x02
     194:	42 2f       	mov	r20, r18
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	21 e0       	ldi	r18, 0x01	; 1
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_vidSetPinDirection+0xb2>
     19e:	22 0f       	add	r18, r18
     1a0:	33 1f       	adc	r19, r19
     1a2:	4a 95       	dec	r20
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_vidSetPinDirection+0xae>
     1a6:	26 2b       	or	r18, r22
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18
			break;
     1ac:	15 c0       	rjmp	.+42     	; 0x1d8 <DIO_vidSetPinDirection+0xe8>

		case PORTD_Reg:
			Set_Bit(DDRD,pin_no);
     1ae:	81 e3       	ldi	r24, 0x31	; 49
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	21 e3       	ldi	r18, 0x31	; 49
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	f9 01       	movw	r30, r18
     1b8:	20 81       	ld	r18, Z
     1ba:	62 2f       	mov	r22, r18
     1bc:	2a 81       	ldd	r18, Y+2	; 0x02
     1be:	42 2f       	mov	r20, r18
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_vidSetPinDirection+0xdc>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	4a 95       	dec	r20
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_vidSetPinDirection+0xd8>
     1d0:	26 2b       	or	r18, r22
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 83       	st	Z, r18
			break;
     1d6:	00 00       	nop
		}
	}
	if(pin_diection==INPUT){
     1d8:	8b 81       	ldd	r24, Y+3	; 0x03
     1da:	88 23       	and	r24, r24
     1dc:	09 f0       	breq	.+2      	; 0x1e0 <DIO_vidSetPinDirection+0xf0>
     1de:	6b c0       	rjmp	.+214    	; 0x2b6 <DIO_vidSetPinDirection+0x1c6>
		switch(port_no){
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	88 2f       	mov	r24, r24
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	81 30       	cpi	r24, 0x01	; 1
     1e8:	91 05       	cpc	r25, r1
     1ea:	19 f1       	breq	.+70     	; 0x232 <DIO_vidSetPinDirection+0x142>
     1ec:	82 30       	cpi	r24, 0x02	; 2
     1ee:	91 05       	cpc	r25, r1
     1f0:	1c f4       	brge	.+6      	; 0x1f8 <DIO_vidSetPinDirection+0x108>
     1f2:	89 2b       	or	r24, r25
     1f4:	41 f0       	breq	.+16     	; 0x206 <DIO_vidSetPinDirection+0x116>
		case PORTD_Reg:
			Clr_Bit(DDRD,pin_no);
			break;
		}
	}
}
     1f6:	5f c0       	rjmp	.+190    	; 0x2b6 <DIO_vidSetPinDirection+0x1c6>
			Set_Bit(DDRD,pin_no);
			break;
		}
	}
	if(pin_diection==INPUT){
		switch(port_no){
     1f8:	82 30       	cpi	r24, 0x02	; 2
     1fa:	91 05       	cpc	r25, r1
     1fc:	81 f1       	breq	.+96     	; 0x25e <DIO_vidSetPinDirection+0x16e>
     1fe:	03 97       	sbiw	r24, 0x03	; 3
     200:	09 f4       	brne	.+2      	; 0x204 <DIO_vidSetPinDirection+0x114>
     202:	43 c0       	rjmp	.+134    	; 0x28a <DIO_vidSetPinDirection+0x19a>
		case PORTD_Reg:
			Clr_Bit(DDRD,pin_no);
			break;
		}
	}
}
     204:	58 c0       	rjmp	.+176    	; 0x2b6 <DIO_vidSetPinDirection+0x1c6>
		}
	}
	if(pin_diection==INPUT){
		switch(port_no){
		case PORTA_Reg:
			Clr_Bit(DDRA,pin_no);
     206:	8a e3       	ldi	r24, 0x3A	; 58
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	2a e3       	ldi	r18, 0x3A	; 58
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	f9 01       	movw	r30, r18
     210:	20 81       	ld	r18, Z
     212:	62 2f       	mov	r22, r18
     214:	2a 81       	ldd	r18, Y+2	; 0x02
     216:	42 2f       	mov	r20, r18
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	21 e0       	ldi	r18, 0x01	; 1
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_vidSetPinDirection+0x134>
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	4a 95       	dec	r20
     226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_vidSetPinDirection+0x130>
     228:	20 95       	com	r18
     22a:	26 23       	and	r18, r22
     22c:	fc 01       	movw	r30, r24
     22e:	20 83       	st	Z, r18
			break;
     230:	42 c0       	rjmp	.+132    	; 0x2b6 <DIO_vidSetPinDirection+0x1c6>
		case PORTB_Reg:
			Clr_Bit(DDRB,pin_no);
     232:	87 e3       	ldi	r24, 0x37	; 55
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	27 e3       	ldi	r18, 0x37	; 55
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	f9 01       	movw	r30, r18
     23c:	20 81       	ld	r18, Z
     23e:	62 2f       	mov	r22, r18
     240:	2a 81       	ldd	r18, Y+2	; 0x02
     242:	42 2f       	mov	r20, r18
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_vidSetPinDirection+0x160>
     24c:	22 0f       	add	r18, r18
     24e:	33 1f       	adc	r19, r19
     250:	4a 95       	dec	r20
     252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_vidSetPinDirection+0x15c>
     254:	20 95       	com	r18
     256:	26 23       	and	r18, r22
     258:	fc 01       	movw	r30, r24
     25a:	20 83       	st	Z, r18
			break;
     25c:	2c c0       	rjmp	.+88     	; 0x2b6 <DIO_vidSetPinDirection+0x1c6>
		case PORTC_Reg:
			Clr_Bit(DDRC,pin_no);
     25e:	84 e3       	ldi	r24, 0x34	; 52
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	24 e3       	ldi	r18, 0x34	; 52
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	f9 01       	movw	r30, r18
     268:	20 81       	ld	r18, Z
     26a:	62 2f       	mov	r22, r18
     26c:	2a 81       	ldd	r18, Y+2	; 0x02
     26e:	42 2f       	mov	r20, r18
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_vidSetPinDirection+0x18c>
     278:	22 0f       	add	r18, r18
     27a:	33 1f       	adc	r19, r19
     27c:	4a 95       	dec	r20
     27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_vidSetPinDirection+0x188>
     280:	20 95       	com	r18
     282:	26 23       	and	r18, r22
     284:	fc 01       	movw	r30, r24
     286:	20 83       	st	Z, r18
			break;
     288:	16 c0       	rjmp	.+44     	; 0x2b6 <DIO_vidSetPinDirection+0x1c6>

		case PORTD_Reg:
			Clr_Bit(DDRD,pin_no);
     28a:	81 e3       	ldi	r24, 0x31	; 49
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	21 e3       	ldi	r18, 0x31	; 49
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	62 2f       	mov	r22, r18
     298:	2a 81       	ldd	r18, Y+2	; 0x02
     29a:	42 2f       	mov	r20, r18
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	21 e0       	ldi	r18, 0x01	; 1
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_vidSetPinDirection+0x1b8>
     2a4:	22 0f       	add	r18, r18
     2a6:	33 1f       	adc	r19, r19
     2a8:	4a 95       	dec	r20
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_vidSetPinDirection+0x1b4>
     2ac:	20 95       	com	r18
     2ae:	26 23       	and	r18, r22
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
			break;
     2b4:	00 00       	nop
		}
	}
}
     2b6:	00 00       	nop
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <DIO_vidSetPORTValue>:

void DIO_vidSetPORTValue(u8 port_no,u8 port_value){
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <DIO_vidSetPORTValue+0x6>
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	89 83       	std	Y+1, r24	; 0x01
     2d0:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no){
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	88 2f       	mov	r24, r24
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	91 05       	cpc	r25, r1
     2dc:	91 f0       	breq	.+36     	; 0x302 <DIO_vidSetPORTValue+0x3e>
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	91 05       	cpc	r25, r1
     2e2:	1c f4       	brge	.+6      	; 0x2ea <DIO_vidSetPORTValue+0x26>
     2e4:	89 2b       	or	r24, r25
     2e6:	39 f0       	breq	.+14     	; 0x2f6 <DIO_vidSetPORTValue+0x32>
	case PORTD_Reg:
		PORTD=port_value;
		break;

	default:
		break;
     2e8:	1e c0       	rjmp	.+60     	; 0x326 <DIO_vidSetPORTValue+0x62>
		}
	}
}

void DIO_vidSetPORTValue(u8 port_no,u8 port_value){
	switch(port_no){
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	91 05       	cpc	r25, r1
     2ee:	79 f0       	breq	.+30     	; 0x30e <DIO_vidSetPORTValue+0x4a>
     2f0:	03 97       	sbiw	r24, 0x03	; 3
     2f2:	99 f0       	breq	.+38     	; 0x31a <DIO_vidSetPORTValue+0x56>
	case PORTD_Reg:
		PORTD=port_value;
		break;

	default:
		break;
     2f4:	18 c0       	rjmp	.+48     	; 0x326 <DIO_vidSetPORTValue+0x62>
}

void DIO_vidSetPORTValue(u8 port_no,u8 port_value){
	switch(port_no){
	case PORTA_Reg:
		PORTA=port_value;
     2f6:	8b e3       	ldi	r24, 0x3B	; 59
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	2a 81       	ldd	r18, Y+2	; 0x02
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
		break;
     300:	12 c0       	rjmp	.+36     	; 0x326 <DIO_vidSetPORTValue+0x62>

	case PORTB_Reg:
		PORTB=port_value;
     302:	88 e3       	ldi	r24, 0x38	; 56
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	2a 81       	ldd	r18, Y+2	; 0x02
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
		break;
     30c:	0c c0       	rjmp	.+24     	; 0x326 <DIO_vidSetPORTValue+0x62>

	case PORTC_Reg:
		PORTC=port_value;
     30e:	85 e3       	ldi	r24, 0x35	; 53
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	2a 81       	ldd	r18, Y+2	; 0x02
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18
		break;
     318:	06 c0       	rjmp	.+12     	; 0x326 <DIO_vidSetPORTValue+0x62>

	case PORTD_Reg:
		PORTD=port_value;
     31a:	82 e3       	ldi	r24, 0x32	; 50
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	2a 81       	ldd	r18, Y+2	; 0x02
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
		break;
     324:	00 00       	nop

	default:
		break;
	}
}
     326:	00 00       	nop
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <DIO_vidSetPinValue>:

void DIO_vidSetPinValue(u8 port_no,u8 pin_no,u8 pin_value){
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	00 d0       	rcall	.+0      	; 0x338 <DIO_vidSetPinValue+0x6>
     338:	1f 92       	push	r1
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	89 83       	std	Y+1, r24	; 0x01
     340:	6a 83       	std	Y+2, r22	; 0x02
     342:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_value==HIGH){
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	09 f0       	breq	.+2      	; 0x34c <DIO_vidSetPinValue+0x1a>
     34a:	67 c0       	rjmp	.+206    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		switch(port_no){
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	88 2f       	mov	r24, r24
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	91 05       	cpc	r25, r1
     356:	11 f1       	breq	.+68     	; 0x39c <DIO_vidSetPinValue+0x6a>
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	91 05       	cpc	r25, r1
     35c:	1c f4       	brge	.+6      	; 0x364 <DIO_vidSetPinValue+0x32>
     35e:	89 2b       	or	r24, r25
     360:	41 f0       	breq	.+16     	; 0x372 <DIO_vidSetPinValue+0x40>
     362:	5b c0       	rjmp	.+182    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     364:	82 30       	cpi	r24, 0x02	; 2
     366:	91 05       	cpc	r25, r1
     368:	71 f1       	breq	.+92     	; 0x3c6 <DIO_vidSetPinValue+0x94>
     36a:	03 97       	sbiw	r24, 0x03	; 3
     36c:	09 f4       	brne	.+2      	; 0x370 <DIO_vidSetPinValue+0x3e>
     36e:	40 c0       	rjmp	.+128    	; 0x3f0 <DIO_vidSetPinValue+0xbe>
     370:	54 c0       	rjmp	.+168    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		case PORTA_Reg:
			Set_Bit(PORTA,pin_no);
     372:	8b e3       	ldi	r24, 0x3B	; 59
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	2b e3       	ldi	r18, 0x3B	; 59
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	f9 01       	movw	r30, r18
     37c:	20 81       	ld	r18, Z
     37e:	62 2f       	mov	r22, r18
     380:	2a 81       	ldd	r18, Y+2	; 0x02
     382:	42 2f       	mov	r20, r18
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	21 e0       	ldi	r18, 0x01	; 1
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_vidSetPinValue+0x5e>
     38c:	22 0f       	add	r18, r18
     38e:	33 1f       	adc	r19, r19
     390:	4a 95       	dec	r20
     392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_vidSetPinValue+0x5a>
     394:	26 2b       	or	r18, r22
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18
			break;
     39a:	3f c0       	rjmp	.+126    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		case PORTB_Reg:
			Set_Bit(PORTB,pin_no);
     39c:	88 e3       	ldi	r24, 0x38	; 56
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	28 e3       	ldi	r18, 0x38	; 56
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	f9 01       	movw	r30, r18
     3a6:	20 81       	ld	r18, Z
     3a8:	62 2f       	mov	r22, r18
     3aa:	2a 81       	ldd	r18, Y+2	; 0x02
     3ac:	42 2f       	mov	r20, r18
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	21 e0       	ldi	r18, 0x01	; 1
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_vidSetPinValue+0x88>
     3b6:	22 0f       	add	r18, r18
     3b8:	33 1f       	adc	r19, r19
     3ba:	4a 95       	dec	r20
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_vidSetPinValue+0x84>
     3be:	26 2b       	or	r18, r22
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 83       	st	Z, r18
			break;
     3c4:	2a c0       	rjmp	.+84     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		case PORTC_Reg:
			Set_Bit(PORTC,pin_no);
     3c6:	85 e3       	ldi	r24, 0x35	; 53
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	25 e3       	ldi	r18, 0x35	; 53
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	f9 01       	movw	r30, r18
     3d0:	20 81       	ld	r18, Z
     3d2:	62 2f       	mov	r22, r18
     3d4:	2a 81       	ldd	r18, Y+2	; 0x02
     3d6:	42 2f       	mov	r20, r18
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_vidSetPinValue+0xb2>
     3e0:	22 0f       	add	r18, r18
     3e2:	33 1f       	adc	r19, r19
     3e4:	4a 95       	dec	r20
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_vidSetPinValue+0xae>
     3e8:	26 2b       	or	r18, r22
     3ea:	fc 01       	movw	r30, r24
     3ec:	20 83       	st	Z, r18
			break;
     3ee:	15 c0       	rjmp	.+42     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

		case PORTD_Reg:
			Set_Bit(PORTD,pin_no);
     3f0:	82 e3       	ldi	r24, 0x32	; 50
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	22 e3       	ldi	r18, 0x32	; 50
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	f9 01       	movw	r30, r18
     3fa:	20 81       	ld	r18, Z
     3fc:	62 2f       	mov	r22, r18
     3fe:	2a 81       	ldd	r18, Y+2	; 0x02
     400:	42 2f       	mov	r20, r18
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40a:	22 0f       	add	r18, r18
     40c:	33 1f       	adc	r19, r19
     40e:	4a 95       	dec	r20
     410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     412:	26 2b       	or	r18, r22
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18
			break;
     418:	00 00       	nop
		}
	}
	if(pin_value==INPUT){
     41a:	8b 81       	ldd	r24, Y+3	; 0x03
     41c:	88 23       	and	r24, r24
     41e:	09 f0       	breq	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	6b c0       	rjmp	.+214    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		switch(port_no){
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	91 05       	cpc	r25, r1
     42c:	19 f1       	breq	.+70     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	91 05       	cpc	r25, r1
     432:	1c f4       	brge	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     434:	89 2b       	or	r24, r25
     436:	41 f0       	breq	.+16     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		case PORTD_Reg:
			Clr_Bit(PORTD,pin_no);
			break;
		}
	}
}
     438:	5f c0       	rjmp	.+190    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			Set_Bit(PORTD,pin_no);
			break;
		}
	}
	if(pin_value==INPUT){
		switch(port_no){
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	91 05       	cpc	r25, r1
     43e:	81 f1       	breq	.+96     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     440:	03 97       	sbiw	r24, 0x03	; 3
     442:	09 f4       	brne	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	43 c0       	rjmp	.+134    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		case PORTD_Reg:
			Clr_Bit(PORTD,pin_no);
			break;
		}
	}
}
     446:	58 c0       	rjmp	.+176    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		}
	}
	if(pin_value==INPUT){
		switch(port_no){
		case PORTA_Reg:
			Clr_Bit(PORTA,pin_no);
     448:	8b e3       	ldi	r24, 0x3B	; 59
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	2b e3       	ldi	r18, 0x3B	; 59
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	f9 01       	movw	r30, r18
     452:	20 81       	ld	r18, Z
     454:	62 2f       	mov	r22, r18
     456:	2a 81       	ldd	r18, Y+2	; 0x02
     458:	42 2f       	mov	r20, r18
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	02 c0       	rjmp	.+4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	4a 95       	dec	r20
     468:	e2 f7       	brpl	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     46a:	20 95       	com	r18
     46c:	26 23       	and	r18, r22
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
			break;
     472:	42 c0       	rjmp	.+132    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		case PORTB_Reg:
			Clr_Bit(PORTB,pin_no);
     474:	88 e3       	ldi	r24, 0x38	; 56
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	28 e3       	ldi	r18, 0x38	; 56
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	f9 01       	movw	r30, r18
     47e:	20 81       	ld	r18, Z
     480:	62 2f       	mov	r22, r18
     482:	2a 81       	ldd	r18, Y+2	; 0x02
     484:	42 2f       	mov	r20, r18
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     48e:	22 0f       	add	r18, r18
     490:	33 1f       	adc	r19, r19
     492:	4a 95       	dec	r20
     494:	e2 f7       	brpl	.-8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     496:	20 95       	com	r18
     498:	26 23       	and	r18, r22
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
			break;
     49e:	2c c0       	rjmp	.+88     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		case PORTC_Reg:
			Clr_Bit(PORTC,pin_no);
     4a0:	85 e3       	ldi	r24, 0x35	; 53
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	25 e3       	ldi	r18, 0x35	; 53
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	f9 01       	movw	r30, r18
     4aa:	20 81       	ld	r18, Z
     4ac:	62 2f       	mov	r22, r18
     4ae:	2a 81       	ldd	r18, Y+2	; 0x02
     4b0:	42 2f       	mov	r20, r18
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	21 e0       	ldi	r18, 0x01	; 1
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4ba:	22 0f       	add	r18, r18
     4bc:	33 1f       	adc	r19, r19
     4be:	4a 95       	dec	r20
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4c2:	20 95       	com	r18
     4c4:	26 23       	and	r18, r22
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
			break;
     4ca:	16 c0       	rjmp	.+44     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>

		case PORTD_Reg:
			Clr_Bit(PORTD,pin_no);
     4cc:	82 e3       	ldi	r24, 0x32	; 50
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	22 e3       	ldi	r18, 0x32	; 50
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	f9 01       	movw	r30, r18
     4d6:	20 81       	ld	r18, Z
     4d8:	62 2f       	mov	r22, r18
     4da:	2a 81       	ldd	r18, Y+2	; 0x02
     4dc:	42 2f       	mov	r20, r18
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	21 e0       	ldi	r18, 0x01	; 1
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4e6:	22 0f       	add	r18, r18
     4e8:	33 1f       	adc	r19, r19
     4ea:	4a 95       	dec	r20
     4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4ee:	20 95       	com	r18
     4f0:	26 23       	and	r18, r22
     4f2:	fc 01       	movw	r30, r24
     4f4:	20 83       	st	Z, r18
			break;
     4f6:	00 00       	nop
		}
	}
}
     4f8:	00 00       	nop
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <DIO_vidGetPortValue>:

u8 DIO_vidGetPortValue(u8 port_no){
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	1f 92       	push	r1
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	89 83       	std	Y+1, r24	; 0x01
	switch (port_no){
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	88 2f       	mov	r24, r24
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	91 05       	cpc	r25, r1
     51c:	89 f0       	breq	.+34     	; 0x540 <DIO_vidGetPortValue+0x3a>
     51e:	82 30       	cpi	r24, 0x02	; 2
     520:	91 05       	cpc	r25, r1
     522:	1c f4       	brge	.+6      	; 0x52a <DIO_vidGetPortValue+0x24>
     524:	89 2b       	or	r24, r25
     526:	39 f0       	breq	.+14     	; 0x536 <DIO_vidGetPortValue+0x30>
     528:	1a c0       	rjmp	.+52     	; 0x55e <DIO_vidGetPortValue+0x58>
     52a:	82 30       	cpi	r24, 0x02	; 2
     52c:	91 05       	cpc	r25, r1
     52e:	69 f0       	breq	.+26     	; 0x54a <DIO_vidGetPortValue+0x44>
     530:	03 97       	sbiw	r24, 0x03	; 3
     532:	81 f0       	breq	.+32     	; 0x554 <DIO_vidGetPortValue+0x4e>
     534:	14 c0       	rjmp	.+40     	; 0x55e <DIO_vidGetPortValue+0x58>
	case PORTA_Reg:
		return PINA;
     536:	89 e3       	ldi	r24, 0x39	; 57
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	fc 01       	movw	r30, r24
     53c:	80 81       	ld	r24, Z
     53e:	10 c0       	rjmp	.+32     	; 0x560 <DIO_vidGetPortValue+0x5a>
		break;

	case PORTB_Reg:
		return PINB;
     540:	86 e3       	ldi	r24, 0x36	; 54
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	fc 01       	movw	r30, r24
     546:	80 81       	ld	r24, Z
     548:	0b c0       	rjmp	.+22     	; 0x560 <DIO_vidGetPortValue+0x5a>
		break;

	case PORTC_Reg:
		return PINC;
     54a:	83 e3       	ldi	r24, 0x33	; 51
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	fc 01       	movw	r30, r24
     550:	80 81       	ld	r24, Z
     552:	06 c0       	rjmp	.+12     	; 0x560 <DIO_vidGetPortValue+0x5a>
		break;

	case PORTD_Reg:
		return PIND;
     554:	80 e3       	ldi	r24, 0x30	; 48
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	fc 01       	movw	r30, r24
     55a:	80 81       	ld	r24, Z
     55c:	01 c0       	rjmp	.+2      	; 0x560 <DIO_vidGetPortValue+0x5a>
		break;

	default:
		return 0;
     55e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     560:	0f 90       	pop	r0
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <DIO_vidGetPinValue>:

u8 DIO_vidGetPinValue(u8 port_no, u8 pin_no){
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	00 d0       	rcall	.+0      	; 0x56e <DIO_vidGetPinValue+0x6>
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	6a 83       	std	Y+2, r22	; 0x02

	switch (port_no){
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	88 2f       	mov	r24, r24
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	91 05       	cpc	r25, r1
     580:	e1 f0       	breq	.+56     	; 0x5ba <DIO_vidGetPinValue+0x52>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	91 05       	cpc	r25, r1
     586:	1c f4       	brge	.+6      	; 0x58e <DIO_vidGetPinValue+0x26>
     588:	89 2b       	or	r24, r25
     58a:	39 f0       	breq	.+14     	; 0x59a <DIO_vidGetPinValue+0x32>
     58c:	46 c0       	rjmp	.+140    	; 0x61a <DIO_vidGetPinValue+0xb2>
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	91 05       	cpc	r25, r1
     592:	19 f1       	breq	.+70     	; 0x5da <DIO_vidGetPinValue+0x72>
     594:	03 97       	sbiw	r24, 0x03	; 3
     596:	89 f1       	breq	.+98     	; 0x5fa <DIO_vidGetPinValue+0x92>
     598:	40 c0       	rjmp	.+128    	; 0x61a <DIO_vidGetPinValue+0xb2>
	case PORTA_Reg:
		return Get_Bit(PINA,pin_no);
     59a:	89 e3       	ldi	r24, 0x39	; 57
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	fc 01       	movw	r30, r24
     5a0:	80 81       	ld	r24, Z
     5a2:	88 2f       	mov	r24, r24
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	2a 81       	ldd	r18, Y+2	; 0x02
     5a8:	22 2f       	mov	r18, r18
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_vidGetPinValue+0x4a>
     5ae:	95 95       	asr	r25
     5b0:	87 95       	ror	r24
     5b2:	2a 95       	dec	r18
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_vidGetPinValue+0x46>
     5b6:	81 70       	andi	r24, 0x01	; 1
     5b8:	31 c0       	rjmp	.+98     	; 0x61c <DIO_vidGetPinValue+0xb4>
		break;

	case PORTB_Reg:
		return Get_Bit(PINB,pin_no);
     5ba:	86 e3       	ldi	r24, 0x36	; 54
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	fc 01       	movw	r30, r24
     5c0:	80 81       	ld	r24, Z
     5c2:	88 2f       	mov	r24, r24
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	2a 81       	ldd	r18, Y+2	; 0x02
     5c8:	22 2f       	mov	r18, r18
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_vidGetPinValue+0x6a>
     5ce:	95 95       	asr	r25
     5d0:	87 95       	ror	r24
     5d2:	2a 95       	dec	r18
     5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_vidGetPinValue+0x66>
     5d6:	81 70       	andi	r24, 0x01	; 1
     5d8:	21 c0       	rjmp	.+66     	; 0x61c <DIO_vidGetPinValue+0xb4>
		break;

	case PORTC_Reg:
		return Get_Bit(PINC,pin_no);
     5da:	83 e3       	ldi	r24, 0x33	; 51
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	fc 01       	movw	r30, r24
     5e0:	80 81       	ld	r24, Z
     5e2:	88 2f       	mov	r24, r24
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	2a 81       	ldd	r18, Y+2	; 0x02
     5e8:	22 2f       	mov	r18, r18
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_vidGetPinValue+0x8a>
     5ee:	95 95       	asr	r25
     5f0:	87 95       	ror	r24
     5f2:	2a 95       	dec	r18
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_vidGetPinValue+0x86>
     5f6:	81 70       	andi	r24, 0x01	; 1
     5f8:	11 c0       	rjmp	.+34     	; 0x61c <DIO_vidGetPinValue+0xb4>
		break;

	case PORTD_Reg:
		return Get_Bit(PIND,pin_no);
     5fa:	80 e3       	ldi	r24, 0x30	; 48
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	fc 01       	movw	r30, r24
     600:	80 81       	ld	r24, Z
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	2a 81       	ldd	r18, Y+2	; 0x02
     608:	22 2f       	mov	r18, r18
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_vidGetPinValue+0xaa>
     60e:	95 95       	asr	r25
     610:	87 95       	ror	r24
     612:	2a 95       	dec	r18
     614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_vidGetPinValue+0xa6>
     616:	81 70       	andi	r24, 0x01	; 1
     618:	01 c0       	rjmp	.+2      	; 0x61c <DIO_vidGetPinValue+0xb4>
		break;

	default:
		return 0xff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <DIO_vidTogglePin>:
void DIO_vidTogglePin(u8 u8Port_NO,u8 u8Pin_NO)
{
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	00 d0       	rcall	.+0      	; 0x62c <DIO_vidTogglePin+0x6>
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	89 83       	std	Y+1, r24	; 0x01
     632:	6a 83       	std	Y+2, r22	; 0x02
	switch (u8Port_NO){
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	88 2f       	mov	r24, r24
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	91 05       	cpc	r25, r1
     63e:	11 f1       	breq	.+68     	; 0x684 <DIO_vidTogglePin+0x5e>
     640:	82 30       	cpi	r24, 0x02	; 2
     642:	91 05       	cpc	r25, r1
     644:	1c f4       	brge	.+6      	; 0x64c <DIO_vidTogglePin+0x26>
     646:	89 2b       	or	r24, r25
     648:	41 f0       	breq	.+16     	; 0x65a <DIO_vidTogglePin+0x34>
	case PORTD_Reg:
		Toggle_Bit(PORTD,u8Pin_NO);
		break;

	default:
		break;
     64a:	5b c0       	rjmp	.+182    	; 0x702 <DIO_vidTogglePin+0xdc>
		return 0xff;
	}
}
void DIO_vidTogglePin(u8 u8Port_NO,u8 u8Pin_NO)
{
	switch (u8Port_NO){
     64c:	82 30       	cpi	r24, 0x02	; 2
     64e:	91 05       	cpc	r25, r1
     650:	71 f1       	breq	.+92     	; 0x6ae <DIO_vidTogglePin+0x88>
     652:	03 97       	sbiw	r24, 0x03	; 3
     654:	09 f4       	brne	.+2      	; 0x658 <DIO_vidTogglePin+0x32>
     656:	40 c0       	rjmp	.+128    	; 0x6d8 <DIO_vidTogglePin+0xb2>
	case PORTD_Reg:
		Toggle_Bit(PORTD,u8Pin_NO);
		break;

	default:
		break;
     658:	54 c0       	rjmp	.+168    	; 0x702 <DIO_vidTogglePin+0xdc>
}
void DIO_vidTogglePin(u8 u8Port_NO,u8 u8Pin_NO)
{
	switch (u8Port_NO){
	case PORTA_Reg:
		Toggle_Bit(PORTA,u8Pin_NO);
     65a:	8b e3       	ldi	r24, 0x3B	; 59
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	2b e3       	ldi	r18, 0x3B	; 59
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	62 2f       	mov	r22, r18
     668:	2a 81       	ldd	r18, Y+2	; 0x02
     66a:	42 2f       	mov	r20, r18
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	21 e0       	ldi	r18, 0x01	; 1
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_vidTogglePin+0x52>
     674:	22 0f       	add	r18, r18
     676:	33 1f       	adc	r19, r19
     678:	4a 95       	dec	r20
     67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_vidTogglePin+0x4e>
     67c:	26 27       	eor	r18, r22
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
		break;
     682:	3f c0       	rjmp	.+126    	; 0x702 <DIO_vidTogglePin+0xdc>

	case PORTB_Reg:
		Toggle_Bit(PORTB,u8Pin_NO);
     684:	88 e3       	ldi	r24, 0x38	; 56
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	28 e3       	ldi	r18, 0x38	; 56
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	f9 01       	movw	r30, r18
     68e:	20 81       	ld	r18, Z
     690:	62 2f       	mov	r22, r18
     692:	2a 81       	ldd	r18, Y+2	; 0x02
     694:	42 2f       	mov	r20, r18
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	21 e0       	ldi	r18, 0x01	; 1
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_vidTogglePin+0x7c>
     69e:	22 0f       	add	r18, r18
     6a0:	33 1f       	adc	r19, r19
     6a2:	4a 95       	dec	r20
     6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_vidTogglePin+0x78>
     6a6:	26 27       	eor	r18, r22
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
		break;
     6ac:	2a c0       	rjmp	.+84     	; 0x702 <DIO_vidTogglePin+0xdc>

	case PORTC_Reg:
		Toggle_Bit(PORTC,u8Pin_NO);
     6ae:	85 e3       	ldi	r24, 0x35	; 53
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	25 e3       	ldi	r18, 0x35	; 53
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	f9 01       	movw	r30, r18
     6b8:	20 81       	ld	r18, Z
     6ba:	62 2f       	mov	r22, r18
     6bc:	2a 81       	ldd	r18, Y+2	; 0x02
     6be:	42 2f       	mov	r20, r18
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_vidTogglePin+0xa6>
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	4a 95       	dec	r20
     6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_vidTogglePin+0xa2>
     6d0:	26 27       	eor	r18, r22
     6d2:	fc 01       	movw	r30, r24
     6d4:	20 83       	st	Z, r18
		break;
     6d6:	15 c0       	rjmp	.+42     	; 0x702 <DIO_vidTogglePin+0xdc>

	case PORTD_Reg:
		Toggle_Bit(PORTD,u8Pin_NO);
     6d8:	82 e3       	ldi	r24, 0x32	; 50
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	22 e3       	ldi	r18, 0x32	; 50
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	f9 01       	movw	r30, r18
     6e2:	20 81       	ld	r18, Z
     6e4:	62 2f       	mov	r22, r18
     6e6:	2a 81       	ldd	r18, Y+2	; 0x02
     6e8:	42 2f       	mov	r20, r18
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_vidTogglePin+0xd0>
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	4a 95       	dec	r20
     6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_vidTogglePin+0xcc>
     6fa:	26 27       	eor	r18, r22
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 83       	st	Z, r18
		break;
     700:	00 00       	nop

	default:
		break;
	}
}
     702:	00 00       	nop
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <KEYPAD_vidInitialize>:
#include "STD_Tybes.h"

u8 KEYPAD_MAPPing[4][4]={{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};

void KEYPAD_vidInitialize(void)
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	00 d0       	rcall	.+0      	; 0x714 <KEYPAD_vidInitialize+0x6>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62

	u8 	u8counter_R=0;
     718:	19 82       	std	Y+1, r1	; 0x01
	u8 	u8counter_C=0;
     71a:	1a 82       	std	Y+2, r1	; 0x02
	for(u8counter_R=0;u8counter_R<KEYPAD_R_NUM;u8counter_R++){
     71c:	19 82       	std	Y+1, r1	; 0x01
     71e:	27 c0       	rjmp	.+78     	; 0x76e <KEYPAD_vidInitialize+0x60>
		/*Set row input */
		DIO_vidSetPinDirection(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R],INPUT);
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	8c 59       	subi	r24, 0x9C	; 156
     728:	9f 4f       	sbci	r25, 0xFF	; 255
     72a:	fc 01       	movw	r30, r24
     72c:	20 81       	ld	r18, Z
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	88 2f       	mov	r24, r24
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	80 5a       	subi	r24, 0xA0	; 160
     736:	9f 4f       	sbci	r25, 0xFF	; 255
     738:	fc 01       	movw	r30, r24
     73a:	80 81       	ld	r24, Z
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	62 2f       	mov	r22, r18
     740:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_vidSetPinDirection>
		/* Set pull up resistor */
		DIO_vidSetPinValue(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R],HIGH);
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	88 2f       	mov	r24, r24
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	8c 59       	subi	r24, 0x9C	; 156
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	fc 01       	movw	r30, r24
     750:	20 81       	ld	r18, Z
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	80 5a       	subi	r24, 0xA0	; 160
     75a:	9f 4f       	sbci	r25, 0xFF	; 255
     75c:	fc 01       	movw	r30, r24
     75e:	80 81       	ld	r24, Z
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	62 2f       	mov	r22, r18
     764:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
void KEYPAD_vidInitialize(void)
{

	u8 	u8counter_R=0;
	u8 	u8counter_C=0;
	for(u8counter_R=0;u8counter_R<KEYPAD_R_NUM;u8counter_R++){
     768:	89 81       	ldd	r24, Y+1	; 0x01
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	84 30       	cpi	r24, 0x04	; 4
     772:	b0 f2       	brcs	.-84     	; 0x720 <KEYPAD_vidInitialize+0x12>
		DIO_vidSetPinDirection(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R],INPUT);
		/* Set pull up resistor */
		DIO_vidSetPinValue(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R],HIGH);
	}

	for(u8counter_C=0;u8counter_C<KEYPAD_C_NUM;u8counter_C++){
     774:	1a 82       	std	Y+2, r1	; 0x02
     776:	15 c0       	rjmp	.+42     	; 0x7a2 <KEYPAD_vidInitialize+0x94>
		/* SSet column output */
		DIO_vidSetPinDirection(KEYPAD_C_port[u8counter_C],KEYPAD_C_pin[u8counter_C],OUTPUT);
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	88 2f       	mov	r24, r24
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	84 59       	subi	r24, 0x94	; 148
     780:	9f 4f       	sbci	r25, 0xFF	; 255
     782:	fc 01       	movw	r30, r24
     784:	20 81       	ld	r18, Z
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	88 2f       	mov	r24, r24
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	88 59       	subi	r24, 0x98	; 152
     78e:	9f 4f       	sbci	r25, 0xFF	; 255
     790:	fc 01       	movw	r30, r24
     792:	80 81       	ld	r24, Z
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	62 2f       	mov	r22, r18
     798:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_vidSetPinDirection>
		DIO_vidSetPinDirection(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R],INPUT);
		/* Set pull up resistor */
		DIO_vidSetPinValue(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R],HIGH);
	}

	for(u8counter_C=0;u8counter_C<KEYPAD_C_NUM;u8counter_C++){
     79c:	8a 81       	ldd	r24, Y+2	; 0x02
     79e:	8f 5f       	subi	r24, 0xFF	; 255
     7a0:	8a 83       	std	Y+2, r24	; 0x02
     7a2:	8a 81       	ldd	r24, Y+2	; 0x02
     7a4:	84 30       	cpi	r24, 0x04	; 4
     7a6:	40 f3       	brcs	.-48     	; 0x778 <KEYPAD_vidInitialize+0x6a>
		/* SSet column output */
		DIO_vidSetPinDirection(KEYPAD_C_port[u8counter_C],KEYPAD_C_pin[u8counter_C],OUTPUT);
	}

}
     7a8:	00 00       	nop
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <KEYPAD_vidRead>:

u8 KEYPAD_vidRead(u8 *pu8addressvalue)
{
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	63 97       	sbiw	r28, 0x13	; 19
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	9b 8b       	std	Y+19, r25	; 0x13
     7ca:	8a 8b       	std	Y+18, r24	; 0x12
	u8 	u8counter_C=0;
     7cc:	19 82       	std	Y+1, r1	; 0x01
	u8 	u8counter_R=0;
     7ce:	1a 82       	std	Y+2, r1	; 0x02
	u8  u8Readvalue=0;
     7d0:	1b 82       	std	Y+3, r1	; 0x03
	for(u8counter_C=0;u8counter_C<KEYPAD_C_NUM;u8counter_C++)
     7d2:	19 82       	std	Y+1, r1	; 0x01
     7d4:	15 c0       	rjmp	.+42     	; 0x800 <KEYPAD_vidRead+0x4c>
	{
		/* First set high to all columns (1111) */
		DIO_vidSetPinValue(KEYPAD_C_port[u8counter_C],KEYPAD_C_pin[u8counter_C],HIGH);
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	84 59       	subi	r24, 0x94	; 148
     7de:	9f 4f       	sbci	r25, 0xFF	; 255
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 81       	ld	r18, Z
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	88 59       	subi	r24, 0x98	; 152
     7ec:	9f 4f       	sbci	r25, 0xFF	; 255
     7ee:	fc 01       	movw	r30, r24
     7f0:	80 81       	ld	r24, Z
     7f2:	41 e0       	ldi	r20, 0x01	; 1
     7f4:	62 2f       	mov	r22, r18
     7f6:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
u8 KEYPAD_vidRead(u8 *pu8addressvalue)
{
	u8 	u8counter_C=0;
	u8 	u8counter_R=0;
	u8  u8Readvalue=0;
	for(u8counter_C=0;u8counter_C<KEYPAD_C_NUM;u8counter_C++)
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	84 30       	cpi	r24, 0x04	; 4
     804:	40 f3       	brcs	.-48     	; 0x7d6 <KEYPAD_vidRead+0x22>
	{
		/* First set high to all columns (1111) */
		DIO_vidSetPinValue(KEYPAD_C_port[u8counter_C],KEYPAD_C_pin[u8counter_C],HIGH);
	}

	for(u8counter_C=0;u8counter_C<KEYPAD_C_NUM;u8counter_C++)
     806:	19 82       	std	Y+1, r1	; 0x01
     808:	e4 c0       	rjmp	.+456    	; 0x9d2 <__stack+0x173>
	{
		/* 0111,1011,1101,1110 */
		DIO_vidSetPinValue(KEYPAD_C_port[u8counter_C],KEYPAD_C_pin[u8counter_C],LOW);
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	88 2f       	mov	r24, r24
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	84 59       	subi	r24, 0x94	; 148
     812:	9f 4f       	sbci	r25, 0xFF	; 255
     814:	fc 01       	movw	r30, r24
     816:	20 81       	ld	r18, Z
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	88 2f       	mov	r24, r24
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	88 59       	subi	r24, 0x98	; 152
     820:	9f 4f       	sbci	r25, 0xFF	; 255
     822:	fc 01       	movw	r30, r24
     824:	80 81       	ld	r24, Z
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	62 2f       	mov	r22, r18
     82a:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
		for(u8counter_R=0;u8counter_R<KEYPAD_R_NUM;u8counter_R++)
     82e:	1a 82       	std	Y+2, r1	; 0x02
     830:	b7 c0       	rjmp	.+366    	; 0x9a0 <__stack+0x141>
		{
			u8Readvalue=DIO_vidGetPinValue(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R]);
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	88 2f       	mov	r24, r24
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	8c 59       	subi	r24, 0x9C	; 156
     83a:	9f 4f       	sbci	r25, 0xFF	; 255
     83c:	fc 01       	movw	r30, r24
     83e:	20 81       	ld	r18, Z
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	88 2f       	mov	r24, r24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	80 5a       	subi	r24, 0xA0	; 160
     848:	9f 4f       	sbci	r25, 0xFF	; 255
     84a:	fc 01       	movw	r30, r24
     84c:	80 81       	ld	r24, Z
     84e:	62 2f       	mov	r22, r18
     850:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_vidGetPinValue>
     854:	8b 83       	std	Y+3, r24	; 0x03
			if(u8Readvalue==LOW){
     856:	8b 81       	ldd	r24, Y+3	; 0x03
     858:	88 23       	and	r24, r24
     85a:	09 f0       	breq	.+2      	; 0x85e <KEYPAD_vidRead+0xaa>
     85c:	9e c0       	rjmp	.+316    	; 0x99a <__stack+0x13b>
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	aa ef       	ldi	r26, 0xFA	; 250
     864:	b3 e4       	ldi	r27, 0x43	; 67
     866:	8c 83       	std	Y+4, r24	; 0x04
     868:	9d 83       	std	Y+5, r25	; 0x05
     86a:	ae 83       	std	Y+6, r26	; 0x06
     86c:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e8       	ldi	r19, 0x80	; 128
     872:	4b e3       	ldi	r20, 0x3B	; 59
     874:	55 e4       	ldi	r21, 0x45	; 69
     876:	6c 81       	ldd	r22, Y+4	; 0x04
     878:	7d 81       	ldd	r23, Y+5	; 0x05
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	9f 81       	ldd	r25, Y+7	; 0x07
     87e:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	88 87       	std	Y+8, r24	; 0x08
     888:	99 87       	std	Y+9, r25	; 0x09
     88a:	aa 87       	std	Y+10, r26	; 0x0a
     88c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e8       	ldi	r20, 0x80	; 128
     894:	5f e3       	ldi	r21, 0x3F	; 63
     896:	68 85       	ldd	r22, Y+8	; 0x08
     898:	79 85       	ldd	r23, Y+9	; 0x09
     89a:	8a 85       	ldd	r24, Y+10	; 0x0a
     89c:	9b 85       	ldd	r25, Y+11	; 0x0b
     89e:	0e 94 3c 09 	call	0x1278	; 0x1278 <__cmpsf2>
     8a2:	88 23       	and	r24, r24
     8a4:	2c f4       	brge	.+10     	; 0x8b0 <__stack+0x51>
		__ticks = 1;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	9d 87       	std	Y+13, r25	; 0x0d
     8ac:	8c 87       	std	Y+12, r24	; 0x0c
     8ae:	3f c0       	rjmp	.+126    	; 0x92e <__stack+0xcf>
	else if (__tmp > 65535)
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	3f ef       	ldi	r19, 0xFF	; 255
     8b4:	4f e7       	ldi	r20, 0x7F	; 127
     8b6:	57 e4       	ldi	r21, 0x47	; 71
     8b8:	68 85       	ldd	r22, Y+8	; 0x08
     8ba:	79 85       	ldd	r23, Y+9	; 0x09
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9b 85       	ldd	r25, Y+11	; 0x0b
     8c0:	0e 94 bd 09 	call	0x137a	; 0x137a <__gesf2>
     8c4:	18 16       	cp	r1, r24
     8c6:	4c f5       	brge	.+82     	; 0x91a <__stack+0xbb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	40 e2       	ldi	r20, 0x20	; 32
     8ce:	51 e4       	ldi	r21, 0x41	; 65
     8d0:	6c 81       	ldd	r22, Y+4	; 0x04
     8d2:	7d 81       	ldd	r23, Y+5	; 0x05
     8d4:	8e 81       	ldd	r24, Y+6	; 0x06
     8d6:	9f 81       	ldd	r25, Y+7	; 0x07
     8d8:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	bc 01       	movw	r22, r24
     8e2:	cd 01       	movw	r24, r26
     8e4:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	9d 87       	std	Y+13, r25	; 0x0d
     8ee:	8c 87       	std	Y+12, r24	; 0x0c
     8f0:	0f c0       	rjmp	.+30     	; 0x910 <__stack+0xb1>
     8f2:	8c e2       	ldi	r24, 0x2C	; 44
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	9f 87       	std	Y+15, r25	; 0x0f
     8f8:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8fa:	8e 85       	ldd	r24, Y+14	; 0x0e
     8fc:	9f 85       	ldd	r25, Y+15	; 0x0f
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <__stack+0x9f>
     902:	9f 87       	std	Y+15, r25	; 0x0f
     904:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     906:	8c 85       	ldd	r24, Y+12	; 0x0c
     908:	9d 85       	ldd	r25, Y+13	; 0x0d
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	9d 87       	std	Y+13, r25	; 0x0d
     90e:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     910:	8c 85       	ldd	r24, Y+12	; 0x0c
     912:	9d 85       	ldd	r25, Y+13	; 0x0d
     914:	89 2b       	or	r24, r25
     916:	69 f7       	brne	.-38     	; 0x8f2 <__stack+0x93>
     918:	14 c0       	rjmp	.+40     	; 0x942 <__stack+0xe3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     91a:	68 85       	ldd	r22, Y+8	; 0x08
     91c:	79 85       	ldd	r23, Y+9	; 0x09
     91e:	8a 85       	ldd	r24, Y+10	; 0x0a
     920:	9b 85       	ldd	r25, Y+11	; 0x0b
     922:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     926:	dc 01       	movw	r26, r24
     928:	cb 01       	movw	r24, r22
     92a:	9d 87       	std	Y+13, r25	; 0x0d
     92c:	8c 87       	std	Y+12, r24	; 0x0c
     92e:	8c 85       	ldd	r24, Y+12	; 0x0c
     930:	9d 85       	ldd	r25, Y+13	; 0x0d
     932:	99 8b       	std	Y+17, r25	; 0x11
     934:	88 8b       	std	Y+16, r24	; 0x10
     936:	88 89       	ldd	r24, Y+16	; 0x10
     938:	99 89       	ldd	r25, Y+17	; 0x11
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <__stack+0xdb>
     93e:	99 8b       	std	Y+17, r25	; 0x11
     940:	88 8b       	std	Y+16, r24	; 0x10
				_delay_ms(500);
				*pu8addressvalue=KEYPAD_MAPPing[u8counter_R][u8counter_C];
     942:	8a 81       	ldd	r24, Y+2	; 0x02
     944:	28 2f       	mov	r18, r24
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	88 2f       	mov	r24, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	22 0f       	add	r18, r18
     950:	33 1f       	adc	r19, r19
     952:	22 0f       	add	r18, r18
     954:	33 1f       	adc	r19, r19
     956:	82 0f       	add	r24, r18
     958:	93 1f       	adc	r25, r19
     95a:	80 59       	subi	r24, 0x90	; 144
     95c:	9f 4f       	sbci	r25, 0xFF	; 255
     95e:	fc 01       	movw	r30, r24
     960:	20 81       	ld	r18, Z
     962:	8a 89       	ldd	r24, Y+18	; 0x12
     964:	9b 89       	ldd	r25, Y+19	; 0x13
     966:	fc 01       	movw	r30, r24
     968:	20 83       	st	Z, r18
				while(u8Readvalue==LOW){
     96a:	12 c0       	rjmp	.+36     	; 0x990 <__stack+0x131>
					u8Readvalue=DIO_vidGetPinValue(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R]);
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	8c 59       	subi	r24, 0x9C	; 156
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	fc 01       	movw	r30, r24
     978:	20 81       	ld	r18, Z
     97a:	8a 81       	ldd	r24, Y+2	; 0x02
     97c:	88 2f       	mov	r24, r24
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	80 5a       	subi	r24, 0xA0	; 160
     982:	9f 4f       	sbci	r25, 0xFF	; 255
     984:	fc 01       	movw	r30, r24
     986:	80 81       	ld	r24, Z
     988:	62 2f       	mov	r22, r18
     98a:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_vidGetPinValue>
     98e:	8b 83       	std	Y+3, r24	; 0x03
		{
			u8Readvalue=DIO_vidGetPinValue(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R]);
			if(u8Readvalue==LOW){
				_delay_ms(500);
				*pu8addressvalue=KEYPAD_MAPPing[u8counter_R][u8counter_C];
				while(u8Readvalue==LOW){
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	88 23       	and	r24, r24
     994:	59 f3       	breq	.-42     	; 0x96c <__stack+0x10d>
					u8Readvalue=DIO_vidGetPinValue(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R]);
				}
				return KEYPAD_OK;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	21 c0       	rjmp	.+66     	; 0x9dc <__stack+0x17d>

	for(u8counter_C=0;u8counter_C<KEYPAD_C_NUM;u8counter_C++)
	{
		/* 0111,1011,1101,1110 */
		DIO_vidSetPinValue(KEYPAD_C_port[u8counter_C],KEYPAD_C_pin[u8counter_C],LOW);
		for(u8counter_R=0;u8counter_R<KEYPAD_R_NUM;u8counter_R++)
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	8f 5f       	subi	r24, 0xFF	; 255
     99e:	8a 83       	std	Y+2, r24	; 0x02
     9a0:	8a 81       	ldd	r24, Y+2	; 0x02
     9a2:	84 30       	cpi	r24, 0x04	; 4
     9a4:	08 f4       	brcc	.+2      	; 0x9a8 <__stack+0x149>
     9a6:	45 cf       	rjmp	.-374    	; 0x832 <KEYPAD_vidRead+0x7e>
					u8Readvalue=DIO_vidGetPinValue(KEYPAD_R_port[u8counter_R],KEYPAD_R_pin[u8counter_R]);
				}
				return KEYPAD_OK;
			}
		}
		DIO_vidSetPinValue(KEYPAD_C_port[u8counter_C],KEYPAD_C_pin[u8counter_C],HIGH);
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	88 2f       	mov	r24, r24
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	84 59       	subi	r24, 0x94	; 148
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 81       	ld	r18, Z
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	88 2f       	mov	r24, r24
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	88 59       	subi	r24, 0x98	; 152
     9be:	9f 4f       	sbci	r25, 0xFF	; 255
     9c0:	fc 01       	movw	r30, r24
     9c2:	80 81       	ld	r24, Z
     9c4:	41 e0       	ldi	r20, 0x01	; 1
     9c6:	62 2f       	mov	r22, r18
     9c8:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
	{
		/* First set high to all columns (1111) */
		DIO_vidSetPinValue(KEYPAD_C_port[u8counter_C],KEYPAD_C_pin[u8counter_C],HIGH);
	}

	for(u8counter_C=0;u8counter_C<KEYPAD_C_NUM;u8counter_C++)
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	8f 5f       	subi	r24, 0xFF	; 255
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	84 30       	cpi	r24, 0x04	; 4
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	18 cf       	rjmp	.-464    	; 0x80a <KEYPAD_vidRead+0x56>
				return KEYPAD_OK;
			}
		}
		DIO_vidSetPinValue(KEYPAD_C_port[u8counter_C],KEYPAD_C_pin[u8counter_C],HIGH);
	}
	return KEYPAD_NOK;
     9da:	80 e0       	ldi	r24, 0x00	; 0
}
     9dc:	63 96       	adiw	r28, 0x13	; 19
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <LCD_vidWriteData>:
#include "DIO_Int.h"
#include "LCD_Confg.h"
#include <util/delay.h>

void LCD_vidWriteData(u8 u8Data)
{
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	2f 97       	sbiw	r28, 0x0f	; 15
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	8f 87       	std	Y+15, r24	; 0x0f
	/* Set RS*/
	DIO_vidSetPinValue(LCD_RSPORT,LCD_RSPIN,HIGH);
     a04:	41 e0       	ldi	r20, 0x01	; 1
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
	/* Rest R/W*/
	DIO_vidSetPinValue(LCD_RWPORT,LCD_RWPIN,LOW);
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
	/* Data->data lines */
	DIO_vidSetPORTValue(LCD_DATAPORT,u8Data) ;
     a18:	6f 85       	ldd	r22, Y+15	; 0x0f
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIO_vidSetPORTValue>
	/* Set Enable */
	DIO_vidSetPinValue(LCD_ENPORT,LCD_ENPIN,HIGH);
     a20:	41 e0       	ldi	r20, 0x01	; 1
     a22:	62 e0       	ldi	r22, 0x02	; 2
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 ea       	ldi	r26, 0xA0	; 160
     a30:	b0 e4       	ldi	r27, 0x40	; 64
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	9a 83       	std	Y+2, r25	; 0x02
     a36:	ab 83       	std	Y+3, r26	; 0x03
     a38:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e8       	ldi	r19, 0x80	; 128
     a3e:	4b e3       	ldi	r20, 0x3B	; 59
     a40:	55 e4       	ldi	r21, 0x45	; 69
     a42:	69 81       	ldd	r22, Y+1	; 0x01
     a44:	7a 81       	ldd	r23, Y+2	; 0x02
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	9c 81       	ldd	r25, Y+4	; 0x04
     a4a:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	8d 83       	std	Y+5, r24	; 0x05
     a54:	9e 83       	std	Y+6, r25	; 0x06
     a56:	af 83       	std	Y+7, r26	; 0x07
     a58:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e8       	ldi	r20, 0x80	; 128
     a60:	5f e3       	ldi	r21, 0x3F	; 63
     a62:	6d 81       	ldd	r22, Y+5	; 0x05
     a64:	7e 81       	ldd	r23, Y+6	; 0x06
     a66:	8f 81       	ldd	r24, Y+7	; 0x07
     a68:	98 85       	ldd	r25, Y+8	; 0x08
     a6a:	0e 94 3c 09 	call	0x1278	; 0x1278 <__cmpsf2>
     a6e:	88 23       	and	r24, r24
     a70:	2c f4       	brge	.+10     	; 0xa7c <LCD_vidWriteData+0x8e>
		__ticks = 1;
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	9a 87       	std	Y+10, r25	; 0x0a
     a78:	89 87       	std	Y+9, r24	; 0x09
     a7a:	3f c0       	rjmp	.+126    	; 0xafa <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	3f ef       	ldi	r19, 0xFF	; 255
     a80:	4f e7       	ldi	r20, 0x7F	; 127
     a82:	57 e4       	ldi	r21, 0x47	; 71
     a84:	6d 81       	ldd	r22, Y+5	; 0x05
     a86:	7e 81       	ldd	r23, Y+6	; 0x06
     a88:	8f 81       	ldd	r24, Y+7	; 0x07
     a8a:	98 85       	ldd	r25, Y+8	; 0x08
     a8c:	0e 94 bd 09 	call	0x137a	; 0x137a <__gesf2>
     a90:	18 16       	cp	r1, r24
     a92:	4c f5       	brge	.+82     	; 0xae6 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	40 e2       	ldi	r20, 0x20	; 32
     a9a:	51 e4       	ldi	r21, 0x41	; 65
     a9c:	69 81       	ldd	r22, Y+1	; 0x01
     a9e:	7a 81       	ldd	r23, Y+2	; 0x02
     aa0:	8b 81       	ldd	r24, Y+3	; 0x03
     aa2:	9c 81       	ldd	r25, Y+4	; 0x04
     aa4:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	bc 01       	movw	r22, r24
     aae:	cd 01       	movw	r24, r26
     ab0:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	9a 87       	std	Y+10, r25	; 0x0a
     aba:	89 87       	std	Y+9, r24	; 0x09
     abc:	0f c0       	rjmp	.+30     	; 0xadc <LCD_vidWriteData+0xee>
     abe:	8c e2       	ldi	r24, 0x2C	; 44
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	9c 87       	std	Y+12, r25	; 0x0c
     ac4:	8b 87       	std	Y+11, r24	; 0x0b
     ac6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ac8:	9c 85       	ldd	r25, Y+12	; 0x0c
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	f1 f7       	brne	.-4      	; 0xaca <LCD_vidWriteData+0xdc>
     ace:	9c 87       	std	Y+12, r25	; 0x0c
     ad0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ad2:	89 85       	ldd	r24, Y+9	; 0x09
     ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	9a 87       	std	Y+10, r25	; 0x0a
     ada:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     adc:	89 85       	ldd	r24, Y+9	; 0x09
     ade:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae0:	89 2b       	or	r24, r25
     ae2:	69 f7       	brne	.-38     	; 0xabe <LCD_vidWriteData+0xd0>
     ae4:	14 c0       	rjmp	.+40     	; 0xb0e <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ae6:	6d 81       	ldd	r22, Y+5	; 0x05
     ae8:	7e 81       	ldd	r23, Y+6	; 0x06
     aea:	8f 81       	ldd	r24, Y+7	; 0x07
     aec:	98 85       	ldd	r25, Y+8	; 0x08
     aee:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	9a 87       	std	Y+10, r25	; 0x0a
     af8:	89 87       	std	Y+9, r24	; 0x09
     afa:	89 85       	ldd	r24, Y+9	; 0x09
     afc:	9a 85       	ldd	r25, Y+10	; 0x0a
     afe:	9e 87       	std	Y+14, r25	; 0x0e
     b00:	8d 87       	std	Y+13, r24	; 0x0d
     b02:	8d 85       	ldd	r24, Y+13	; 0x0d
     b04:	9e 85       	ldd	r25, Y+14	; 0x0e
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	f1 f7       	brne	.-4      	; 0xb06 <LCD_vidWriteData+0x118>
     b0a:	9e 87       	std	Y+14, r25	; 0x0e
     b0c:	8d 87       	std	Y+13, r24	; 0x0d
	/* delay 5 ms */
	_delay_ms(5);
	/* Rest Enable */
	DIO_vidSetPinValue(LCD_ENPORT,LCD_ENPIN,LOW);
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	62 e0       	ldi	r22, 0x02	; 2
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
}
     b18:	00 00       	nop
     b1a:	2f 96       	adiw	r28, 0x0f	; 15
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <LCD_vidWriteCommund>:

void LCD_vidWriteCommund(u8 u8Commuand)
{
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	2f 97       	sbiw	r28, 0x0f	; 15
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	8f 87       	std	Y+15, r24	; 0x0f
	/* Reset RS*/
	DIO_vidSetPinValue(LCD_RSPORT,LCD_RSPIN,LOW);
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
	/* Rest R/W*/
	DIO_vidSetPinValue(LCD_RWPORT,LCD_RWPIN,LOW);
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
	/* Command->data lines*/
	DIO_vidSetPORTValue(LCD_DATAPORT,u8Commuand) ;
     b56:	6f 85       	ldd	r22, Y+15	; 0x0f
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIO_vidSetPORTValue>
	/* Set Enable */
	DIO_vidSetPinValue(LCD_ENPORT,LCD_ENPIN,HIGH);
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	62 e0       	ldi	r22, 0x02	; 2
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 ea       	ldi	r26, 0xA0	; 160
     b6e:	b0 e4       	ldi	r27, 0x40	; 64
     b70:	89 83       	std	Y+1, r24	; 0x01
     b72:	9a 83       	std	Y+2, r25	; 0x02
     b74:	ab 83       	std	Y+3, r26	; 0x03
     b76:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e8       	ldi	r19, 0x80	; 128
     b7c:	4b e3       	ldi	r20, 0x3B	; 59
     b7e:	55 e4       	ldi	r21, 0x45	; 69
     b80:	69 81       	ldd	r22, Y+1	; 0x01
     b82:	7a 81       	ldd	r23, Y+2	; 0x02
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	9c 81       	ldd	r25, Y+4	; 0x04
     b88:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	8d 83       	std	Y+5, r24	; 0x05
     b92:	9e 83       	std	Y+6, r25	; 0x06
     b94:	af 83       	std	Y+7, r26	; 0x07
     b96:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	40 e8       	ldi	r20, 0x80	; 128
     b9e:	5f e3       	ldi	r21, 0x3F	; 63
     ba0:	6d 81       	ldd	r22, Y+5	; 0x05
     ba2:	7e 81       	ldd	r23, Y+6	; 0x06
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	0e 94 3c 09 	call	0x1278	; 0x1278 <__cmpsf2>
     bac:	88 23       	and	r24, r24
     bae:	2c f4       	brge	.+10     	; 0xbba <LCD_vidWriteCommund+0x8e>
		__ticks = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	9a 87       	std	Y+10, r25	; 0x0a
     bb6:	89 87       	std	Y+9, r24	; 0x09
     bb8:	3f c0       	rjmp	.+126    	; 0xc38 <LCD_vidWriteCommund+0x10c>
	else if (__tmp > 65535)
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	3f ef       	ldi	r19, 0xFF	; 255
     bbe:	4f e7       	ldi	r20, 0x7F	; 127
     bc0:	57 e4       	ldi	r21, 0x47	; 71
     bc2:	6d 81       	ldd	r22, Y+5	; 0x05
     bc4:	7e 81       	ldd	r23, Y+6	; 0x06
     bc6:	8f 81       	ldd	r24, Y+7	; 0x07
     bc8:	98 85       	ldd	r25, Y+8	; 0x08
     bca:	0e 94 bd 09 	call	0x137a	; 0x137a <__gesf2>
     bce:	18 16       	cp	r1, r24
     bd0:	4c f5       	brge	.+82     	; 0xc24 <LCD_vidWriteCommund+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e2       	ldi	r20, 0x20	; 32
     bd8:	51 e4       	ldi	r21, 0x41	; 65
     bda:	69 81       	ldd	r22, Y+1	; 0x01
     bdc:	7a 81       	ldd	r23, Y+2	; 0x02
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	bc 01       	movw	r22, r24
     bec:	cd 01       	movw	r24, r26
     bee:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	9a 87       	std	Y+10, r25	; 0x0a
     bf8:	89 87       	std	Y+9, r24	; 0x09
     bfa:	0f c0       	rjmp	.+30     	; 0xc1a <LCD_vidWriteCommund+0xee>
     bfc:	8c e2       	ldi	r24, 0x2C	; 44
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	9c 87       	std	Y+12, r25	; 0x0c
     c02:	8b 87       	std	Y+11, r24	; 0x0b
     c04:	8b 85       	ldd	r24, Y+11	; 0x0b
     c06:	9c 85       	ldd	r25, Y+12	; 0x0c
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <LCD_vidWriteCommund+0xdc>
     c0c:	9c 87       	std	Y+12, r25	; 0x0c
     c0e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c10:	89 85       	ldd	r24, Y+9	; 0x09
     c12:	9a 85       	ldd	r25, Y+10	; 0x0a
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	9a 87       	std	Y+10, r25	; 0x0a
     c18:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1e:	89 2b       	or	r24, r25
     c20:	69 f7       	brne	.-38     	; 0xbfc <LCD_vidWriteCommund+0xd0>
     c22:	14 c0       	rjmp	.+40     	; 0xc4c <LCD_vidWriteCommund+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c24:	6d 81       	ldd	r22, Y+5	; 0x05
     c26:	7e 81       	ldd	r23, Y+6	; 0x06
     c28:	8f 81       	ldd	r24, Y+7	; 0x07
     c2a:	98 85       	ldd	r25, Y+8	; 0x08
     c2c:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	9a 87       	std	Y+10, r25	; 0x0a
     c36:	89 87       	std	Y+9, r24	; 0x09
     c38:	89 85       	ldd	r24, Y+9	; 0x09
     c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3c:	9e 87       	std	Y+14, r25	; 0x0e
     c3e:	8d 87       	std	Y+13, r24	; 0x0d
     c40:	8d 85       	ldd	r24, Y+13	; 0x0d
     c42:	9e 85       	ldd	r25, Y+14	; 0x0e
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <LCD_vidWriteCommund+0x118>
     c48:	9e 87       	std	Y+14, r25	; 0x0e
     c4a:	8d 87       	std	Y+13, r24	; 0x0d
	//delay 5 ms
	_delay_ms(5);
	/* Reset Enable */
	DIO_vidSetPinValue(LCD_ENPORT,LCD_ENPIN,LOW);
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	62 e0       	ldi	r22, 0x02	; 2
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	0e 94 99 01 	call	0x332	; 0x332 <DIO_vidSetPinValue>
}
     c56:	00 00       	nop
     c58:	2f 96       	adiw	r28, 0x0f	; 15
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <LCD_vidInitialize>:

void LCD_vidInitialize(void)
{
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	e8 97       	sbiw	r28, 0x38	; 56
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
	/* Set RS Direction output */
	DIO_vidSetPinDirection(LCD_RSPORT,LCD_RSPIN,OUTPUT);
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_vidSetPinDirection>
	/* set Enable Direction output */
	DIO_vidSetPinDirection(LCD_ENPORT,LCD_ENPIN,OUTPUT);
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	62 e0       	ldi	r22, 0x02	; 2
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_vidSetPinDirection>
	/* set R/W Direction output*/
	DIO_vidSetPinDirection(LCD_RWPORT,LCD_RWPIN,OUTPUT);
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_vidSetPinDirection>
	/* Set Data Direction output */
	DIO_vidSetPortDirection(LCD_DATAPORT,FULL_OUTPUT);
     c9c:	6f ef       	ldi	r22, 0xFF	; 255
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vidSetPortDirection>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	a8 e4       	ldi	r26, 0x48	; 72
     caa:	b2 e4       	ldi	r27, 0x42	; 66
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	9a 83       	std	Y+2, r25	; 0x02
     cb0:	ab 83       	std	Y+3, r26	; 0x03
     cb2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e8       	ldi	r19, 0x80	; 128
     cb8:	4b e3       	ldi	r20, 0x3B	; 59
     cba:	55 e4       	ldi	r21, 0x45	; 69
     cbc:	69 81       	ldd	r22, Y+1	; 0x01
     cbe:	7a 81       	ldd	r23, Y+2	; 0x02
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	8f a7       	std	Y+47, r24	; 0x2f
     cce:	98 ab       	std	Y+48, r25	; 0x30
     cd0:	a9 ab       	std	Y+49, r26	; 0x31
     cd2:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e8       	ldi	r20, 0x80	; 128
     cda:	5f e3       	ldi	r21, 0x3F	; 63
     cdc:	6f a5       	ldd	r22, Y+47	; 0x2f
     cde:	78 a9       	ldd	r23, Y+48	; 0x30
     ce0:	89 a9       	ldd	r24, Y+49	; 0x31
     ce2:	9a a9       	ldd	r25, Y+50	; 0x32
     ce4:	0e 94 3c 09 	call	0x1278	; 0x1278 <__cmpsf2>
     ce8:	88 23       	and	r24, r24
     cea:	2c f4       	brge	.+10     	; 0xcf6 <LCD_vidInitialize+0x8c>
		__ticks = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9c ab       	std	Y+52, r25	; 0x34
     cf2:	8b ab       	std	Y+51, r24	; 0x33
     cf4:	3f c0       	rjmp	.+126    	; 0xd74 <LCD_vidInitialize+0x10a>
	else if (__tmp > 65535)
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	4f e7       	ldi	r20, 0x7F	; 127
     cfc:	57 e4       	ldi	r21, 0x47	; 71
     cfe:	6f a5       	ldd	r22, Y+47	; 0x2f
     d00:	78 a9       	ldd	r23, Y+48	; 0x30
     d02:	89 a9       	ldd	r24, Y+49	; 0x31
     d04:	9a a9       	ldd	r25, Y+50	; 0x32
     d06:	0e 94 bd 09 	call	0x137a	; 0x137a <__gesf2>
     d0a:	18 16       	cp	r1, r24
     d0c:	4c f5       	brge	.+82     	; 0xd60 <LCD_vidInitialize+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e2       	ldi	r20, 0x20	; 32
     d14:	51 e4       	ldi	r21, 0x41	; 65
     d16:	69 81       	ldd	r22, Y+1	; 0x01
     d18:	7a 81       	ldd	r23, Y+2	; 0x02
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	bc 01       	movw	r22, r24
     d28:	cd 01       	movw	r24, r26
     d2a:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	9c ab       	std	Y+52, r25	; 0x34
     d34:	8b ab       	std	Y+51, r24	; 0x33
     d36:	0f c0       	rjmp	.+30     	; 0xd56 <LCD_vidInitialize+0xec>
     d38:	8c e2       	ldi	r24, 0x2C	; 44
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	9e ab       	std	Y+54, r25	; 0x36
     d3e:	8d ab       	std	Y+53, r24	; 0x35
     d40:	8d a9       	ldd	r24, Y+53	; 0x35
     d42:	9e a9       	ldd	r25, Y+54	; 0x36
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <LCD_vidInitialize+0xda>
     d48:	9e ab       	std	Y+54, r25	; 0x36
     d4a:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4c:	8b a9       	ldd	r24, Y+51	; 0x33
     d4e:	9c a9       	ldd	r25, Y+52	; 0x34
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	9c ab       	std	Y+52, r25	; 0x34
     d54:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d56:	8b a9       	ldd	r24, Y+51	; 0x33
     d58:	9c a9       	ldd	r25, Y+52	; 0x34
     d5a:	89 2b       	or	r24, r25
     d5c:	69 f7       	brne	.-38     	; 0xd38 <LCD_vidInitialize+0xce>
     d5e:	14 c0       	rjmp	.+40     	; 0xd88 <LCD_vidInitialize+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d60:	6f a5       	ldd	r22, Y+47	; 0x2f
     d62:	78 a9       	ldd	r23, Y+48	; 0x30
     d64:	89 a9       	ldd	r24, Y+49	; 0x31
     d66:	9a a9       	ldd	r25, Y+50	; 0x32
     d68:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9c ab       	std	Y+52, r25	; 0x34
     d72:	8b ab       	std	Y+51, r24	; 0x33
     d74:	8b a9       	ldd	r24, Y+51	; 0x33
     d76:	9c a9       	ldd	r25, Y+52	; 0x34
     d78:	98 af       	std	Y+56, r25	; 0x38
     d7a:	8f ab       	std	Y+55, r24	; 0x37
     d7c:	8f a9       	ldd	r24, Y+55	; 0x37
     d7e:	98 ad       	ldd	r25, Y+56	; 0x38
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <LCD_vidInitialize+0x116>
     d84:	98 af       	std	Y+56, r25	; 0x38
     d86:	8f ab       	std	Y+55, r24	; 0x37
	//delay 50ms
	_delay_ms(50);
	/*(0b0 0 1 DL n f x x) DL=1>8bit mode, n=1>2lines , f=0>5*8pixcel */
	LCD_vidWriteCommund(0b00111000);
     d88:	88 e3       	ldi	r24, 0x38	; 56
     d8a:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_vidWriteCommund>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	a0 e0       	ldi	r26, 0x00	; 0
     d94:	b0 e4       	ldi	r27, 0x40	; 64
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	af 83       	std	Y+7, r26	; 0x07
     d9c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e8       	ldi	r19, 0x80	; 128
     da2:	4b e3       	ldi	r20, 0x3B	; 59
     da4:	55 e4       	ldi	r21, 0x45	; 69
     da6:	6d 81       	ldd	r22, Y+5	; 0x05
     da8:	7e 81       	ldd	r23, Y+6	; 0x06
     daa:	8f 81       	ldd	r24, Y+7	; 0x07
     dac:	98 85       	ldd	r25, Y+8	; 0x08
     dae:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	8d a3       	std	Y+37, r24	; 0x25
     db8:	9e a3       	std	Y+38, r25	; 0x26
     dba:	af a3       	std	Y+39, r26	; 0x27
     dbc:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e8       	ldi	r20, 0x80	; 128
     dc4:	5f e3       	ldi	r21, 0x3F	; 63
     dc6:	6d a1       	ldd	r22, Y+37	; 0x25
     dc8:	7e a1       	ldd	r23, Y+38	; 0x26
     dca:	8f a1       	ldd	r24, Y+39	; 0x27
     dcc:	98 a5       	ldd	r25, Y+40	; 0x28
     dce:	0e 94 3c 09 	call	0x1278	; 0x1278 <__cmpsf2>
     dd2:	88 23       	and	r24, r24
     dd4:	2c f4       	brge	.+10     	; 0xde0 <LCD_vidInitialize+0x176>
		__ticks = 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	9a a7       	std	Y+42, r25	; 0x2a
     ddc:	89 a7       	std	Y+41, r24	; 0x29
     dde:	3f c0       	rjmp	.+126    	; 0xe5e <LCD_vidInitialize+0x1f4>
	else if (__tmp > 65535)
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	3f ef       	ldi	r19, 0xFF	; 255
     de4:	4f e7       	ldi	r20, 0x7F	; 127
     de6:	57 e4       	ldi	r21, 0x47	; 71
     de8:	6d a1       	ldd	r22, Y+37	; 0x25
     dea:	7e a1       	ldd	r23, Y+38	; 0x26
     dec:	8f a1       	ldd	r24, Y+39	; 0x27
     dee:	98 a5       	ldd	r25, Y+40	; 0x28
     df0:	0e 94 bd 09 	call	0x137a	; 0x137a <__gesf2>
     df4:	18 16       	cp	r1, r24
     df6:	4c f5       	brge	.+82     	; 0xe4a <LCD_vidInitialize+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e2       	ldi	r20, 0x20	; 32
     dfe:	51 e4       	ldi	r21, 0x41	; 65
     e00:	6d 81       	ldd	r22, Y+5	; 0x05
     e02:	7e 81       	ldd	r23, Y+6	; 0x06
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
     e06:	98 85       	ldd	r25, Y+8	; 0x08
     e08:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	bc 01       	movw	r22, r24
     e12:	cd 01       	movw	r24, r26
     e14:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	9a a7       	std	Y+42, r25	; 0x2a
     e1e:	89 a7       	std	Y+41, r24	; 0x29
     e20:	0f c0       	rjmp	.+30     	; 0xe40 <LCD_vidInitialize+0x1d6>
     e22:	8c e2       	ldi	r24, 0x2C	; 44
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	9c a7       	std	Y+44, r25	; 0x2c
     e28:	8b a7       	std	Y+43, r24	; 0x2b
     e2a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e2c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <LCD_vidInitialize+0x1c4>
     e32:	9c a7       	std	Y+44, r25	; 0x2c
     e34:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e36:	89 a5       	ldd	r24, Y+41	; 0x29
     e38:	9a a5       	ldd	r25, Y+42	; 0x2a
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	9a a7       	std	Y+42, r25	; 0x2a
     e3e:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e40:	89 a5       	ldd	r24, Y+41	; 0x29
     e42:	9a a5       	ldd	r25, Y+42	; 0x2a
     e44:	89 2b       	or	r24, r25
     e46:	69 f7       	brne	.-38     	; 0xe22 <LCD_vidInitialize+0x1b8>
     e48:	14 c0       	rjmp	.+40     	; 0xe72 <LCD_vidInitialize+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4a:	6d a1       	ldd	r22, Y+37	; 0x25
     e4c:	7e a1       	ldd	r23, Y+38	; 0x26
     e4e:	8f a1       	ldd	r24, Y+39	; 0x27
     e50:	98 a5       	ldd	r25, Y+40	; 0x28
     e52:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	9a a7       	std	Y+42, r25	; 0x2a
     e5c:	89 a7       	std	Y+41, r24	; 0x29
     e5e:	89 a5       	ldd	r24, Y+41	; 0x29
     e60:	9a a5       	ldd	r25, Y+42	; 0x2a
     e62:	9e a7       	std	Y+46, r25	; 0x2e
     e64:	8d a7       	std	Y+45, r24	; 0x2d
     e66:	8d a5       	ldd	r24, Y+45	; 0x2d
     e68:	9e a5       	ldd	r25, Y+46	; 0x2e
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <LCD_vidInitialize+0x200>
     e6e:	9e a7       	std	Y+46, r25	; 0x2e
     e70:	8d a7       	std	Y+45, r24	; 0x2d
	//delay 2ms
	_delay_ms(2);
	//(00001DCB)Display on,cursor on,cursor blinking off
	LCD_vidWriteCommund(0b00001110);
     e72:	8e e0       	ldi	r24, 0x0E	; 14
     e74:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_vidWriteCommund>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a0 e0       	ldi	r26, 0x00	; 0
     e7e:	b0 e4       	ldi	r27, 0x40	; 64
     e80:	89 87       	std	Y+9, r24	; 0x09
     e82:	9a 87       	std	Y+10, r25	; 0x0a
     e84:	ab 87       	std	Y+11, r26	; 0x0b
     e86:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e8       	ldi	r19, 0x80	; 128
     e8c:	4b e3       	ldi	r20, 0x3B	; 59
     e8e:	55 e4       	ldi	r21, 0x45	; 69
     e90:	69 85       	ldd	r22, Y+9	; 0x09
     e92:	7a 85       	ldd	r23, Y+10	; 0x0a
     e94:	8b 85       	ldd	r24, Y+11	; 0x0b
     e96:	9c 85       	ldd	r25, Y+12	; 0x0c
     e98:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	8b 8f       	std	Y+27, r24	; 0x1b
     ea2:	9c 8f       	std	Y+28, r25	; 0x1c
     ea4:	ad 8f       	std	Y+29, r26	; 0x1d
     ea6:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e8       	ldi	r20, 0x80	; 128
     eae:	5f e3       	ldi	r21, 0x3F	; 63
     eb0:	6b 8d       	ldd	r22, Y+27	; 0x1b
     eb2:	7c 8d       	ldd	r23, Y+28	; 0x1c
     eb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eb8:	0e 94 3c 09 	call	0x1278	; 0x1278 <__cmpsf2>
     ebc:	88 23       	and	r24, r24
     ebe:	2c f4       	brge	.+10     	; 0xeca <LCD_vidInitialize+0x260>
		__ticks = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	98 a3       	std	Y+32, r25	; 0x20
     ec6:	8f 8f       	std	Y+31, r24	; 0x1f
     ec8:	3f c0       	rjmp	.+126    	; 0xf48 <LCD_vidInitialize+0x2de>
	else if (__tmp > 65535)
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	3f ef       	ldi	r19, 0xFF	; 255
     ece:	4f e7       	ldi	r20, 0x7F	; 127
     ed0:	57 e4       	ldi	r21, 0x47	; 71
     ed2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     ed4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ed6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eda:	0e 94 bd 09 	call	0x137a	; 0x137a <__gesf2>
     ede:	18 16       	cp	r1, r24
     ee0:	4c f5       	brge	.+82     	; 0xf34 <LCD_vidInitialize+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e2       	ldi	r20, 0x20	; 32
     ee8:	51 e4       	ldi	r21, 0x41	; 65
     eea:	69 85       	ldd	r22, Y+9	; 0x09
     eec:	7a 85       	ldd	r23, Y+10	; 0x0a
     eee:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef2:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	bc 01       	movw	r22, r24
     efc:	cd 01       	movw	r24, r26
     efe:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	98 a3       	std	Y+32, r25	; 0x20
     f08:	8f 8f       	std	Y+31, r24	; 0x1f
     f0a:	0f c0       	rjmp	.+30     	; 0xf2a <LCD_vidInitialize+0x2c0>
     f0c:	8c e2       	ldi	r24, 0x2C	; 44
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	9a a3       	std	Y+34, r25	; 0x22
     f12:	89 a3       	std	Y+33, r24	; 0x21
     f14:	89 a1       	ldd	r24, Y+33	; 0x21
     f16:	9a a1       	ldd	r25, Y+34	; 0x22
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <LCD_vidInitialize+0x2ae>
     f1c:	9a a3       	std	Y+34, r25	; 0x22
     f1e:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f20:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f22:	98 a1       	ldd	r25, Y+32	; 0x20
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	98 a3       	std	Y+32, r25	; 0x20
     f28:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f2c:	98 a1       	ldd	r25, Y+32	; 0x20
     f2e:	89 2b       	or	r24, r25
     f30:	69 f7       	brne	.-38     	; 0xf0c <LCD_vidInitialize+0x2a2>
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <LCD_vidInitialize+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f34:	6b 8d       	ldd	r22, Y+27	; 0x1b
     f36:	7c 8d       	ldd	r23, Y+28	; 0x1c
     f38:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f3c:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	98 a3       	std	Y+32, r25	; 0x20
     f46:	8f 8f       	std	Y+31, r24	; 0x1f
     f48:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f4a:	98 a1       	ldd	r25, Y+32	; 0x20
     f4c:	9c a3       	std	Y+36, r25	; 0x24
     f4e:	8b a3       	std	Y+35, r24	; 0x23
     f50:	8b a1       	ldd	r24, Y+35	; 0x23
     f52:	9c a1       	ldd	r25, Y+36	; 0x24
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <LCD_vidInitialize+0x2ea>
     f58:	9c a3       	std	Y+36, r25	; 0x24
     f5a:	8b a3       	std	Y+35, r24	; 0x23
	//delay 2ms
	_delay_ms(2);
	//Clear command
	LCD_vidWriteCommund(0b00000001);
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_vidWriteCommund>
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a8 e4       	ldi	r26, 0x48	; 72
     f68:	b2 e4       	ldi	r27, 0x42	; 66
     f6a:	8d 87       	std	Y+13, r24	; 0x0d
     f6c:	9e 87       	std	Y+14, r25	; 0x0e
     f6e:	af 87       	std	Y+15, r26	; 0x0f
     f70:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e8       	ldi	r19, 0x80	; 128
     f76:	4b e3       	ldi	r20, 0x3B	; 59
     f78:	55 e4       	ldi	r21, 0x45	; 69
     f7a:	6d 85       	ldd	r22, Y+13	; 0x0d
     f7c:	7e 85       	ldd	r23, Y+14	; 0x0e
     f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f80:	98 89       	ldd	r25, Y+16	; 0x10
     f82:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	89 8b       	std	Y+17, r24	; 0x11
     f8c:	9a 8b       	std	Y+18, r25	; 0x12
     f8e:	ab 8b       	std	Y+19, r26	; 0x13
     f90:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e8       	ldi	r20, 0x80	; 128
     f98:	5f e3       	ldi	r21, 0x3F	; 63
     f9a:	69 89       	ldd	r22, Y+17	; 0x11
     f9c:	7a 89       	ldd	r23, Y+18	; 0x12
     f9e:	8b 89       	ldd	r24, Y+19	; 0x13
     fa0:	9c 89       	ldd	r25, Y+20	; 0x14
     fa2:	0e 94 3c 09 	call	0x1278	; 0x1278 <__cmpsf2>
     fa6:	88 23       	and	r24, r24
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <LCD_vidInitialize+0x34a>
		__ticks = 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9e 8b       	std	Y+22, r25	; 0x16
     fb0:	8d 8b       	std	Y+21, r24	; 0x15
     fb2:	3f c0       	rjmp	.+126    	; 0x1032 <LCD_vidInitialize+0x3c8>
	else if (__tmp > 65535)
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	3f ef       	ldi	r19, 0xFF	; 255
     fb8:	4f e7       	ldi	r20, 0x7F	; 127
     fba:	57 e4       	ldi	r21, 0x47	; 71
     fbc:	69 89       	ldd	r22, Y+17	; 0x11
     fbe:	7a 89       	ldd	r23, Y+18	; 0x12
     fc0:	8b 89       	ldd	r24, Y+19	; 0x13
     fc2:	9c 89       	ldd	r25, Y+20	; 0x14
     fc4:	0e 94 bd 09 	call	0x137a	; 0x137a <__gesf2>
     fc8:	18 16       	cp	r1, r24
     fca:	4c f5       	brge	.+82     	; 0x101e <LCD_vidInitialize+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e2       	ldi	r20, 0x20	; 32
     fd2:	51 e4       	ldi	r21, 0x41	; 65
     fd4:	6d 85       	ldd	r22, Y+13	; 0x0d
     fd6:	7e 85       	ldd	r23, Y+14	; 0x0e
     fd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fda:	98 89       	ldd	r25, Y+16	; 0x10
     fdc:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	bc 01       	movw	r22, r24
     fe6:	cd 01       	movw	r24, r26
     fe8:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	9e 8b       	std	Y+22, r25	; 0x16
     ff2:	8d 8b       	std	Y+21, r24	; 0x15
     ff4:	0f c0       	rjmp	.+30     	; 0x1014 <LCD_vidInitialize+0x3aa>
     ff6:	8c e2       	ldi	r24, 0x2C	; 44
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	98 8f       	std	Y+24, r25	; 0x18
     ffc:	8f 8b       	std	Y+23, r24	; 0x17
     ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    1000:	98 8d       	ldd	r25, Y+24	; 0x18
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <LCD_vidInitialize+0x398>
    1006:	98 8f       	std	Y+24, r25	; 0x18
    1008:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100a:	8d 89       	ldd	r24, Y+21	; 0x15
    100c:	9e 89       	ldd	r25, Y+22	; 0x16
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	9e 8b       	std	Y+22, r25	; 0x16
    1012:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1014:	8d 89       	ldd	r24, Y+21	; 0x15
    1016:	9e 89       	ldd	r25, Y+22	; 0x16
    1018:	89 2b       	or	r24, r25
    101a:	69 f7       	brne	.-38     	; 0xff6 <LCD_vidInitialize+0x38c>
	//delay 2ms
	_delay_ms(50);

}
    101c:	14 c0       	rjmp	.+40     	; 0x1046 <LCD_vidInitialize+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101e:	69 89       	ldd	r22, Y+17	; 0x11
    1020:	7a 89       	ldd	r23, Y+18	; 0x12
    1022:	8b 89       	ldd	r24, Y+19	; 0x13
    1024:	9c 89       	ldd	r25, Y+20	; 0x14
    1026:	0e 94 41 09 	call	0x1282	; 0x1282 <__fixunssfsi>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	9e 8b       	std	Y+22, r25	; 0x16
    1030:	8d 8b       	std	Y+21, r24	; 0x15
    1032:	8d 89       	ldd	r24, Y+21	; 0x15
    1034:	9e 89       	ldd	r25, Y+22	; 0x16
    1036:	9a 8f       	std	Y+26, r25	; 0x1a
    1038:	89 8f       	std	Y+25, r24	; 0x19
    103a:	89 8d       	ldd	r24, Y+25	; 0x19
    103c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <LCD_vidInitialize+0x3d4>
    1042:	9a 8f       	std	Y+26, r25	; 0x1a
    1044:	89 8f       	std	Y+25, r24	; 0x19
    1046:	00 00       	nop
    1048:	e8 96       	adiw	r28, 0x38	; 56
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <LCD_vidWriteDatgotoaxy>:
void LCD_vidWriteDatgotoaxy(u8  u8x,u8 u8y)
{
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	00 d0       	rcall	.+0      	; 0x1060 <LCD_vidWriteDatgotoaxy+0x6>
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	6a 83       	std	Y+2, r22	; 0x02
	//0 means first row
	if(u8x==0)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	88 23       	and	r24, r24
    106c:	21 f4       	brne	.+8      	; 0x1076 <LCD_vidWriteDatgotoaxy+0x1c>
	{
		//(1Adress)changeDDRAM to address
		LCD_vidWriteCommund((128+u8y));
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	80 58       	subi	r24, 0x80	; 128
    1072:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_vidWriteCommund>
	}
	if(u8x==1)
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	21 f4       	brne	.+8      	; 0x1084 <LCD_vidWriteDatgotoaxy+0x2a>
	{
		//second start from address 0x40(64)
		LCD_vidWriteCommund((128+64+u8y));
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	80 54       	subi	r24, 0x40	; 64
    1080:	0e 94 96 05 	call	0xb2c	; 0xb2c <LCD_vidWriteCommund>
	}
}
    1084:	00 00       	nop
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <LCD_vidWriteString>:

void LCD_vidWriteString(u8  const*  pu8arr,u8 u8charnum)
{
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	00 d0       	rcall	.+0      	; 0x1096 <LCD_vidWriteString+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <LCD_vidWriteString+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9b 83       	std	Y+3, r25	; 0x03
    109e:	8a 83       	std	Y+2, r24	; 0x02
    10a0:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for(i=0;i<u8charnum;i++){
    10a2:	19 82       	std	Y+1, r1	; 0x01
    10a4:	0e c0       	rjmp	.+28     	; 0x10c2 <LCD_vidWriteString+0x32>
		LCD_vidWriteData(pu8arr[i]);
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	2a 81       	ldd	r18, Y+2	; 0x02
    10ae:	3b 81       	ldd	r19, Y+3	; 0x03
    10b0:	82 0f       	add	r24, r18
    10b2:	93 1f       	adc	r25, r19
    10b4:	fc 01       	movw	r30, r24
    10b6:	80 81       	ld	r24, Z
    10b8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <LCD_vidWriteData>
}

void LCD_vidWriteString(u8  const*  pu8arr,u8 u8charnum)
{
	u8 i;
	for(i=0;i<u8charnum;i++){
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	99 81       	ldd	r25, Y+1	; 0x01
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	98 17       	cp	r25, r24
    10c8:	70 f3       	brcs	.-36     	; 0x10a6 <LCD_vidWriteString+0x16>
		LCD_vidWriteData(pu8arr[i]);
	}

}
    10ca:	00 00       	nop
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <LCD_vidWriteNumber>:

void LCD_vidWriteNumber(s16 s16num){
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	27 97       	sbiw	r28, 0x07	; 7
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	9f 83       	std	Y+7, r25	; 0x07
    10f0:	8e 83       	std	Y+6, r24	; 0x06
	u16 u16m=1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
	s16 i;
	u8 u8Digit;
	if(s16num<0)
    10fa:	8e 81       	ldd	r24, Y+6	; 0x06
    10fc:	9f 81       	ldd	r25, Y+7	; 0x07
    10fe:	99 23       	and	r25, r25
    1100:	c4 f4       	brge	.+48     	; 0x1132 <LCD_vidWriteNumber+0x58>
	{
		LCD_vidWriteData('-');
    1102:	8d e2       	ldi	r24, 0x2D	; 45
    1104:	0e 94 f7 04 	call	0x9ee	; 0x9ee <LCD_vidWriteData>
		s16num=-s16num;
    1108:	8e 81       	ldd	r24, Y+6	; 0x06
    110a:	9f 81       	ldd	r25, Y+7	; 0x07
    110c:	91 95       	neg	r25
    110e:	81 95       	neg	r24
    1110:	91 09       	sbc	r25, r1
    1112:	9f 83       	std	Y+7, r25	; 0x07
    1114:	8e 83       	std	Y+6, r24	; 0x06
	}
	while(s16num/u16m >=10){
    1116:	0d c0       	rjmp	.+26     	; 0x1132 <LCD_vidWriteNumber+0x58>
		u16m*=10;
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	9c 01       	movw	r18, r24
    1122:	22 0f       	add	r18, r18
    1124:	33 1f       	adc	r19, r19
    1126:	22 0f       	add	r18, r18
    1128:	33 1f       	adc	r19, r19
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	89 83       	std	Y+1, r24	; 0x01
	if(s16num<0)
	{
		LCD_vidWriteData('-');
		s16num=-s16num;
	}
	while(s16num/u16m >=10){
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	9f 81       	ldd	r25, Y+7	; 0x07
    1136:	29 81       	ldd	r18, Y+1	; 0x01
    1138:	3a 81       	ldd	r19, Y+2	; 0x02
    113a:	b9 01       	movw	r22, r18
    113c:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodhi4>
    1140:	cb 01       	movw	r24, r22
    1142:	0a 97       	sbiw	r24, 0x0a	; 10
    1144:	48 f7       	brcc	.-46     	; 0x1118 <LCD_vidWriteNumber+0x3e>
		u16m*=10;
	}
	for(i=u16m;i>=1;i/=10){
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	9a 81       	ldd	r25, Y+2	; 0x02
    114a:	9c 83       	std	Y+4, r25	; 0x04
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	1c c0       	rjmp	.+56     	; 0x1188 <LCD_vidWriteNumber+0xae>
		u8Digit=(s16num/i)%10;
    1150:	8e 81       	ldd	r24, Y+6	; 0x06
    1152:	9f 81       	ldd	r25, Y+7	; 0x07
    1154:	2b 81       	ldd	r18, Y+3	; 0x03
    1156:	3c 81       	ldd	r19, Y+4	; 0x04
    1158:	b9 01       	movw	r22, r18
    115a:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
    115e:	cb 01       	movw	r24, r22
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	b9 01       	movw	r22, r18
    1166:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
    116a:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vidWriteData(u8Digit+'0');
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	80 5d       	subi	r24, 0xD0	; 208
    1170:	0e 94 f7 04 	call	0x9ee	; 0x9ee <LCD_vidWriteData>
		s16num=-s16num;
	}
	while(s16num/u16m >=10){
		u16m*=10;
	}
	for(i=u16m;i>=1;i/=10){
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	2a e0       	ldi	r18, 0x0A	; 10
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	b9 01       	movw	r22, r18
    117e:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
    1182:	cb 01       	movw	r24, r22
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	8b 83       	std	Y+3, r24	; 0x03
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	18 16       	cp	r1, r24
    118e:	19 06       	cpc	r1, r25
    1190:	fc f2       	brlt	.-66     	; 0x1150 <LCD_vidWriteNumber+0x76>
	LCD_vidWriteData(z+'0');
	}
	m=y-(z*10);
	LCD_vidWriteData(m+'0');
	 */
}
    1192:	00 00       	nop
    1194:	27 96       	adiw	r28, 0x07	; 7
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	08 95       	ret

000011a6 <main>:
#include "DIO_Int.h"
#include "KEYPAD_Int.h"
#include "LCD_Int.h"
#include <util/delay.h>
int main(void)
{
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	64 97       	sbiw	r28, 0x14	; 20
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
	u8 u8read;
	u8 u8readstatus;

	//initialization
	KEYPAD_vidInitialize();
    11ba:	0e 94 87 03 	call	0x70e	; 0x70e <KEYPAD_vidInitialize>
	LCD_vidInitialize();
    11be:	0e 94 35 06 	call	0xc6a	; 0xc6a <LCD_vidInitialize>
	//LCD_vidWriteData('A');
	u8 arr[16];
	u8 i=0;
    11c2:	19 82       	std	Y+1, r1	; 0x01
	u8 res=0;
    11c4:	1a 82       	std	Y+2, r1	; 0x02
	while(1)
	{
		u8readstatus=KEYPAD_vidRead(&u8read);
    11c6:	ce 01       	movw	r24, r28
    11c8:	04 96       	adiw	r24, 0x04	; 4
    11ca:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KEYPAD_vidRead>
    11ce:	8b 83       	std	Y+3, r24	; 0x03
		if(u8readstatus==KEYPAD_OK)
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	c1 f7       	brne	.-16     	; 0x11c6 <main+0x20>
		{
			LCD_vidWriteData(u8read);
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <LCD_vidWriteData>
			arr[i]=u8read;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	4c 81       	ldd	r20, Y+4	; 0x04
    11e4:	9e 01       	movw	r18, r28
    11e6:	2b 5f       	subi	r18, 0xFB	; 251
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	82 0f       	add	r24, r18
    11ec:	93 1f       	adc	r25, r19
    11ee:	fc 01       	movw	r30, r24
    11f0:	40 83       	st	Z, r20
			if(arr[i] == '=')
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9e 01       	movw	r18, r28
    11fa:	2b 5f       	subi	r18, 0xFB	; 251
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	82 0f       	add	r24, r18
    1200:	93 1f       	adc	r25, r19
    1202:	fc 01       	movw	r30, r24
    1204:	80 81       	ld	r24, Z
    1206:	8d 33       	cpi	r24, 0x3D	; 61
    1208:	59 f4       	brne	.+22     	; 0x1220 <main+0x7a>
			{
				res=arr[0]+arr[2];
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	8f 81       	ldd	r24, Y+7	; 0x07
    120e:	89 0f       	add	r24, r25
    1210:	8a 83       	std	Y+2, r24	; 0x02
				//LCD_vidWriteDatgotoaxy(1,0);
                 LCD_vidWriteNumber(res-96);
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	80 56       	subi	r24, 0x60	; 96
    121a:	91 09       	sbc	r25, r1
    121c:	0e 94 6d 08 	call	0x10da	; 0x10da <LCD_vidWriteNumber>
			}
			i++;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{

		}
	}
    1226:	cf cf       	rjmp	.-98     	; 0x11c6 <main+0x20>

00001228 <__udivmodhi4>:
    1228:	aa 1b       	sub	r26, r26
    122a:	bb 1b       	sub	r27, r27
    122c:	51 e1       	ldi	r21, 0x11	; 17
    122e:	07 c0       	rjmp	.+14     	; 0x123e <__udivmodhi4_ep>

00001230 <__udivmodhi4_loop>:
    1230:	aa 1f       	adc	r26, r26
    1232:	bb 1f       	adc	r27, r27
    1234:	a6 17       	cp	r26, r22
    1236:	b7 07       	cpc	r27, r23
    1238:	10 f0       	brcs	.+4      	; 0x123e <__udivmodhi4_ep>
    123a:	a6 1b       	sub	r26, r22
    123c:	b7 0b       	sbc	r27, r23

0000123e <__udivmodhi4_ep>:
    123e:	88 1f       	adc	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	5a 95       	dec	r21
    1244:	a9 f7       	brne	.-22     	; 0x1230 <__udivmodhi4_loop>
    1246:	80 95       	com	r24
    1248:	90 95       	com	r25
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	08 95       	ret

00001250 <__divmodhi4>:
    1250:	97 fb       	bst	r25, 7
    1252:	07 2e       	mov	r0, r23
    1254:	16 f4       	brtc	.+4      	; 0x125a <__divmodhi4+0xa>
    1256:	00 94       	com	r0
    1258:	07 d0       	rcall	.+14     	; 0x1268 <__divmodhi4_neg1>
    125a:	77 fd       	sbrc	r23, 7
    125c:	09 d0       	rcall	.+18     	; 0x1270 <__divmodhi4_neg2>
    125e:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodhi4>
    1262:	07 fc       	sbrc	r0, 7
    1264:	05 d0       	rcall	.+10     	; 0x1270 <__divmodhi4_neg2>
    1266:	3e f4       	brtc	.+14     	; 0x1276 <__divmodhi4_exit>

00001268 <__divmodhi4_neg1>:
    1268:	90 95       	com	r25
    126a:	81 95       	neg	r24
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	08 95       	ret

00001270 <__divmodhi4_neg2>:
    1270:	70 95       	com	r23
    1272:	61 95       	neg	r22
    1274:	7f 4f       	sbci	r23, 0xFF	; 255

00001276 <__divmodhi4_exit>:
    1276:	08 95       	ret

00001278 <__cmpsf2>:
    1278:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_cmp>
    127c:	08 f4       	brcc	.+2      	; 0x1280 <__cmpsf2+0x8>
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	08 95       	ret

00001282 <__fixunssfsi>:
    1282:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_splitA>
    1286:	88 f0       	brcs	.+34     	; 0x12aa <__fixunssfsi+0x28>
    1288:	9f 57       	subi	r25, 0x7F	; 127
    128a:	98 f0       	brcs	.+38     	; 0x12b2 <__fixunssfsi+0x30>
    128c:	b9 2f       	mov	r27, r25
    128e:	99 27       	eor	r25, r25
    1290:	b7 51       	subi	r27, 0x17	; 23
    1292:	b0 f0       	brcs	.+44     	; 0x12c0 <__fixunssfsi+0x3e>
    1294:	e1 f0       	breq	.+56     	; 0x12ce <__fixunssfsi+0x4c>
    1296:	66 0f       	add	r22, r22
    1298:	77 1f       	adc	r23, r23
    129a:	88 1f       	adc	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	1a f0       	brmi	.+6      	; 0x12a6 <__fixunssfsi+0x24>
    12a0:	ba 95       	dec	r27
    12a2:	c9 f7       	brne	.-14     	; 0x1296 <__fixunssfsi+0x14>
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <__fixunssfsi+0x4c>
    12a6:	b1 30       	cpi	r27, 0x01	; 1
    12a8:	91 f0       	breq	.+36     	; 0x12ce <__fixunssfsi+0x4c>
    12aa:	0e 94 b6 09 	call	0x136c	; 0x136c <__fp_zero>
    12ae:	b1 e0       	ldi	r27, 0x01	; 1
    12b0:	08 95       	ret
    12b2:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_zero>
    12b6:	67 2f       	mov	r22, r23
    12b8:	78 2f       	mov	r23, r24
    12ba:	88 27       	eor	r24, r24
    12bc:	b8 5f       	subi	r27, 0xF8	; 248
    12be:	39 f0       	breq	.+14     	; 0x12ce <__fixunssfsi+0x4c>
    12c0:	b9 3f       	cpi	r27, 0xF9	; 249
    12c2:	cc f3       	brlt	.-14     	; 0x12b6 <__fixunssfsi+0x34>
    12c4:	86 95       	lsr	r24
    12c6:	77 95       	ror	r23
    12c8:	67 95       	ror	r22
    12ca:	b3 95       	inc	r27
    12cc:	d9 f7       	brne	.-10     	; 0x12c4 <__fixunssfsi+0x42>
    12ce:	3e f4       	brtc	.+14     	; 0x12de <__fixunssfsi+0x5c>
    12d0:	90 95       	com	r25
    12d2:	80 95       	com	r24
    12d4:	70 95       	com	r23
    12d6:	61 95       	neg	r22
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f 4f       	sbci	r24, 0xFF	; 255
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	08 95       	ret

000012e0 <__fp_cmp>:
    12e0:	99 0f       	add	r25, r25
    12e2:	00 08       	sbc	r0, r0
    12e4:	55 0f       	add	r21, r21
    12e6:	aa 0b       	sbc	r26, r26
    12e8:	e0 e8       	ldi	r30, 0x80	; 128
    12ea:	fe ef       	ldi	r31, 0xFE	; 254
    12ec:	16 16       	cp	r1, r22
    12ee:	17 06       	cpc	r1, r23
    12f0:	e8 07       	cpc	r30, r24
    12f2:	f9 07       	cpc	r31, r25
    12f4:	c0 f0       	brcs	.+48     	; 0x1326 <__fp_cmp+0x46>
    12f6:	12 16       	cp	r1, r18
    12f8:	13 06       	cpc	r1, r19
    12fa:	e4 07       	cpc	r30, r20
    12fc:	f5 07       	cpc	r31, r21
    12fe:	98 f0       	brcs	.+38     	; 0x1326 <__fp_cmp+0x46>
    1300:	62 1b       	sub	r22, r18
    1302:	73 0b       	sbc	r23, r19
    1304:	84 0b       	sbc	r24, r20
    1306:	95 0b       	sbc	r25, r21
    1308:	39 f4       	brne	.+14     	; 0x1318 <__fp_cmp+0x38>
    130a:	0a 26       	eor	r0, r26
    130c:	61 f0       	breq	.+24     	; 0x1326 <__fp_cmp+0x46>
    130e:	23 2b       	or	r18, r19
    1310:	24 2b       	or	r18, r20
    1312:	25 2b       	or	r18, r21
    1314:	21 f4       	brne	.+8      	; 0x131e <__fp_cmp+0x3e>
    1316:	08 95       	ret
    1318:	0a 26       	eor	r0, r26
    131a:	09 f4       	brne	.+2      	; 0x131e <__fp_cmp+0x3e>
    131c:	a1 40       	sbci	r26, 0x01	; 1
    131e:	a6 95       	lsr	r26
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	81 1d       	adc	r24, r1
    1324:	81 1d       	adc	r24, r1
    1326:	08 95       	ret

00001328 <__fp_split3>:
    1328:	57 fd       	sbrc	r21, 7
    132a:	90 58       	subi	r25, 0x80	; 128
    132c:	44 0f       	add	r20, r20
    132e:	55 1f       	adc	r21, r21
    1330:	59 f0       	breq	.+22     	; 0x1348 <__fp_splitA+0x10>
    1332:	5f 3f       	cpi	r21, 0xFF	; 255
    1334:	71 f0       	breq	.+28     	; 0x1352 <__fp_splitA+0x1a>
    1336:	47 95       	ror	r20

00001338 <__fp_splitA>:
    1338:	88 0f       	add	r24, r24
    133a:	97 fb       	bst	r25, 7
    133c:	99 1f       	adc	r25, r25
    133e:	61 f0       	breq	.+24     	; 0x1358 <__fp_splitA+0x20>
    1340:	9f 3f       	cpi	r25, 0xFF	; 255
    1342:	79 f0       	breq	.+30     	; 0x1362 <__fp_splitA+0x2a>
    1344:	87 95       	ror	r24
    1346:	08 95       	ret
    1348:	12 16       	cp	r1, r18
    134a:	13 06       	cpc	r1, r19
    134c:	14 06       	cpc	r1, r20
    134e:	55 1f       	adc	r21, r21
    1350:	f2 cf       	rjmp	.-28     	; 0x1336 <__fp_split3+0xe>
    1352:	46 95       	lsr	r20
    1354:	f1 df       	rcall	.-30     	; 0x1338 <__fp_splitA>
    1356:	08 c0       	rjmp	.+16     	; 0x1368 <__fp_splitA+0x30>
    1358:	16 16       	cp	r1, r22
    135a:	17 06       	cpc	r1, r23
    135c:	18 06       	cpc	r1, r24
    135e:	99 1f       	adc	r25, r25
    1360:	f1 cf       	rjmp	.-30     	; 0x1344 <__fp_splitA+0xc>
    1362:	86 95       	lsr	r24
    1364:	71 05       	cpc	r23, r1
    1366:	61 05       	cpc	r22, r1
    1368:	08 94       	sec
    136a:	08 95       	ret

0000136c <__fp_zero>:
    136c:	e8 94       	clt

0000136e <__fp_szero>:
    136e:	bb 27       	eor	r27, r27
    1370:	66 27       	eor	r22, r22
    1372:	77 27       	eor	r23, r23
    1374:	cb 01       	movw	r24, r22
    1376:	97 f9       	bld	r25, 7
    1378:	08 95       	ret

0000137a <__gesf2>:
    137a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_cmp>
    137e:	08 f4       	brcc	.+2      	; 0x1382 <__gesf2+0x8>
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	08 95       	ret

00001384 <__mulsf3>:
    1384:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__mulsf3x>
    1388:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__fp_round>
    138c:	0e 94 38 0a 	call	0x1470	; 0x1470 <__fp_pscA>
    1390:	38 f0       	brcs	.+14     	; 0x13a0 <__mulsf3+0x1c>
    1392:	0e 94 3f 0a 	call	0x147e	; 0x147e <__fp_pscB>
    1396:	20 f0       	brcs	.+8      	; 0x13a0 <__mulsf3+0x1c>
    1398:	95 23       	and	r25, r21
    139a:	11 f0       	breq	.+4      	; 0x13a0 <__mulsf3+0x1c>
    139c:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_inf>
    13a0:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__fp_nan>
    13a4:	11 24       	eor	r1, r1
    13a6:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_szero>

000013aa <__mulsf3x>:
    13aa:	0e 94 94 09 	call	0x1328	; 0x1328 <__fp_split3>
    13ae:	70 f3       	brcs	.-36     	; 0x138c <__mulsf3+0x8>

000013b0 <__mulsf3_pse>:
    13b0:	95 9f       	mul	r25, r21
    13b2:	c1 f3       	breq	.-16     	; 0x13a4 <__mulsf3+0x20>
    13b4:	95 0f       	add	r25, r21
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	55 1f       	adc	r21, r21
    13ba:	62 9f       	mul	r22, r18
    13bc:	f0 01       	movw	r30, r0
    13be:	72 9f       	mul	r23, r18
    13c0:	bb 27       	eor	r27, r27
    13c2:	f0 0d       	add	r31, r0
    13c4:	b1 1d       	adc	r27, r1
    13c6:	63 9f       	mul	r22, r19
    13c8:	aa 27       	eor	r26, r26
    13ca:	f0 0d       	add	r31, r0
    13cc:	b1 1d       	adc	r27, r1
    13ce:	aa 1f       	adc	r26, r26
    13d0:	64 9f       	mul	r22, r20
    13d2:	66 27       	eor	r22, r22
    13d4:	b0 0d       	add	r27, r0
    13d6:	a1 1d       	adc	r26, r1
    13d8:	66 1f       	adc	r22, r22
    13da:	82 9f       	mul	r24, r18
    13dc:	22 27       	eor	r18, r18
    13de:	b0 0d       	add	r27, r0
    13e0:	a1 1d       	adc	r26, r1
    13e2:	62 1f       	adc	r22, r18
    13e4:	73 9f       	mul	r23, r19
    13e6:	b0 0d       	add	r27, r0
    13e8:	a1 1d       	adc	r26, r1
    13ea:	62 1f       	adc	r22, r18
    13ec:	83 9f       	mul	r24, r19
    13ee:	a0 0d       	add	r26, r0
    13f0:	61 1d       	adc	r22, r1
    13f2:	22 1f       	adc	r18, r18
    13f4:	74 9f       	mul	r23, r20
    13f6:	33 27       	eor	r19, r19
    13f8:	a0 0d       	add	r26, r0
    13fa:	61 1d       	adc	r22, r1
    13fc:	23 1f       	adc	r18, r19
    13fe:	84 9f       	mul	r24, r20
    1400:	60 0d       	add	r22, r0
    1402:	21 1d       	adc	r18, r1
    1404:	82 2f       	mov	r24, r18
    1406:	76 2f       	mov	r23, r22
    1408:	6a 2f       	mov	r22, r26
    140a:	11 24       	eor	r1, r1
    140c:	9f 57       	subi	r25, 0x7F	; 127
    140e:	50 40       	sbci	r21, 0x00	; 0
    1410:	9a f0       	brmi	.+38     	; 0x1438 <__mulsf3_pse+0x88>
    1412:	f1 f0       	breq	.+60     	; 0x1450 <__mulsf3_pse+0xa0>
    1414:	88 23       	and	r24, r24
    1416:	4a f0       	brmi	.+18     	; 0x142a <__mulsf3_pse+0x7a>
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	bb 1f       	adc	r27, r27
    141e:	66 1f       	adc	r22, r22
    1420:	77 1f       	adc	r23, r23
    1422:	88 1f       	adc	r24, r24
    1424:	91 50       	subi	r25, 0x01	; 1
    1426:	50 40       	sbci	r21, 0x00	; 0
    1428:	a9 f7       	brne	.-22     	; 0x1414 <__mulsf3_pse+0x64>
    142a:	9e 3f       	cpi	r25, 0xFE	; 254
    142c:	51 05       	cpc	r21, r1
    142e:	80 f0       	brcs	.+32     	; 0x1450 <__mulsf3_pse+0xa0>
    1430:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__fp_inf>
    1434:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_szero>
    1438:	5f 3f       	cpi	r21, 0xFF	; 255
    143a:	e4 f3       	brlt	.-8      	; 0x1434 <__mulsf3_pse+0x84>
    143c:	98 3e       	cpi	r25, 0xE8	; 232
    143e:	d4 f3       	brlt	.-12     	; 0x1434 <__mulsf3_pse+0x84>
    1440:	86 95       	lsr	r24
    1442:	77 95       	ror	r23
    1444:	67 95       	ror	r22
    1446:	b7 95       	ror	r27
    1448:	f7 95       	ror	r31
    144a:	e7 95       	ror	r30
    144c:	9f 5f       	subi	r25, 0xFF	; 255
    144e:	c1 f7       	brne	.-16     	; 0x1440 <__mulsf3_pse+0x90>
    1450:	fe 2b       	or	r31, r30
    1452:	88 0f       	add	r24, r24
    1454:	91 1d       	adc	r25, r1
    1456:	96 95       	lsr	r25
    1458:	87 95       	ror	r24
    145a:	97 f9       	bld	r25, 7
    145c:	08 95       	ret

0000145e <__fp_inf>:
    145e:	97 f9       	bld	r25, 7
    1460:	9f 67       	ori	r25, 0x7F	; 127
    1462:	80 e8       	ldi	r24, 0x80	; 128
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	08 95       	ret

0000146a <__fp_nan>:
    146a:	9f ef       	ldi	r25, 0xFF	; 255
    146c:	80 ec       	ldi	r24, 0xC0	; 192
    146e:	08 95       	ret

00001470 <__fp_pscA>:
    1470:	00 24       	eor	r0, r0
    1472:	0a 94       	dec	r0
    1474:	16 16       	cp	r1, r22
    1476:	17 06       	cpc	r1, r23
    1478:	18 06       	cpc	r1, r24
    147a:	09 06       	cpc	r0, r25
    147c:	08 95       	ret

0000147e <__fp_pscB>:
    147e:	00 24       	eor	r0, r0
    1480:	0a 94       	dec	r0
    1482:	12 16       	cp	r1, r18
    1484:	13 06       	cpc	r1, r19
    1486:	14 06       	cpc	r1, r20
    1488:	05 06       	cpc	r0, r21
    148a:	08 95       	ret

0000148c <__fp_round>:
    148c:	09 2e       	mov	r0, r25
    148e:	03 94       	inc	r0
    1490:	00 0c       	add	r0, r0
    1492:	11 f4       	brne	.+4      	; 0x1498 <__fp_round+0xc>
    1494:	88 23       	and	r24, r24
    1496:	52 f0       	brmi	.+20     	; 0x14ac <__fp_round+0x20>
    1498:	bb 0f       	add	r27, r27
    149a:	40 f4       	brcc	.+16     	; 0x14ac <__fp_round+0x20>
    149c:	bf 2b       	or	r27, r31
    149e:	11 f4       	brne	.+4      	; 0x14a4 <__fp_round+0x18>
    14a0:	60 ff       	sbrs	r22, 0
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <__fp_round+0x20>
    14a4:	6f 5f       	subi	r22, 0xFF	; 255
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	8f 4f       	sbci	r24, 0xFF	; 255
    14aa:	9f 4f       	sbci	r25, 0xFF	; 255
    14ac:	08 95       	ret

000014ae <_exit>:
    14ae:	f8 94       	cli

000014b0 <__stop_program>:
    14b0:	ff cf       	rjmp	.-2      	; 0x14b0 <__stop_program>
