
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000ae2  00000b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000ec4  00000000  00000000  00000b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d68  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002784  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002798  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00002cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000315d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00003177  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c4 03 	call	0x788	; 0x788 <main>
  64:	0c 94 6f 05 	jmp	0xade	; 0xade <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_vidSetPortDirection>:
#include "Bit_Math.h"
#include "DIO_Int.h"


void DIO_vidSetPortDirection(u8 port_no,u8 port_direction)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_vidSetPortDirection+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
  78:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no)
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	88 2f       	mov	r24, r24
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	91 05       	cpc	r25, r1
  84:	91 f0       	breq	.+36     	; 0xaa <DIO_vidSetPortDirection+0x3e>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	91 05       	cpc	r25, r1
  8a:	1c f4       	brge	.+6      	; 0x92 <DIO_vidSetPortDirection+0x26>
  8c:	89 2b       	or	r24, r25
  8e:	39 f0       	breq	.+14     	; 0x9e <DIO_vidSetPortDirection+0x32>
  90:	1e c0       	rjmp	.+60     	; 0xce <DIO_vidSetPortDirection+0x62>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	91 05       	cpc	r25, r1
  96:	79 f0       	breq	.+30     	; 0xb6 <DIO_vidSetPortDirection+0x4a>
  98:	03 97       	sbiw	r24, 0x03	; 3
  9a:	99 f0       	breq	.+38     	; 0xc2 <DIO_vidSetPortDirection+0x56>
  9c:	18 c0       	rjmp	.+48     	; 0xce <DIO_vidSetPortDirection+0x62>
	{
	case PORTA_Reg:
		DDRA=port_direction;
  9e:	8a e3       	ldi	r24, 0x3A	; 58
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2a 81       	ldd	r18, Y+2	; 0x02
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
		break;
  a8:	18 c0       	rjmp	.+48     	; 0xda <DIO_vidSetPortDirection+0x6e>

	case PORTB_Reg:
		DDRB=port_direction;
  aa:	87 e3       	ldi	r24, 0x37	; 55
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2a 81       	ldd	r18, Y+2	; 0x02
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
		break;
  b4:	12 c0       	rjmp	.+36     	; 0xda <DIO_vidSetPortDirection+0x6e>

	case PORTC_Reg:
		DDRC=port_direction;
  b6:	84 e3       	ldi	r24, 0x34	; 52
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	2a 81       	ldd	r18, Y+2	; 0x02
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
		break;
  c0:	0c c0       	rjmp	.+24     	; 0xda <DIO_vidSetPortDirection+0x6e>

	case PORTD_Reg:
		DDRD=port_direction;
  c2:	81 e3       	ldi	r24, 0x31	; 49
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	2a 81       	ldd	r18, Y+2	; 0x02
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
		break;
  cc:	06 c0       	rjmp	.+12     	; 0xda <DIO_vidSetPortDirection+0x6e>

	default :
		DDRA=0xff;
  ce:	8a e3       	ldi	r24, 0x3A	; 58
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
		break;
  d8:	00 00       	nop
	}
}
  da:	00 00       	nop
  dc:	0f 90       	pop	r0
  de:	0f 90       	pop	r0
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <DIO_vidSetPinDirection>:

void DIO_vidSetPinDirection(u8 port_no, u8 pin_no, u8 pin_diection)
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	00 d0       	rcall	.+0      	; 0xec <DIO_vidSetPinDirection+0x6>
  ec:	1f 92       	push	r1
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	6a 83       	std	Y+2, r22	; 0x02
  f6:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_diection==OUTPUT)
  f8:	8b 81       	ldd	r24, Y+3	; 0x03
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	09 f0       	breq	.+2      	; 0x100 <DIO_vidSetPinDirection+0x1a>
  fe:	71 c0       	rjmp	.+226    	; 0x1e2 <DIO_vidSetPinDirection+0xfc>
	{
		switch(port_no){
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	88 2f       	mov	r24, r24
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	91 05       	cpc	r25, r1
 10a:	11 f1       	breq	.+68     	; 0x150 <DIO_vidSetPinDirection+0x6a>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	91 05       	cpc	r25, r1
 110:	1c f4       	brge	.+6      	; 0x118 <DIO_vidSetPinDirection+0x32>
 112:	89 2b       	or	r24, r25
 114:	41 f0       	breq	.+16     	; 0x126 <DIO_vidSetPinDirection+0x40>
 116:	5b c0       	rjmp	.+182    	; 0x1ce <DIO_vidSetPinDirection+0xe8>
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	91 05       	cpc	r25, r1
 11c:	71 f1       	breq	.+92     	; 0x17a <DIO_vidSetPinDirection+0x94>
 11e:	03 97       	sbiw	r24, 0x03	; 3
 120:	09 f4       	brne	.+2      	; 0x124 <DIO_vidSetPinDirection+0x3e>
 122:	40 c0       	rjmp	.+128    	; 0x1a4 <DIO_vidSetPinDirection+0xbe>
 124:	54 c0       	rjmp	.+168    	; 0x1ce <DIO_vidSetPinDirection+0xe8>
		case PORTA_Reg:
			Set_Bit(DDRA,pin_no);
 126:	8a e3       	ldi	r24, 0x3A	; 58
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	2a e3       	ldi	r18, 0x3A	; 58
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	62 2f       	mov	r22, r18
 134:	2a 81       	ldd	r18, Y+2	; 0x02
 136:	42 2f       	mov	r20, r18
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_vidSetPinDirection+0x5e>
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	4a 95       	dec	r20
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_vidSetPinDirection+0x5a>
 148:	26 2b       	or	r18, r22
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
			break;
 14e:	49 c0       	rjmp	.+146    	; 0x1e2 <DIO_vidSetPinDirection+0xfc>
		case PORTB_Reg:
			Set_Bit(DDRB,pin_no);
 150:	87 e3       	ldi	r24, 0x37	; 55
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	27 e3       	ldi	r18, 0x37	; 55
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	62 2f       	mov	r22, r18
 15e:	2a 81       	ldd	r18, Y+2	; 0x02
 160:	42 2f       	mov	r20, r18
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_vidSetPinDirection+0x88>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	4a 95       	dec	r20
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_vidSetPinDirection+0x84>
 172:	26 2b       	or	r18, r22
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
			break;
 178:	34 c0       	rjmp	.+104    	; 0x1e2 <DIO_vidSetPinDirection+0xfc>
		case PORTC_Reg:
			Set_Bit(DDRC,pin_no);
 17a:	84 e3       	ldi	r24, 0x34	; 52
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	24 e3       	ldi	r18, 0x34	; 52
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	62 2f       	mov	r22, r18
 188:	2a 81       	ldd	r18, Y+2	; 0x02
 18a:	42 2f       	mov	r20, r18
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_vidSetPinDirection+0xb2>
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	4a 95       	dec	r20
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_vidSetPinDirection+0xae>
 19c:	26 2b       	or	r18, r22
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
			break;
 1a2:	1f c0       	rjmp	.+62     	; 0x1e2 <DIO_vidSetPinDirection+0xfc>

		case PORTD_Reg:
			Set_Bit(DDRD,pin_no);
 1a4:	81 e3       	ldi	r24, 0x31	; 49
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	21 e3       	ldi	r18, 0x31	; 49
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	62 2f       	mov	r22, r18
 1b2:	2a 81       	ldd	r18, Y+2	; 0x02
 1b4:	42 2f       	mov	r20, r18
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_vidSetPinDirection+0xdc>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_vidSetPinDirection+0xd8>
 1c6:	26 2b       	or	r18, r22
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
			break;
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <DIO_vidSetPinDirection+0xfc>
		default:
			Clr_Bit(DDRA,PIN0);
 1ce:	8a e3       	ldi	r24, 0x3A	; 58
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	2a e3       	ldi	r18, 0x3A	; 58
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	2e 7f       	andi	r18, 0xFE	; 254
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
			break;
 1e0:	00 00       	nop
		}
	}
	if(pin_diection==INPUT){
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	88 23       	and	r24, r24
 1e6:	09 f0       	breq	.+2      	; 0x1ea <DIO_vidSetPinDirection+0x104>
 1e8:	76 c0       	rjmp	.+236    	; 0x2d6 <DIO_vidSetPinDirection+0x1f0>

		switch(port_no){
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	88 2f       	mov	r24, r24
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	91 05       	cpc	r25, r1
 1f4:	19 f1       	breq	.+70     	; 0x23c <DIO_vidSetPinDirection+0x156>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	91 05       	cpc	r25, r1
 1fa:	1c f4       	brge	.+6      	; 0x202 <DIO_vidSetPinDirection+0x11c>
 1fc:	89 2b       	or	r24, r25
 1fe:	41 f0       	breq	.+16     	; 0x210 <DIO_vidSetPinDirection+0x12a>
 200:	5f c0       	rjmp	.+190    	; 0x2c0 <DIO_vidSetPinDirection+0x1da>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	91 05       	cpc	r25, r1
 206:	81 f1       	breq	.+96     	; 0x268 <DIO_vidSetPinDirection+0x182>
 208:	03 97       	sbiw	r24, 0x03	; 3
 20a:	09 f4       	brne	.+2      	; 0x20e <DIO_vidSetPinDirection+0x128>
 20c:	43 c0       	rjmp	.+134    	; 0x294 <DIO_vidSetPinDirection+0x1ae>
 20e:	58 c0       	rjmp	.+176    	; 0x2c0 <DIO_vidSetPinDirection+0x1da>
		case PORTA_Reg:
			Clr_Bit(DDRA,pin_no);
 210:	8a e3       	ldi	r24, 0x3A	; 58
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	2a e3       	ldi	r18, 0x3A	; 58
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	20 81       	ld	r18, Z
 21c:	62 2f       	mov	r22, r18
 21e:	2a 81       	ldd	r18, Y+2	; 0x02
 220:	42 2f       	mov	r20, r18
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_vidSetPinDirection+0x148>
 22a:	22 0f       	add	r18, r18
 22c:	33 1f       	adc	r19, r19
 22e:	4a 95       	dec	r20
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_vidSetPinDirection+0x144>
 232:	20 95       	com	r18
 234:	26 23       	and	r18, r22
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
			break;
 23a:	56 c0       	rjmp	.+172    	; 0x2e8 <DIO_vidSetPinDirection+0x202>
		case PORTB_Reg:
			Clr_Bit(DDRB,pin_no);
 23c:	87 e3       	ldi	r24, 0x37	; 55
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	27 e3       	ldi	r18, 0x37	; 55
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	20 81       	ld	r18, Z
 248:	62 2f       	mov	r22, r18
 24a:	2a 81       	ldd	r18, Y+2	; 0x02
 24c:	42 2f       	mov	r20, r18
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_vidSetPinDirection+0x174>
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	4a 95       	dec	r20
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_vidSetPinDirection+0x170>
 25e:	20 95       	com	r18
 260:	26 23       	and	r18, r22
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
			break;
 266:	40 c0       	rjmp	.+128    	; 0x2e8 <DIO_vidSetPinDirection+0x202>
		case PORTC_Reg:
			Clr_Bit(DDRC,pin_no);
 268:	84 e3       	ldi	r24, 0x34	; 52
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	24 e3       	ldi	r18, 0x34	; 52
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	f9 01       	movw	r30, r18
 272:	20 81       	ld	r18, Z
 274:	62 2f       	mov	r22, r18
 276:	2a 81       	ldd	r18, Y+2	; 0x02
 278:	42 2f       	mov	r20, r18
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_vidSetPinDirection+0x1a0>
 282:	22 0f       	add	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	4a 95       	dec	r20
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_vidSetPinDirection+0x19c>
 28a:	20 95       	com	r18
 28c:	26 23       	and	r18, r22
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
			break;
 292:	2a c0       	rjmp	.+84     	; 0x2e8 <DIO_vidSetPinDirection+0x202>

		case PORTD_Reg:
			Clr_Bit(DDRD,pin_no);
 294:	81 e3       	ldi	r24, 0x31	; 49
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	21 e3       	ldi	r18, 0x31	; 49
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	f9 01       	movw	r30, r18
 29e:	20 81       	ld	r18, Z
 2a0:	62 2f       	mov	r22, r18
 2a2:	2a 81       	ldd	r18, Y+2	; 0x02
 2a4:	42 2f       	mov	r20, r18
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_vidSetPinDirection+0x1cc>
 2ae:	22 0f       	add	r18, r18
 2b0:	33 1f       	adc	r19, r19
 2b2:	4a 95       	dec	r20
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_vidSetPinDirection+0x1c8>
 2b6:	20 95       	com	r18
 2b8:	26 23       	and	r18, r22
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
			break;
 2be:	14 c0       	rjmp	.+40     	; 0x2e8 <DIO_vidSetPinDirection+0x202>
		default:
			Clr_Bit(DDRA,PIN0);
 2c0:	8a e3       	ldi	r24, 0x3A	; 58
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	2a e3       	ldi	r18, 0x3A	; 58
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	20 81       	ld	r18, Z
 2cc:	2e 7f       	andi	r18, 0xFE	; 254
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
			break;
 2d2:	00 00       	nop
 2d4:	09 c0       	rjmp	.+18     	; 0x2e8 <DIO_vidSetPinDirection+0x202>
		}
	}
	else
	{
		Clr_Bit(DDRA,PIN0);
 2d6:	8a e3       	ldi	r24, 0x3A	; 58
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	2a e3       	ldi	r18, 0x3A	; 58
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	20 81       	ld	r18, Z
 2e2:	2e 7f       	andi	r18, 0xFE	; 254
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
	}
}
 2e8:	00 00       	nop
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <DIO_vidSetPORTValue>:

void DIO_vidSetPORTValue(u8 port_no,u8 port_value)
{
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	00 d0       	rcall	.+0      	; 0x2fc <DIO_vidSetPORTValue+0x6>
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	89 83       	std	Y+1, r24	; 0x01
 302:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no)
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	88 2f       	mov	r24, r24
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	91 05       	cpc	r25, r1
 30e:	91 f0       	breq	.+36     	; 0x334 <DIO_vidSetPORTValue+0x3e>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	91 05       	cpc	r25, r1
 314:	1c f4       	brge	.+6      	; 0x31c <DIO_vidSetPORTValue+0x26>
 316:	89 2b       	or	r24, r25
 318:	39 f0       	breq	.+14     	; 0x328 <DIO_vidSetPORTValue+0x32>
 31a:	1e c0       	rjmp	.+60     	; 0x358 <DIO_vidSetPORTValue+0x62>
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	91 05       	cpc	r25, r1
 320:	79 f0       	breq	.+30     	; 0x340 <DIO_vidSetPORTValue+0x4a>
 322:	03 97       	sbiw	r24, 0x03	; 3
 324:	99 f0       	breq	.+38     	; 0x34c <DIO_vidSetPORTValue+0x56>
 326:	18 c0       	rjmp	.+48     	; 0x358 <DIO_vidSetPORTValue+0x62>
	{
	case PORTA_Reg:
		PORTA=port_value;
 328:	8b e3       	ldi	r24, 0x3B	; 59
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	2a 81       	ldd	r18, Y+2	; 0x02
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
		break;
 332:	18 c0       	rjmp	.+48     	; 0x364 <DIO_vidSetPORTValue+0x6e>

	case PORTB_Reg:
		PORTB=port_value;
 334:	88 e3       	ldi	r24, 0x38	; 56
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	2a 81       	ldd	r18, Y+2	; 0x02
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
		break;
 33e:	12 c0       	rjmp	.+36     	; 0x364 <DIO_vidSetPORTValue+0x6e>

	case PORTC_Reg:
		PORTC=port_value;
 340:	85 e3       	ldi	r24, 0x35	; 53
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	2a 81       	ldd	r18, Y+2	; 0x02
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
		break;
 34a:	0c c0       	rjmp	.+24     	; 0x364 <DIO_vidSetPORTValue+0x6e>

	case PORTD_Reg:
		PORTD=port_value;
 34c:	82 e3       	ldi	r24, 0x32	; 50
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	2a 81       	ldd	r18, Y+2	; 0x02
 352:	fc 01       	movw	r30, r24
 354:	20 83       	st	Z, r18
		break;
 356:	06 c0       	rjmp	.+12     	; 0x364 <DIO_vidSetPORTValue+0x6e>

	default:
		PORTA=0xff;
 358:	8b e3       	ldi	r24, 0x3B	; 59
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
		break;
 362:	00 00       	nop
	}
}
 364:	00 00       	nop
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <DIO_vidSetPinValue>:

void DIO_vidSetPinValue(u8 port_no,u8 pin_no,u8 pin_value)
{
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	00 d0       	rcall	.+0      	; 0x376 <DIO_vidSetPinValue+0x6>
 376:	1f 92       	push	r1
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	89 83       	std	Y+1, r24	; 0x01
 37e:	6a 83       	std	Y+2, r22	; 0x02
 380:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_value==HIGH)
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	09 f0       	breq	.+2      	; 0x38a <DIO_vidSetPinValue+0x1a>
 388:	71 c0       	rjmp	.+226    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{
		switch(port_no)
 38a:	89 81       	ldd	r24, Y+1	; 0x01
 38c:	88 2f       	mov	r24, r24
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	91 05       	cpc	r25, r1
 394:	11 f1       	breq	.+68     	; 0x3da <DIO_vidSetPinValue+0x6a>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	91 05       	cpc	r25, r1
 39a:	1c f4       	brge	.+6      	; 0x3a2 <DIO_vidSetPinValue+0x32>
 39c:	89 2b       	or	r24, r25
 39e:	41 f0       	breq	.+16     	; 0x3b0 <DIO_vidSetPinValue+0x40>
 3a0:	5b c0       	rjmp	.+182    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	91 05       	cpc	r25, r1
 3a6:	71 f1       	breq	.+92     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3a8:	03 97       	sbiw	r24, 0x03	; 3
 3aa:	09 f4       	brne	.+2      	; 0x3ae <DIO_vidSetPinValue+0x3e>
 3ac:	40 c0       	rjmp	.+128    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3ae:	54 c0       	rjmp	.+168    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		{
		case PORTA_Reg:
			Set_Bit(PORTA,pin_no);
 3b0:	8b e3       	ldi	r24, 0x3B	; 59
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	2b e3       	ldi	r18, 0x3B	; 59
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	f9 01       	movw	r30, r18
 3ba:	20 81       	ld	r18, Z
 3bc:	62 2f       	mov	r22, r18
 3be:	2a 81       	ldd	r18, Y+2	; 0x02
 3c0:	42 2f       	mov	r20, r18
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_vidSetPinValue+0x5e>
 3ca:	22 0f       	add	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	4a 95       	dec	r20
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_vidSetPinValue+0x5a>
 3d2:	26 2b       	or	r18, r22
 3d4:	fc 01       	movw	r30, r24
 3d6:	20 83       	st	Z, r18
			break;
 3d8:	49 c0       	rjmp	.+146    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		case PORTB_Reg:
			Set_Bit(PORTB,pin_no);
 3da:	88 e3       	ldi	r24, 0x38	; 56
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	28 e3       	ldi	r18, 0x38	; 56
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	f9 01       	movw	r30, r18
 3e4:	20 81       	ld	r18, Z
 3e6:	62 2f       	mov	r22, r18
 3e8:	2a 81       	ldd	r18, Y+2	; 0x02
 3ea:	42 2f       	mov	r20, r18
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_vidSetPinValue+0x88>
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
 3f8:	4a 95       	dec	r20
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_vidSetPinValue+0x84>
 3fc:	26 2b       	or	r18, r22
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
			break;
 402:	34 c0       	rjmp	.+104    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		case PORTC_Reg:
			Set_Bit(PORTC,pin_no);
 404:	85 e3       	ldi	r24, 0x35	; 53
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	25 e3       	ldi	r18, 0x35	; 53
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	f9 01       	movw	r30, r18
 40e:	20 81       	ld	r18, Z
 410:	62 2f       	mov	r22, r18
 412:	2a 81       	ldd	r18, Y+2	; 0x02
 414:	42 2f       	mov	r20, r18
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	22 0f       	add	r18, r18
 420:	33 1f       	adc	r19, r19
 422:	4a 95       	dec	r20
 424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	26 2b       	or	r18, r22
 428:	fc 01       	movw	r30, r24
 42a:	20 83       	st	Z, r18
			break;
 42c:	1f c0       	rjmp	.+62     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>

		case PORTD_Reg:
			Set_Bit(PORTD,pin_no);
 42e:	82 e3       	ldi	r24, 0x32	; 50
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	22 e3       	ldi	r18, 0x32	; 50
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	f9 01       	movw	r30, r18
 438:	20 81       	ld	r18, Z
 43a:	62 2f       	mov	r22, r18
 43c:	2a 81       	ldd	r18, Y+2	; 0x02
 43e:	42 2f       	mov	r20, r18
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	4a 95       	dec	r20
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 450:	26 2b       	or	r18, r22
 452:	fc 01       	movw	r30, r24
 454:	20 83       	st	Z, r18
			break;
 456:	0a c0       	rjmp	.+20     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		default:
			Clr_Bit(PORTA,PIN0);
 458:	8b e3       	ldi	r24, 0x3B	; 59
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	2b e3       	ldi	r18, 0x3B	; 59
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	f9 01       	movw	r30, r18
 462:	20 81       	ld	r18, Z
 464:	2e 7f       	andi	r18, 0xFE	; 254
 466:	fc 01       	movw	r30, r24
 468:	20 83       	st	Z, r18
			break;
 46a:	00 00       	nop
		}
	}
	if(pin_value==LOW)
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	88 23       	and	r24, r24
 470:	09 f0       	breq	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	76 c0       	rjmp	.+236    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
	{
		switch(port_no){
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	88 2f       	mov	r24, r24
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	91 05       	cpc	r25, r1
 47e:	19 f1       	breq	.+70     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 480:	82 30       	cpi	r24, 0x02	; 2
 482:	91 05       	cpc	r25, r1
 484:	1c f4       	brge	.+6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 486:	89 2b       	or	r24, r25
 488:	41 f0       	breq	.+16     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 48a:	5f c0       	rjmp	.+190    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	91 05       	cpc	r25, r1
 490:	81 f1       	breq	.+96     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 492:	03 97       	sbiw	r24, 0x03	; 3
 494:	09 f4       	brne	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 496:	43 c0       	rjmp	.+134    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 498:	58 c0       	rjmp	.+176    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
		case PORTA_Reg:
			Clr_Bit(PORTA,pin_no);
 49a:	8b e3       	ldi	r24, 0x3B	; 59
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	2b e3       	ldi	r18, 0x3B	; 59
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	f9 01       	movw	r30, r18
 4a4:	20 81       	ld	r18, Z
 4a6:	62 2f       	mov	r22, r18
 4a8:	2a 81       	ldd	r18, Y+2	; 0x02
 4aa:	42 2f       	mov	r20, r18
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b4:	22 0f       	add	r18, r18
 4b6:	33 1f       	adc	r19, r19
 4b8:	4a 95       	dec	r20
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4bc:	20 95       	com	r18
 4be:	26 23       	and	r18, r22
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18
			break;
 4c4:	56 c0       	rjmp	.+172    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
		case PORTB_Reg:
			Clr_Bit(PORTB,pin_no);
 4c6:	88 e3       	ldi	r24, 0x38	; 56
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	28 e3       	ldi	r18, 0x38	; 56
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	f9 01       	movw	r30, r18
 4d0:	20 81       	ld	r18, Z
 4d2:	62 2f       	mov	r22, r18
 4d4:	2a 81       	ldd	r18, Y+2	; 0x02
 4d6:	42 2f       	mov	r20, r18
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e0:	22 0f       	add	r18, r18
 4e2:	33 1f       	adc	r19, r19
 4e4:	4a 95       	dec	r20
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4e8:	20 95       	com	r18
 4ea:	26 23       	and	r18, r22
 4ec:	fc 01       	movw	r30, r24
 4ee:	20 83       	st	Z, r18
			break;
 4f0:	40 c0       	rjmp	.+128    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
		case PORTC_Reg:
			Clr_Bit(PORTC,pin_no);
 4f2:	85 e3       	ldi	r24, 0x35	; 53
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	25 e3       	ldi	r18, 0x35	; 53
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	f9 01       	movw	r30, r18
 4fc:	20 81       	ld	r18, Z
 4fe:	62 2f       	mov	r22, r18
 500:	2a 81       	ldd	r18, Y+2	; 0x02
 502:	42 2f       	mov	r20, r18
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	21 e0       	ldi	r18, 0x01	; 1
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 50c:	22 0f       	add	r18, r18
 50e:	33 1f       	adc	r19, r19
 510:	4a 95       	dec	r20
 512:	e2 f7       	brpl	.-8      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 514:	20 95       	com	r18
 516:	26 23       	and	r18, r22
 518:	fc 01       	movw	r30, r24
 51a:	20 83       	st	Z, r18
			break;
 51c:	2a c0       	rjmp	.+84     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>

		case PORTD_Reg:
			Clr_Bit(PORTD,pin_no);
 51e:	82 e3       	ldi	r24, 0x32	; 50
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	22 e3       	ldi	r18, 0x32	; 50
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	f9 01       	movw	r30, r18
 528:	20 81       	ld	r18, Z
 52a:	62 2f       	mov	r22, r18
 52c:	2a 81       	ldd	r18, Y+2	; 0x02
 52e:	42 2f       	mov	r20, r18
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 538:	22 0f       	add	r18, r18
 53a:	33 1f       	adc	r19, r19
 53c:	4a 95       	dec	r20
 53e:	e2 f7       	brpl	.-8      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 540:	20 95       	com	r18
 542:	26 23       	and	r18, r22
 544:	fc 01       	movw	r30, r24
 546:	20 83       	st	Z, r18
			break;
 548:	14 c0       	rjmp	.+40     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
		default:
			Clr_Bit(PORTA,PIN0);
 54a:	8b e3       	ldi	r24, 0x3B	; 59
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	2b e3       	ldi	r18, 0x3B	; 59
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	f9 01       	movw	r30, r18
 554:	20 81       	ld	r18, Z
 556:	2e 7f       	andi	r18, 0xFE	; 254
 558:	fc 01       	movw	r30, r24
 55a:	20 83       	st	Z, r18
			break;
 55c:	00 00       	nop
 55e:	09 c0       	rjmp	.+18     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
		}
	}
	else
	{
		Clr_Bit(PORTA,PIN0);
 560:	8b e3       	ldi	r24, 0x3B	; 59
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	2b e3       	ldi	r18, 0x3B	; 59
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	f9 01       	movw	r30, r18
 56a:	20 81       	ld	r18, Z
 56c:	2e 7f       	andi	r18, 0xFE	; 254
 56e:	fc 01       	movw	r30, r24
 570:	20 83       	st	Z, r18
	}
}
 572:	00 00       	nop
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <DIO_vidGetPortValue>:

u8 DIO_vidGetPortValue(u8 port_no)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	1f 92       	push	r1
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	89 83       	std	Y+1, r24	; 0x01
	switch (port_no)
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	88 2f       	mov	r24, r24
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	91 05       	cpc	r25, r1
 596:	89 f0       	breq	.+34     	; 0x5ba <DIO_vidGetPortValue+0x3a>
 598:	82 30       	cpi	r24, 0x02	; 2
 59a:	91 05       	cpc	r25, r1
 59c:	1c f4       	brge	.+6      	; 0x5a4 <DIO_vidGetPortValue+0x24>
 59e:	89 2b       	or	r24, r25
 5a0:	39 f0       	breq	.+14     	; 0x5b0 <DIO_vidGetPortValue+0x30>
 5a2:	1a c0       	rjmp	.+52     	; 0x5d8 <DIO_vidGetPortValue+0x58>
 5a4:	82 30       	cpi	r24, 0x02	; 2
 5a6:	91 05       	cpc	r25, r1
 5a8:	69 f0       	breq	.+26     	; 0x5c4 <DIO_vidGetPortValue+0x44>
 5aa:	03 97       	sbiw	r24, 0x03	; 3
 5ac:	81 f0       	breq	.+32     	; 0x5ce <DIO_vidGetPortValue+0x4e>
 5ae:	14 c0       	rjmp	.+40     	; 0x5d8 <DIO_vidGetPortValue+0x58>
	{
	case PORTA_Reg:
		return PINA;
 5b0:	89 e3       	ldi	r24, 0x39	; 57
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	fc 01       	movw	r30, r24
 5b6:	80 81       	ld	r24, Z
 5b8:	10 c0       	rjmp	.+32     	; 0x5da <DIO_vidGetPortValue+0x5a>
		break;

	case PORTB_Reg:
		return PINB;
 5ba:	86 e3       	ldi	r24, 0x36	; 54
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	fc 01       	movw	r30, r24
 5c0:	80 81       	ld	r24, Z
 5c2:	0b c0       	rjmp	.+22     	; 0x5da <DIO_vidGetPortValue+0x5a>
		break;

	case PORTC_Reg:
		return PINC;
 5c4:	83 e3       	ldi	r24, 0x33	; 51
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	fc 01       	movw	r30, r24
 5ca:	80 81       	ld	r24, Z
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <DIO_vidGetPortValue+0x5a>
		break;

	case PORTD_Reg:
		return PIND;
 5ce:	80 e3       	ldi	r24, 0x30	; 48
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	fc 01       	movw	r30, r24
 5d4:	80 81       	ld	r24, Z
 5d6:	01 c0       	rjmp	.+2      	; 0x5da <DIO_vidGetPortValue+0x5a>
		break;

	default:
		return 0;
 5d8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 5da:	0f 90       	pop	r0
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	08 95       	ret

000005e2 <DIO_vidGetPinValue>:

u8 DIO_vidGetPinValue(u8 port_no, u8 pin_no)
{
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	00 d0       	rcall	.+0      	; 0x5e8 <DIO_vidGetPinValue+0x6>
 5e8:	cd b7       	in	r28, 0x3d	; 61
 5ea:	de b7       	in	r29, 0x3e	; 62
 5ec:	89 83       	std	Y+1, r24	; 0x01
 5ee:	6a 83       	std	Y+2, r22	; 0x02

	switch (port_no){
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
 5f2:	88 2f       	mov	r24, r24
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	91 05       	cpc	r25, r1
 5fa:	e1 f0       	breq	.+56     	; 0x634 <DIO_vidGetPinValue+0x52>
 5fc:	82 30       	cpi	r24, 0x02	; 2
 5fe:	91 05       	cpc	r25, r1
 600:	1c f4       	brge	.+6      	; 0x608 <DIO_vidGetPinValue+0x26>
 602:	89 2b       	or	r24, r25
 604:	39 f0       	breq	.+14     	; 0x614 <DIO_vidGetPinValue+0x32>
 606:	46 c0       	rjmp	.+140    	; 0x694 <DIO_vidGetPinValue+0xb2>
 608:	82 30       	cpi	r24, 0x02	; 2
 60a:	91 05       	cpc	r25, r1
 60c:	19 f1       	breq	.+70     	; 0x654 <DIO_vidGetPinValue+0x72>
 60e:	03 97       	sbiw	r24, 0x03	; 3
 610:	89 f1       	breq	.+98     	; 0x674 <DIO_vidGetPinValue+0x92>
 612:	40 c0       	rjmp	.+128    	; 0x694 <DIO_vidGetPinValue+0xb2>
	case PORTA_Reg:
		return Get_Bit(PINA,pin_no);
 614:	89 e3       	ldi	r24, 0x39	; 57
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	fc 01       	movw	r30, r24
 61a:	80 81       	ld	r24, Z
 61c:	88 2f       	mov	r24, r24
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	2a 81       	ldd	r18, Y+2	; 0x02
 622:	22 2f       	mov	r18, r18
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_vidGetPinValue+0x4a>
 628:	95 95       	asr	r25
 62a:	87 95       	ror	r24
 62c:	2a 95       	dec	r18
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_vidGetPinValue+0x46>
 630:	81 70       	andi	r24, 0x01	; 1
 632:	31 c0       	rjmp	.+98     	; 0x696 <DIO_vidGetPinValue+0xb4>
		break;

	case PORTB_Reg:
		return Get_Bit(PINB,pin_no);
 634:	86 e3       	ldi	r24, 0x36	; 54
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	fc 01       	movw	r30, r24
 63a:	80 81       	ld	r24, Z
 63c:	88 2f       	mov	r24, r24
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	2a 81       	ldd	r18, Y+2	; 0x02
 642:	22 2f       	mov	r18, r18
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_vidGetPinValue+0x6a>
 648:	95 95       	asr	r25
 64a:	87 95       	ror	r24
 64c:	2a 95       	dec	r18
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_vidGetPinValue+0x66>
 650:	81 70       	andi	r24, 0x01	; 1
 652:	21 c0       	rjmp	.+66     	; 0x696 <DIO_vidGetPinValue+0xb4>
		break;

	case PORTC_Reg:
		return Get_Bit(PINC,pin_no);
 654:	83 e3       	ldi	r24, 0x33	; 51
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	fc 01       	movw	r30, r24
 65a:	80 81       	ld	r24, Z
 65c:	88 2f       	mov	r24, r24
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	2a 81       	ldd	r18, Y+2	; 0x02
 662:	22 2f       	mov	r18, r18
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_vidGetPinValue+0x8a>
 668:	95 95       	asr	r25
 66a:	87 95       	ror	r24
 66c:	2a 95       	dec	r18
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_vidGetPinValue+0x86>
 670:	81 70       	andi	r24, 0x01	; 1
 672:	11 c0       	rjmp	.+34     	; 0x696 <DIO_vidGetPinValue+0xb4>
		break;

	case PORTD_Reg:
		return Get_Bit(PIND,pin_no);
 674:	80 e3       	ldi	r24, 0x30	; 48
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	fc 01       	movw	r30, r24
 67a:	80 81       	ld	r24, Z
 67c:	88 2f       	mov	r24, r24
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	2a 81       	ldd	r18, Y+2	; 0x02
 682:	22 2f       	mov	r18, r18
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_vidGetPinValue+0xaa>
 688:	95 95       	asr	r25
 68a:	87 95       	ror	r24
 68c:	2a 95       	dec	r18
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_vidGetPinValue+0xa6>
 690:	81 70       	andi	r24, 0x01	; 1
 692:	01 c0       	rjmp	.+2      	; 0x696 <DIO_vidGetPinValue+0xb4>
		break;

	default:
		return 0xff;
 694:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret

000006a0 <DIO_vidTogglePin>:
void DIO_vidTogglePin(u8 u8Port_NO,u8 u8Pin_NO)
{
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <DIO_vidTogglePin+0x6>
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	89 83       	std	Y+1, r24	; 0x01
 6ac:	6a 83       	std	Y+2, r22	; 0x02
	switch (u8Port_NO)
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	88 2f       	mov	r24, r24
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	91 05       	cpc	r25, r1
 6b8:	11 f1       	breq	.+68     	; 0x6fe <DIO_vidTogglePin+0x5e>
 6ba:	82 30       	cpi	r24, 0x02	; 2
 6bc:	91 05       	cpc	r25, r1
 6be:	1c f4       	brge	.+6      	; 0x6c6 <DIO_vidTogglePin+0x26>
 6c0:	89 2b       	or	r24, r25
 6c2:	41 f0       	breq	.+16     	; 0x6d4 <DIO_vidTogglePin+0x34>
	case PORTD_Reg:
		Toggle_Bit(PORTD,u8Pin_NO);
		break;

	default:
		break;
 6c4:	5b c0       	rjmp	.+182    	; 0x77c <DIO_vidTogglePin+0xdc>
		return 0xff;
	}
}
void DIO_vidTogglePin(u8 u8Port_NO,u8 u8Pin_NO)
{
	switch (u8Port_NO)
 6c6:	82 30       	cpi	r24, 0x02	; 2
 6c8:	91 05       	cpc	r25, r1
 6ca:	71 f1       	breq	.+92     	; 0x728 <DIO_vidTogglePin+0x88>
 6cc:	03 97       	sbiw	r24, 0x03	; 3
 6ce:	09 f4       	brne	.+2      	; 0x6d2 <DIO_vidTogglePin+0x32>
 6d0:	40 c0       	rjmp	.+128    	; 0x752 <DIO_vidTogglePin+0xb2>
	case PORTD_Reg:
		Toggle_Bit(PORTD,u8Pin_NO);
		break;

	default:
		break;
 6d2:	54 c0       	rjmp	.+168    	; 0x77c <DIO_vidTogglePin+0xdc>
void DIO_vidTogglePin(u8 u8Port_NO,u8 u8Pin_NO)
{
	switch (u8Port_NO)
	{
	case PORTA_Reg:
		Toggle_Bit(PORTA,u8Pin_NO);
 6d4:	8b e3       	ldi	r24, 0x3B	; 59
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	2b e3       	ldi	r18, 0x3B	; 59
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	f9 01       	movw	r30, r18
 6de:	20 81       	ld	r18, Z
 6e0:	62 2f       	mov	r22, r18
 6e2:	2a 81       	ldd	r18, Y+2	; 0x02
 6e4:	42 2f       	mov	r20, r18
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	21 e0       	ldi	r18, 0x01	; 1
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_vidTogglePin+0x52>
 6ee:	22 0f       	add	r18, r18
 6f0:	33 1f       	adc	r19, r19
 6f2:	4a 95       	dec	r20
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_vidTogglePin+0x4e>
 6f6:	26 27       	eor	r18, r22
 6f8:	fc 01       	movw	r30, r24
 6fa:	20 83       	st	Z, r18
		break;
 6fc:	3f c0       	rjmp	.+126    	; 0x77c <DIO_vidTogglePin+0xdc>

	case PORTB_Reg:
		Toggle_Bit(PORTB,u8Pin_NO);
 6fe:	88 e3       	ldi	r24, 0x38	; 56
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	28 e3       	ldi	r18, 0x38	; 56
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	f9 01       	movw	r30, r18
 708:	20 81       	ld	r18, Z
 70a:	62 2f       	mov	r22, r18
 70c:	2a 81       	ldd	r18, Y+2	; 0x02
 70e:	42 2f       	mov	r20, r18
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	21 e0       	ldi	r18, 0x01	; 1
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_vidTogglePin+0x7c>
 718:	22 0f       	add	r18, r18
 71a:	33 1f       	adc	r19, r19
 71c:	4a 95       	dec	r20
 71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_vidTogglePin+0x78>
 720:	26 27       	eor	r18, r22
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
		break;
 726:	2a c0       	rjmp	.+84     	; 0x77c <DIO_vidTogglePin+0xdc>

	case PORTC_Reg:
		Toggle_Bit(PORTC,u8Pin_NO);
 728:	85 e3       	ldi	r24, 0x35	; 53
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	25 e3       	ldi	r18, 0x35	; 53
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	f9 01       	movw	r30, r18
 732:	20 81       	ld	r18, Z
 734:	62 2f       	mov	r22, r18
 736:	2a 81       	ldd	r18, Y+2	; 0x02
 738:	42 2f       	mov	r20, r18
 73a:	50 e0       	ldi	r21, 0x00	; 0
 73c:	21 e0       	ldi	r18, 0x01	; 1
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_vidTogglePin+0xa6>
 742:	22 0f       	add	r18, r18
 744:	33 1f       	adc	r19, r19
 746:	4a 95       	dec	r20
 748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_vidTogglePin+0xa2>
 74a:	26 27       	eor	r18, r22
 74c:	fc 01       	movw	r30, r24
 74e:	20 83       	st	Z, r18
		break;
 750:	15 c0       	rjmp	.+42     	; 0x77c <DIO_vidTogglePin+0xdc>

	case PORTD_Reg:
		Toggle_Bit(PORTD,u8Pin_NO);
 752:	82 e3       	ldi	r24, 0x32	; 50
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	22 e3       	ldi	r18, 0x32	; 50
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	f9 01       	movw	r30, r18
 75c:	20 81       	ld	r18, Z
 75e:	62 2f       	mov	r22, r18
 760:	2a 81       	ldd	r18, Y+2	; 0x02
 762:	42 2f       	mov	r20, r18
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	21 e0       	ldi	r18, 0x01	; 1
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_vidTogglePin+0xd0>
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	4a 95       	dec	r20
 772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_vidTogglePin+0xcc>
 774:	26 27       	eor	r18, r22
 776:	fc 01       	movw	r30, r24
 778:	20 83       	st	Z, r18
		break;
 77a:	00 00       	nop

	default:
		break;
	}
}
 77c:	00 00       	nop
 77e:	0f 90       	pop	r0
 780:	0f 90       	pop	r0
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	08 95       	ret

00000788 <main>:
#include <util/delay.h>
#include "DIO_Int.h"


int main()
{
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
 790:	2e 97       	sbiw	r28, 0x0e	; 14
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	f8 94       	cli
 796:	de bf       	out	0x3e, r29	; 62
 798:	0f be       	out	0x3f, r0	; 63
 79a:	cd bf       	out	0x3d, r28	; 61
	/* set switch input */
	DIO_vidSetPinDirection(PORTB_Reg,PIN4,INPUT);
 79c:	40 e0       	ldi	r20, 0x00	; 0
 79e:	64 e0       	ldi	r22, 0x04	; 4
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vidSetPinDirection>
	/* pull up resistor */
	DIO_vidSetPinValue(PORTB_Reg,PIN4,HIGH);
 7a6:	41 e0       	ldi	r20, 0x01	; 1
 7a8:	64 e0       	ldi	r22, 0x04	; 4
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_vidSetPinValue>
	/* led output */
	DIO_vidSetPinDirection(PORTD_Reg,PIN7,OUTPUT);
 7b0:	41 e0       	ldi	r20, 0x01	; 1
 7b2:	67 e0       	ldi	r22, 0x07	; 7
 7b4:	83 e0       	ldi	r24, 0x03	; 3
 7b6:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_vidSetPinDirection>

	while(1)
	{
			DIO_vidTogglePin(PORTD_Reg,PIN7);
 7ba:	67 e0       	ldi	r22, 0x07	; 7
 7bc:	83 e0       	ldi	r24, 0x03	; 3
 7be:	0e 94 50 03 	call	0x6a0	; 0x6a0 <DIO_vidTogglePin>
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	af e2       	ldi	r26, 0x2F	; 47
 7c8:	b4 e4       	ldi	r27, 0x44	; 68
 7ca:	89 83       	std	Y+1, r24	; 0x01
 7cc:	9a 83       	std	Y+2, r25	; 0x02
 7ce:	ab 83       	std	Y+3, r26	; 0x03
 7d0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7d2:	20 e0       	ldi	r18, 0x00	; 0
 7d4:	30 e8       	ldi	r19, 0x80	; 128
 7d6:	4b e3       	ldi	r20, 0x3B	; 59
 7d8:	55 e4       	ldi	r21, 0x45	; 69
 7da:	69 81       	ldd	r22, Y+1	; 0x01
 7dc:	7a 81       	ldd	r23, Y+2	; 0x02
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	9c 81       	ldd	r25, Y+4	; 0x04
 7e2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__mulsf3>
 7e6:	dc 01       	movw	r26, r24
 7e8:	cb 01       	movw	r24, r22
 7ea:	8d 83       	std	Y+5, r24	; 0x05
 7ec:	9e 83       	std	Y+6, r25	; 0x06
 7ee:	af 83       	std	Y+7, r26	; 0x07
 7f0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	40 e8       	ldi	r20, 0x80	; 128
 7f8:	5f e3       	ldi	r21, 0x3F	; 63
 7fa:	6d 81       	ldd	r22, Y+5	; 0x05
 7fc:	7e 81       	ldd	r23, Y+6	; 0x06
 7fe:	8f 81       	ldd	r24, Y+7	; 0x07
 800:	98 85       	ldd	r25, Y+8	; 0x08
 802:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__cmpsf2>
 806:	88 23       	and	r24, r24
 808:	2c f4       	brge	.+10     	; 0x814 <main+0x8c>
		__ticks = 1;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	9a 87       	std	Y+10, r25	; 0x0a
 810:	89 87       	std	Y+9, r24	; 0x09
 812:	3f c0       	rjmp	.+126    	; 0x892 <__stack+0x33>
	else if (__tmp > 65535)
 814:	20 e0       	ldi	r18, 0x00	; 0
 816:	3f ef       	ldi	r19, 0xFF	; 255
 818:	4f e7       	ldi	r20, 0x7F	; 127
 81a:	57 e4       	ldi	r21, 0x47	; 71
 81c:	6d 81       	ldd	r22, Y+5	; 0x05
 81e:	7e 81       	ldd	r23, Y+6	; 0x06
 820:	8f 81       	ldd	r24, Y+7	; 0x07
 822:	98 85       	ldd	r25, Y+8	; 0x08
 824:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__gesf2>
 828:	18 16       	cp	r1, r24
 82a:	4c f5       	brge	.+82     	; 0x87e <__stack+0x1f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 82c:	20 e0       	ldi	r18, 0x00	; 0
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	40 e2       	ldi	r20, 0x20	; 32
 832:	51 e4       	ldi	r21, 0x41	; 65
 834:	69 81       	ldd	r22, Y+1	; 0x01
 836:	7a 81       	ldd	r23, Y+2	; 0x02
 838:	8b 81       	ldd	r24, Y+3	; 0x03
 83a:	9c 81       	ldd	r25, Y+4	; 0x04
 83c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__mulsf3>
 840:	dc 01       	movw	r26, r24
 842:	cb 01       	movw	r24, r22
 844:	bc 01       	movw	r22, r24
 846:	cd 01       	movw	r24, r26
 848:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fixunssfsi>
 84c:	dc 01       	movw	r26, r24
 84e:	cb 01       	movw	r24, r22
 850:	9a 87       	std	Y+10, r25	; 0x0a
 852:	89 87       	std	Y+9, r24	; 0x09
 854:	0f c0       	rjmp	.+30     	; 0x874 <__stack+0x15>
 856:	8c e2       	ldi	r24, 0x2C	; 44
 858:	91 e0       	ldi	r25, 0x01	; 1
 85a:	9c 87       	std	Y+12, r25	; 0x0c
 85c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 85e:	8b 85       	ldd	r24, Y+11	; 0x0b
 860:	9c 85       	ldd	r25, Y+12	; 0x0c
 862:	01 97       	sbiw	r24, 0x01	; 1
 864:	f1 f7       	brne	.-4      	; 0x862 <__stack+0x3>
 866:	9c 87       	std	Y+12, r25	; 0x0c
 868:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 86a:	89 85       	ldd	r24, Y+9	; 0x09
 86c:	9a 85       	ldd	r25, Y+10	; 0x0a
 86e:	01 97       	sbiw	r24, 0x01	; 1
 870:	9a 87       	std	Y+10, r25	; 0x0a
 872:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 874:	89 85       	ldd	r24, Y+9	; 0x09
 876:	9a 85       	ldd	r25, Y+10	; 0x0a
 878:	89 2b       	or	r24, r25
 87a:	69 f7       	brne	.-38     	; 0x856 <main+0xce>
 87c:	14 c0       	rjmp	.+40     	; 0x8a6 <__stack+0x47>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 87e:	6d 81       	ldd	r22, Y+5	; 0x05
 880:	7e 81       	ldd	r23, Y+6	; 0x06
 882:	8f 81       	ldd	r24, Y+7	; 0x07
 884:	98 85       	ldd	r25, Y+8	; 0x08
 886:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fixunssfsi>
 88a:	dc 01       	movw	r26, r24
 88c:	cb 01       	movw	r24, r22
 88e:	9a 87       	std	Y+10, r25	; 0x0a
 890:	89 87       	std	Y+9, r24	; 0x09
 892:	89 85       	ldd	r24, Y+9	; 0x09
 894:	9a 85       	ldd	r25, Y+10	; 0x0a
 896:	9e 87       	std	Y+14, r25	; 0x0e
 898:	8d 87       	std	Y+13, r24	; 0x0d
 89a:	8d 85       	ldd	r24, Y+13	; 0x0d
 89c:	9e 85       	ldd	r25, Y+14	; 0x0e
 89e:	01 97       	sbiw	r24, 0x01	; 1
 8a0:	f1 f7       	brne	.-4      	; 0x89e <__stack+0x3f>
 8a2:	9e 87       	std	Y+14, r25	; 0x0e
 8a4:	8d 87       	std	Y+13, r24	; 0x0d
			_delay_ms(700);
	}
 8a6:	89 cf       	rjmp	.-238    	; 0x7ba <main+0x32>

000008a8 <__cmpsf2>:
 8a8:	0e 94 88 04 	call	0x910	; 0x910 <__fp_cmp>
 8ac:	08 f4       	brcc	.+2      	; 0x8b0 <__cmpsf2+0x8>
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	08 95       	ret

000008b2 <__fixunssfsi>:
 8b2:	0e 94 b4 04 	call	0x968	; 0x968 <__fp_splitA>
 8b6:	88 f0       	brcs	.+34     	; 0x8da <__fixunssfsi+0x28>
 8b8:	9f 57       	subi	r25, 0x7F	; 127
 8ba:	98 f0       	brcs	.+38     	; 0x8e2 <__fixunssfsi+0x30>
 8bc:	b9 2f       	mov	r27, r25
 8be:	99 27       	eor	r25, r25
 8c0:	b7 51       	subi	r27, 0x17	; 23
 8c2:	b0 f0       	brcs	.+44     	; 0x8f0 <__fixunssfsi+0x3e>
 8c4:	e1 f0       	breq	.+56     	; 0x8fe <__fixunssfsi+0x4c>
 8c6:	66 0f       	add	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	1a f0       	brmi	.+6      	; 0x8d6 <__fixunssfsi+0x24>
 8d0:	ba 95       	dec	r27
 8d2:	c9 f7       	brne	.-14     	; 0x8c6 <__fixunssfsi+0x14>
 8d4:	14 c0       	rjmp	.+40     	; 0x8fe <__fixunssfsi+0x4c>
 8d6:	b1 30       	cpi	r27, 0x01	; 1
 8d8:	91 f0       	breq	.+36     	; 0x8fe <__fixunssfsi+0x4c>
 8da:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_zero>
 8de:	b1 e0       	ldi	r27, 0x01	; 1
 8e0:	08 95       	ret
 8e2:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__fp_zero>
 8e6:	67 2f       	mov	r22, r23
 8e8:	78 2f       	mov	r23, r24
 8ea:	88 27       	eor	r24, r24
 8ec:	b8 5f       	subi	r27, 0xF8	; 248
 8ee:	39 f0       	breq	.+14     	; 0x8fe <__fixunssfsi+0x4c>
 8f0:	b9 3f       	cpi	r27, 0xF9	; 249
 8f2:	cc f3       	brlt	.-14     	; 0x8e6 <__fixunssfsi+0x34>
 8f4:	86 95       	lsr	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b3 95       	inc	r27
 8fc:	d9 f7       	brne	.-10     	; 0x8f4 <__fixunssfsi+0x42>
 8fe:	3e f4       	brtc	.+14     	; 0x90e <__fixunssfsi+0x5c>
 900:	90 95       	com	r25
 902:	80 95       	com	r24
 904:	70 95       	com	r23
 906:	61 95       	neg	r22
 908:	7f 4f       	sbci	r23, 0xFF	; 255
 90a:	8f 4f       	sbci	r24, 0xFF	; 255
 90c:	9f 4f       	sbci	r25, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__fp_cmp>:
 910:	99 0f       	add	r25, r25
 912:	00 08       	sbc	r0, r0
 914:	55 0f       	add	r21, r21
 916:	aa 0b       	sbc	r26, r26
 918:	e0 e8       	ldi	r30, 0x80	; 128
 91a:	fe ef       	ldi	r31, 0xFE	; 254
 91c:	16 16       	cp	r1, r22
 91e:	17 06       	cpc	r1, r23
 920:	e8 07       	cpc	r30, r24
 922:	f9 07       	cpc	r31, r25
 924:	c0 f0       	brcs	.+48     	; 0x956 <__fp_cmp+0x46>
 926:	12 16       	cp	r1, r18
 928:	13 06       	cpc	r1, r19
 92a:	e4 07       	cpc	r30, r20
 92c:	f5 07       	cpc	r31, r21
 92e:	98 f0       	brcs	.+38     	; 0x956 <__fp_cmp+0x46>
 930:	62 1b       	sub	r22, r18
 932:	73 0b       	sbc	r23, r19
 934:	84 0b       	sbc	r24, r20
 936:	95 0b       	sbc	r25, r21
 938:	39 f4       	brne	.+14     	; 0x948 <__fp_cmp+0x38>
 93a:	0a 26       	eor	r0, r26
 93c:	61 f0       	breq	.+24     	; 0x956 <__fp_cmp+0x46>
 93e:	23 2b       	or	r18, r19
 940:	24 2b       	or	r18, r20
 942:	25 2b       	or	r18, r21
 944:	21 f4       	brne	.+8      	; 0x94e <__fp_cmp+0x3e>
 946:	08 95       	ret
 948:	0a 26       	eor	r0, r26
 94a:	09 f4       	brne	.+2      	; 0x94e <__fp_cmp+0x3e>
 94c:	a1 40       	sbci	r26, 0x01	; 1
 94e:	a6 95       	lsr	r26
 950:	8f ef       	ldi	r24, 0xFF	; 255
 952:	81 1d       	adc	r24, r1
 954:	81 1d       	adc	r24, r1
 956:	08 95       	ret

00000958 <__fp_split3>:
 958:	57 fd       	sbrc	r21, 7
 95a:	90 58       	subi	r25, 0x80	; 128
 95c:	44 0f       	add	r20, r20
 95e:	55 1f       	adc	r21, r21
 960:	59 f0       	breq	.+22     	; 0x978 <__fp_splitA+0x10>
 962:	5f 3f       	cpi	r21, 0xFF	; 255
 964:	71 f0       	breq	.+28     	; 0x982 <__fp_splitA+0x1a>
 966:	47 95       	ror	r20

00000968 <__fp_splitA>:
 968:	88 0f       	add	r24, r24
 96a:	97 fb       	bst	r25, 7
 96c:	99 1f       	adc	r25, r25
 96e:	61 f0       	breq	.+24     	; 0x988 <__fp_splitA+0x20>
 970:	9f 3f       	cpi	r25, 0xFF	; 255
 972:	79 f0       	breq	.+30     	; 0x992 <__fp_splitA+0x2a>
 974:	87 95       	ror	r24
 976:	08 95       	ret
 978:	12 16       	cp	r1, r18
 97a:	13 06       	cpc	r1, r19
 97c:	14 06       	cpc	r1, r20
 97e:	55 1f       	adc	r21, r21
 980:	f2 cf       	rjmp	.-28     	; 0x966 <__fp_split3+0xe>
 982:	46 95       	lsr	r20
 984:	f1 df       	rcall	.-30     	; 0x968 <__fp_splitA>
 986:	08 c0       	rjmp	.+16     	; 0x998 <__fp_splitA+0x30>
 988:	16 16       	cp	r1, r22
 98a:	17 06       	cpc	r1, r23
 98c:	18 06       	cpc	r1, r24
 98e:	99 1f       	adc	r25, r25
 990:	f1 cf       	rjmp	.-30     	; 0x974 <__fp_splitA+0xc>
 992:	86 95       	lsr	r24
 994:	71 05       	cpc	r23, r1
 996:	61 05       	cpc	r22, r1
 998:	08 94       	sec
 99a:	08 95       	ret

0000099c <__fp_zero>:
 99c:	e8 94       	clt

0000099e <__fp_szero>:
 99e:	bb 27       	eor	r27, r27
 9a0:	66 27       	eor	r22, r22
 9a2:	77 27       	eor	r23, r23
 9a4:	cb 01       	movw	r24, r22
 9a6:	97 f9       	bld	r25, 7
 9a8:	08 95       	ret

000009aa <__gesf2>:
 9aa:	0e 94 88 04 	call	0x910	; 0x910 <__fp_cmp>
 9ae:	08 f4       	brcc	.+2      	; 0x9b2 <__gesf2+0x8>
 9b0:	8f ef       	ldi	r24, 0xFF	; 255
 9b2:	08 95       	ret

000009b4 <__mulsf3>:
 9b4:	0e 94 ed 04 	call	0x9da	; 0x9da <__mulsf3x>
 9b8:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__fp_round>
 9bc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_pscA>
 9c0:	38 f0       	brcs	.+14     	; 0x9d0 <__mulsf3+0x1c>
 9c2:	0e 94 57 05 	call	0xaae	; 0xaae <__fp_pscB>
 9c6:	20 f0       	brcs	.+8      	; 0x9d0 <__mulsf3+0x1c>
 9c8:	95 23       	and	r25, r21
 9ca:	11 f0       	breq	.+4      	; 0x9d0 <__mulsf3+0x1c>
 9cc:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_inf>
 9d0:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_nan>
 9d4:	11 24       	eor	r1, r1
 9d6:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_szero>

000009da <__mulsf3x>:
 9da:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_split3>
 9de:	70 f3       	brcs	.-36     	; 0x9bc <__mulsf3+0x8>

000009e0 <__mulsf3_pse>:
 9e0:	95 9f       	mul	r25, r21
 9e2:	c1 f3       	breq	.-16     	; 0x9d4 <__mulsf3+0x20>
 9e4:	95 0f       	add	r25, r21
 9e6:	50 e0       	ldi	r21, 0x00	; 0
 9e8:	55 1f       	adc	r21, r21
 9ea:	62 9f       	mul	r22, r18
 9ec:	f0 01       	movw	r30, r0
 9ee:	72 9f       	mul	r23, r18
 9f0:	bb 27       	eor	r27, r27
 9f2:	f0 0d       	add	r31, r0
 9f4:	b1 1d       	adc	r27, r1
 9f6:	63 9f       	mul	r22, r19
 9f8:	aa 27       	eor	r26, r26
 9fa:	f0 0d       	add	r31, r0
 9fc:	b1 1d       	adc	r27, r1
 9fe:	aa 1f       	adc	r26, r26
 a00:	64 9f       	mul	r22, r20
 a02:	66 27       	eor	r22, r22
 a04:	b0 0d       	add	r27, r0
 a06:	a1 1d       	adc	r26, r1
 a08:	66 1f       	adc	r22, r22
 a0a:	82 9f       	mul	r24, r18
 a0c:	22 27       	eor	r18, r18
 a0e:	b0 0d       	add	r27, r0
 a10:	a1 1d       	adc	r26, r1
 a12:	62 1f       	adc	r22, r18
 a14:	73 9f       	mul	r23, r19
 a16:	b0 0d       	add	r27, r0
 a18:	a1 1d       	adc	r26, r1
 a1a:	62 1f       	adc	r22, r18
 a1c:	83 9f       	mul	r24, r19
 a1e:	a0 0d       	add	r26, r0
 a20:	61 1d       	adc	r22, r1
 a22:	22 1f       	adc	r18, r18
 a24:	74 9f       	mul	r23, r20
 a26:	33 27       	eor	r19, r19
 a28:	a0 0d       	add	r26, r0
 a2a:	61 1d       	adc	r22, r1
 a2c:	23 1f       	adc	r18, r19
 a2e:	84 9f       	mul	r24, r20
 a30:	60 0d       	add	r22, r0
 a32:	21 1d       	adc	r18, r1
 a34:	82 2f       	mov	r24, r18
 a36:	76 2f       	mov	r23, r22
 a38:	6a 2f       	mov	r22, r26
 a3a:	11 24       	eor	r1, r1
 a3c:	9f 57       	subi	r25, 0x7F	; 127
 a3e:	50 40       	sbci	r21, 0x00	; 0
 a40:	9a f0       	brmi	.+38     	; 0xa68 <__mulsf3_pse+0x88>
 a42:	f1 f0       	breq	.+60     	; 0xa80 <__mulsf3_pse+0xa0>
 a44:	88 23       	and	r24, r24
 a46:	4a f0       	brmi	.+18     	; 0xa5a <__mulsf3_pse+0x7a>
 a48:	ee 0f       	add	r30, r30
 a4a:	ff 1f       	adc	r31, r31
 a4c:	bb 1f       	adc	r27, r27
 a4e:	66 1f       	adc	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	91 50       	subi	r25, 0x01	; 1
 a56:	50 40       	sbci	r21, 0x00	; 0
 a58:	a9 f7       	brne	.-22     	; 0xa44 <__mulsf3_pse+0x64>
 a5a:	9e 3f       	cpi	r25, 0xFE	; 254
 a5c:	51 05       	cpc	r21, r1
 a5e:	80 f0       	brcs	.+32     	; 0xa80 <__mulsf3_pse+0xa0>
 a60:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_inf>
 a64:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_szero>
 a68:	5f 3f       	cpi	r21, 0xFF	; 255
 a6a:	e4 f3       	brlt	.-8      	; 0xa64 <__mulsf3_pse+0x84>
 a6c:	98 3e       	cpi	r25, 0xE8	; 232
 a6e:	d4 f3       	brlt	.-12     	; 0xa64 <__mulsf3_pse+0x84>
 a70:	86 95       	lsr	r24
 a72:	77 95       	ror	r23
 a74:	67 95       	ror	r22
 a76:	b7 95       	ror	r27
 a78:	f7 95       	ror	r31
 a7a:	e7 95       	ror	r30
 a7c:	9f 5f       	subi	r25, 0xFF	; 255
 a7e:	c1 f7       	brne	.-16     	; 0xa70 <__mulsf3_pse+0x90>
 a80:	fe 2b       	or	r31, r30
 a82:	88 0f       	add	r24, r24
 a84:	91 1d       	adc	r25, r1
 a86:	96 95       	lsr	r25
 a88:	87 95       	ror	r24
 a8a:	97 f9       	bld	r25, 7
 a8c:	08 95       	ret

00000a8e <__fp_inf>:
 a8e:	97 f9       	bld	r25, 7
 a90:	9f 67       	ori	r25, 0x7F	; 127
 a92:	80 e8       	ldi	r24, 0x80	; 128
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	60 e0       	ldi	r22, 0x00	; 0
 a98:	08 95       	ret

00000a9a <__fp_nan>:
 a9a:	9f ef       	ldi	r25, 0xFF	; 255
 a9c:	80 ec       	ldi	r24, 0xC0	; 192
 a9e:	08 95       	ret

00000aa0 <__fp_pscA>:
 aa0:	00 24       	eor	r0, r0
 aa2:	0a 94       	dec	r0
 aa4:	16 16       	cp	r1, r22
 aa6:	17 06       	cpc	r1, r23
 aa8:	18 06       	cpc	r1, r24
 aaa:	09 06       	cpc	r0, r25
 aac:	08 95       	ret

00000aae <__fp_pscB>:
 aae:	00 24       	eor	r0, r0
 ab0:	0a 94       	dec	r0
 ab2:	12 16       	cp	r1, r18
 ab4:	13 06       	cpc	r1, r19
 ab6:	14 06       	cpc	r1, r20
 ab8:	05 06       	cpc	r0, r21
 aba:	08 95       	ret

00000abc <__fp_round>:
 abc:	09 2e       	mov	r0, r25
 abe:	03 94       	inc	r0
 ac0:	00 0c       	add	r0, r0
 ac2:	11 f4       	brne	.+4      	; 0xac8 <__fp_round+0xc>
 ac4:	88 23       	and	r24, r24
 ac6:	52 f0       	brmi	.+20     	; 0xadc <__fp_round+0x20>
 ac8:	bb 0f       	add	r27, r27
 aca:	40 f4       	brcc	.+16     	; 0xadc <__fp_round+0x20>
 acc:	bf 2b       	or	r27, r31
 ace:	11 f4       	brne	.+4      	; 0xad4 <__fp_round+0x18>
 ad0:	60 ff       	sbrs	r22, 0
 ad2:	04 c0       	rjmp	.+8      	; 0xadc <__fp_round+0x20>
 ad4:	6f 5f       	subi	r22, 0xFF	; 255
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	08 95       	ret

00000ade <_exit>:
 ade:	f8 94       	cli

00000ae0 <__stop_program>:
 ae0:	ff cf       	rjmp	.-2      	; 0xae0 <__stop_program>
