
LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000014ac  00001520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001bcc  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001048  00000000  00000000  000030ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00004134  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004148  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  00004184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  0000466a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00004b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00004b27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 62 07 	call	0xec4	; 0xec4 <main>
      64:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_vidSetPortDirection>:
 */
#include "DIO_Reg.h"
#include "Bit_Math.h"
#include "DIO_Int.h"

void DIO_vidSetPortDirection(u8 port_no,u8 port_direction){
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	00 d0       	rcall	.+0      	; 0x72 <DIO_vidSetPortDirection+0x6>
      72:	cd b7       	in	r28, 0x3d	; 61
      74:	de b7       	in	r29, 0x3e	; 62
      76:	89 83       	std	Y+1, r24	; 0x01
      78:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no){
      7a:	89 81       	ldd	r24, Y+1	; 0x01
      7c:	88 2f       	mov	r24, r24
      7e:	90 e0       	ldi	r25, 0x00	; 0
      80:	81 30       	cpi	r24, 0x01	; 1
      82:	91 05       	cpc	r25, r1
      84:	91 f0       	breq	.+36     	; 0xaa <DIO_vidSetPortDirection+0x3e>
      86:	82 30       	cpi	r24, 0x02	; 2
      88:	91 05       	cpc	r25, r1
      8a:	1c f4       	brge	.+6      	; 0x92 <DIO_vidSetPortDirection+0x26>
      8c:	89 2b       	or	r24, r25
      8e:	39 f0       	breq	.+14     	; 0x9e <DIO_vidSetPortDirection+0x32>
	case PORTD_Reg:
		DDRD=port_direction;
		break;

	default :
		break;
      90:	1e c0       	rjmp	.+60     	; 0xce <DIO_vidSetPortDirection+0x62>
#include "DIO_Reg.h"
#include "Bit_Math.h"
#include "DIO_Int.h"

void DIO_vidSetPortDirection(u8 port_no,u8 port_direction){
	switch(port_no){
      92:	82 30       	cpi	r24, 0x02	; 2
      94:	91 05       	cpc	r25, r1
      96:	79 f0       	breq	.+30     	; 0xb6 <DIO_vidSetPortDirection+0x4a>
      98:	03 97       	sbiw	r24, 0x03	; 3
      9a:	99 f0       	breq	.+38     	; 0xc2 <DIO_vidSetPortDirection+0x56>
	case PORTD_Reg:
		DDRD=port_direction;
		break;

	default :
		break;
      9c:	18 c0       	rjmp	.+48     	; 0xce <DIO_vidSetPortDirection+0x62>
#include "DIO_Int.h"

void DIO_vidSetPortDirection(u8 port_no,u8 port_direction){
	switch(port_no){
	case PORTA_Reg:
		DDRA=port_direction;
      9e:	8a e3       	ldi	r24, 0x3A	; 58
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	2a 81       	ldd	r18, Y+2	; 0x02
      a4:	fc 01       	movw	r30, r24
      a6:	20 83       	st	Z, r18
		break;
      a8:	12 c0       	rjmp	.+36     	; 0xce <DIO_vidSetPortDirection+0x62>

	case PORTB_Reg:
		DDRB=port_direction;
      aa:	87 e3       	ldi	r24, 0x37	; 55
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	2a 81       	ldd	r18, Y+2	; 0x02
      b0:	fc 01       	movw	r30, r24
      b2:	20 83       	st	Z, r18
		break;
      b4:	0c c0       	rjmp	.+24     	; 0xce <DIO_vidSetPortDirection+0x62>

	case PORTC_Reg:
		DDRC=port_direction;
      b6:	84 e3       	ldi	r24, 0x34	; 52
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	2a 81       	ldd	r18, Y+2	; 0x02
      bc:	fc 01       	movw	r30, r24
      be:	20 83       	st	Z, r18
		break;
      c0:	06 c0       	rjmp	.+12     	; 0xce <DIO_vidSetPortDirection+0x62>

	case PORTD_Reg:
		DDRD=port_direction;
      c2:	81 e3       	ldi	r24, 0x31	; 49
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	2a 81       	ldd	r18, Y+2	; 0x02
      c8:	fc 01       	movw	r30, r24
      ca:	20 83       	st	Z, r18
		break;
      cc:	00 00       	nop

	default :
		break;
	}
}
      ce:	00 00       	nop
      d0:	0f 90       	pop	r0
      d2:	0f 90       	pop	r0
      d4:	df 91       	pop	r29
      d6:	cf 91       	pop	r28
      d8:	08 95       	ret

000000da <DIO_vidSetPinDirection>:

void DIO_vidSetPinDirection(u8 port_no, u8 pin_no, u8 pin_diection){
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	00 d0       	rcall	.+0      	; 0xe0 <DIO_vidSetPinDirection+0x6>
      e0:	1f 92       	push	r1
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	89 83       	std	Y+1, r24	; 0x01
      e8:	6a 83       	std	Y+2, r22	; 0x02
      ea:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_diection==OUTPUT){
      ec:	8b 81       	ldd	r24, Y+3	; 0x03
      ee:	81 30       	cpi	r24, 0x01	; 1
      f0:	09 f0       	breq	.+2      	; 0xf4 <DIO_vidSetPinDirection+0x1a>
      f2:	67 c0       	rjmp	.+206    	; 0x1c2 <DIO_vidSetPinDirection+0xe8>
		switch(port_no){
      f4:	89 81       	ldd	r24, Y+1	; 0x01
      f6:	88 2f       	mov	r24, r24
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	81 30       	cpi	r24, 0x01	; 1
      fc:	91 05       	cpc	r25, r1
      fe:	11 f1       	breq	.+68     	; 0x144 <DIO_vidSetPinDirection+0x6a>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	91 05       	cpc	r25, r1
     104:	1c f4       	brge	.+6      	; 0x10c <DIO_vidSetPinDirection+0x32>
     106:	89 2b       	or	r24, r25
     108:	41 f0       	breq	.+16     	; 0x11a <DIO_vidSetPinDirection+0x40>
     10a:	5b c0       	rjmp	.+182    	; 0x1c2 <DIO_vidSetPinDirection+0xe8>
     10c:	82 30       	cpi	r24, 0x02	; 2
     10e:	91 05       	cpc	r25, r1
     110:	71 f1       	breq	.+92     	; 0x16e <DIO_vidSetPinDirection+0x94>
     112:	03 97       	sbiw	r24, 0x03	; 3
     114:	09 f4       	brne	.+2      	; 0x118 <DIO_vidSetPinDirection+0x3e>
     116:	40 c0       	rjmp	.+128    	; 0x198 <DIO_vidSetPinDirection+0xbe>
     118:	54 c0       	rjmp	.+168    	; 0x1c2 <DIO_vidSetPinDirection+0xe8>
		case PORTA_Reg:
			Set_Bit(DDRA,pin_no);
     11a:	8a e3       	ldi	r24, 0x3A	; 58
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	2a e3       	ldi	r18, 0x3A	; 58
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	62 2f       	mov	r22, r18
     128:	2a 81       	ldd	r18, Y+2	; 0x02
     12a:	42 2f       	mov	r20, r18
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_vidSetPinDirection+0x5e>
     134:	22 0f       	add	r18, r18
     136:	33 1f       	adc	r19, r19
     138:	4a 95       	dec	r20
     13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_vidSetPinDirection+0x5a>
     13c:	26 2b       	or	r18, r22
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
			break;
     142:	3f c0       	rjmp	.+126    	; 0x1c2 <DIO_vidSetPinDirection+0xe8>
		case PORTB_Reg:
			Set_Bit(DDRB,pin_no);
     144:	87 e3       	ldi	r24, 0x37	; 55
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	27 e3       	ldi	r18, 0x37	; 55
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	f9 01       	movw	r30, r18
     14e:	20 81       	ld	r18, Z
     150:	62 2f       	mov	r22, r18
     152:	2a 81       	ldd	r18, Y+2	; 0x02
     154:	42 2f       	mov	r20, r18
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	21 e0       	ldi	r18, 0x01	; 1
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_vidSetPinDirection+0x88>
     15e:	22 0f       	add	r18, r18
     160:	33 1f       	adc	r19, r19
     162:	4a 95       	dec	r20
     164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_vidSetPinDirection+0x84>
     166:	26 2b       	or	r18, r22
     168:	fc 01       	movw	r30, r24
     16a:	20 83       	st	Z, r18
			break;
     16c:	2a c0       	rjmp	.+84     	; 0x1c2 <DIO_vidSetPinDirection+0xe8>
		case PORTC_Reg:
			Set_Bit(DDRC,pin_no);
     16e:	84 e3       	ldi	r24, 0x34	; 52
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	24 e3       	ldi	r18, 0x34	; 52
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	f9 01       	movw	r30, r18
     178:	20 81       	ld	r18, Z
     17a:	62 2f       	mov	r22, r18
     17c:	2a 81       	ldd	r18, Y+2	; 0x02
     17e:	42 2f       	mov	r20, r18
     180:	50 e0       	ldi	r21, 0x00	; 0
     182:	21 e0       	ldi	r18, 0x01	; 1
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vidSetPinDirection+0xb2>
     188:	22 0f       	add	r18, r18
     18a:	33 1f       	adc	r19, r19
     18c:	4a 95       	dec	r20
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vidSetPinDirection+0xae>
     190:	26 2b       	or	r18, r22
     192:	fc 01       	movw	r30, r24
     194:	20 83       	st	Z, r18
			break;
     196:	15 c0       	rjmp	.+42     	; 0x1c2 <DIO_vidSetPinDirection+0xe8>

		case PORTD_Reg:
			Set_Bit(DDRD,pin_no);
     198:	81 e3       	ldi	r24, 0x31	; 49
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	21 e3       	ldi	r18, 0x31	; 49
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	62 2f       	mov	r22, r18
     1a6:	2a 81       	ldd	r18, Y+2	; 0x02
     1a8:	42 2f       	mov	r20, r18
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_vidSetPinDirection+0xdc>
     1b2:	22 0f       	add	r18, r18
     1b4:	33 1f       	adc	r19, r19
     1b6:	4a 95       	dec	r20
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_vidSetPinDirection+0xd8>
     1ba:	26 2b       	or	r18, r22
     1bc:	fc 01       	movw	r30, r24
     1be:	20 83       	st	Z, r18
			break;
     1c0:	00 00       	nop
		}
	}
	if(pin_diection==INPUT){
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	88 23       	and	r24, r24
     1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_vidSetPinDirection+0xf0>
     1c8:	6b c0       	rjmp	.+214    	; 0x2a0 <DIO_vidSetPinDirection+0x1c6>
		switch(port_no){
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	88 2f       	mov	r24, r24
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	91 05       	cpc	r25, r1
     1d4:	19 f1       	breq	.+70     	; 0x21c <DIO_vidSetPinDirection+0x142>
     1d6:	82 30       	cpi	r24, 0x02	; 2
     1d8:	91 05       	cpc	r25, r1
     1da:	1c f4       	brge	.+6      	; 0x1e2 <DIO_vidSetPinDirection+0x108>
     1dc:	89 2b       	or	r24, r25
     1de:	41 f0       	breq	.+16     	; 0x1f0 <DIO_vidSetPinDirection+0x116>
		case PORTD_Reg:
			Clr_Bit(DDRD,pin_no);
			break;
		}
	}
}
     1e0:	5f c0       	rjmp	.+190    	; 0x2a0 <DIO_vidSetPinDirection+0x1c6>
			Set_Bit(DDRD,pin_no);
			break;
		}
	}
	if(pin_diection==INPUT){
		switch(port_no){
     1e2:	82 30       	cpi	r24, 0x02	; 2
     1e4:	91 05       	cpc	r25, r1
     1e6:	81 f1       	breq	.+96     	; 0x248 <DIO_vidSetPinDirection+0x16e>
     1e8:	03 97       	sbiw	r24, 0x03	; 3
     1ea:	09 f4       	brne	.+2      	; 0x1ee <DIO_vidSetPinDirection+0x114>
     1ec:	43 c0       	rjmp	.+134    	; 0x274 <DIO_vidSetPinDirection+0x19a>
		case PORTD_Reg:
			Clr_Bit(DDRD,pin_no);
			break;
		}
	}
}
     1ee:	58 c0       	rjmp	.+176    	; 0x2a0 <DIO_vidSetPinDirection+0x1c6>
		}
	}
	if(pin_diection==INPUT){
		switch(port_no){
		case PORTA_Reg:
			Clr_Bit(DDRA,pin_no);
     1f0:	8a e3       	ldi	r24, 0x3A	; 58
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	2a e3       	ldi	r18, 0x3A	; 58
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	f9 01       	movw	r30, r18
     1fa:	20 81       	ld	r18, Z
     1fc:	62 2f       	mov	r22, r18
     1fe:	2a 81       	ldd	r18, Y+2	; 0x02
     200:	42 2f       	mov	r20, r18
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	21 e0       	ldi	r18, 0x01	; 1
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_vidSetPinDirection+0x134>
     20a:	22 0f       	add	r18, r18
     20c:	33 1f       	adc	r19, r19
     20e:	4a 95       	dec	r20
     210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_vidSetPinDirection+0x130>
     212:	20 95       	com	r18
     214:	26 23       	and	r18, r22
     216:	fc 01       	movw	r30, r24
     218:	20 83       	st	Z, r18
			break;
     21a:	42 c0       	rjmp	.+132    	; 0x2a0 <DIO_vidSetPinDirection+0x1c6>
		case PORTB_Reg:
			Clr_Bit(DDRB,pin_no);
     21c:	87 e3       	ldi	r24, 0x37	; 55
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	27 e3       	ldi	r18, 0x37	; 55
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	f9 01       	movw	r30, r18
     226:	20 81       	ld	r18, Z
     228:	62 2f       	mov	r22, r18
     22a:	2a 81       	ldd	r18, Y+2	; 0x02
     22c:	42 2f       	mov	r20, r18
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	21 e0       	ldi	r18, 0x01	; 1
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vidSetPinDirection+0x160>
     236:	22 0f       	add	r18, r18
     238:	33 1f       	adc	r19, r19
     23a:	4a 95       	dec	r20
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vidSetPinDirection+0x15c>
     23e:	20 95       	com	r18
     240:	26 23       	and	r18, r22
     242:	fc 01       	movw	r30, r24
     244:	20 83       	st	Z, r18
			break;
     246:	2c c0       	rjmp	.+88     	; 0x2a0 <DIO_vidSetPinDirection+0x1c6>
		case PORTC_Reg:
			Clr_Bit(DDRC,pin_no);
     248:	84 e3       	ldi	r24, 0x34	; 52
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	24 e3       	ldi	r18, 0x34	; 52
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	f9 01       	movw	r30, r18
     252:	20 81       	ld	r18, Z
     254:	62 2f       	mov	r22, r18
     256:	2a 81       	ldd	r18, Y+2	; 0x02
     258:	42 2f       	mov	r20, r18
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_vidSetPinDirection+0x18c>
     262:	22 0f       	add	r18, r18
     264:	33 1f       	adc	r19, r19
     266:	4a 95       	dec	r20
     268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_vidSetPinDirection+0x188>
     26a:	20 95       	com	r18
     26c:	26 23       	and	r18, r22
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
			break;
     272:	16 c0       	rjmp	.+44     	; 0x2a0 <DIO_vidSetPinDirection+0x1c6>

		case PORTD_Reg:
			Clr_Bit(DDRD,pin_no);
     274:	81 e3       	ldi	r24, 0x31	; 49
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	21 e3       	ldi	r18, 0x31	; 49
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	f9 01       	movw	r30, r18
     27e:	20 81       	ld	r18, Z
     280:	62 2f       	mov	r22, r18
     282:	2a 81       	ldd	r18, Y+2	; 0x02
     284:	42 2f       	mov	r20, r18
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	21 e0       	ldi	r18, 0x01	; 1
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_vidSetPinDirection+0x1b8>
     28e:	22 0f       	add	r18, r18
     290:	33 1f       	adc	r19, r19
     292:	4a 95       	dec	r20
     294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_vidSetPinDirection+0x1b4>
     296:	20 95       	com	r18
     298:	26 23       	and	r18, r22
     29a:	fc 01       	movw	r30, r24
     29c:	20 83       	st	Z, r18
			break;
     29e:	00 00       	nop
		}
	}
}
     2a0:	00 00       	nop
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <DIO_vidSetPORTValue>:

void DIO_vidSetPORTValue(u8 port_no,u8 port_value){
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <DIO_vidSetPORTValue+0x6>
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_no){
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	88 2f       	mov	r24, r24
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	91 05       	cpc	r25, r1
     2c6:	91 f0       	breq	.+36     	; 0x2ec <DIO_vidSetPORTValue+0x3e>
     2c8:	82 30       	cpi	r24, 0x02	; 2
     2ca:	91 05       	cpc	r25, r1
     2cc:	1c f4       	brge	.+6      	; 0x2d4 <DIO_vidSetPORTValue+0x26>
     2ce:	89 2b       	or	r24, r25
     2d0:	39 f0       	breq	.+14     	; 0x2e0 <DIO_vidSetPORTValue+0x32>
	case PORTD_Reg:
		PORTD=port_value;
		break;

	default:
		break;
     2d2:	1e c0       	rjmp	.+60     	; 0x310 <DIO_vidSetPORTValue+0x62>
		}
	}
}

void DIO_vidSetPORTValue(u8 port_no,u8 port_value){
	switch(port_no){
     2d4:	82 30       	cpi	r24, 0x02	; 2
     2d6:	91 05       	cpc	r25, r1
     2d8:	79 f0       	breq	.+30     	; 0x2f8 <DIO_vidSetPORTValue+0x4a>
     2da:	03 97       	sbiw	r24, 0x03	; 3
     2dc:	99 f0       	breq	.+38     	; 0x304 <DIO_vidSetPORTValue+0x56>
	case PORTD_Reg:
		PORTD=port_value;
		break;

	default:
		break;
     2de:	18 c0       	rjmp	.+48     	; 0x310 <DIO_vidSetPORTValue+0x62>
}

void DIO_vidSetPORTValue(u8 port_no,u8 port_value){
	switch(port_no){
	case PORTA_Reg:
		PORTA=port_value;
     2e0:	8b e3       	ldi	r24, 0x3B	; 59
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	2a 81       	ldd	r18, Y+2	; 0x02
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
		break;
     2ea:	12 c0       	rjmp	.+36     	; 0x310 <DIO_vidSetPORTValue+0x62>

	case PORTB_Reg:
		PORTB=port_value;
     2ec:	88 e3       	ldi	r24, 0x38	; 56
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2a 81       	ldd	r18, Y+2	; 0x02
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
		break;
     2f6:	0c c0       	rjmp	.+24     	; 0x310 <DIO_vidSetPORTValue+0x62>

	case PORTC_Reg:
		PORTC=port_value;
     2f8:	85 e3       	ldi	r24, 0x35	; 53
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	fc 01       	movw	r30, r24
     300:	20 83       	st	Z, r18
		break;
     302:	06 c0       	rjmp	.+12     	; 0x310 <DIO_vidSetPORTValue+0x62>

	case PORTD_Reg:
		PORTD=port_value;
     304:	82 e3       	ldi	r24, 0x32	; 50
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	2a 81       	ldd	r18, Y+2	; 0x02
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
		break;
     30e:	00 00       	nop

	default:
		break;
	}
}
     310:	00 00       	nop
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <DIO_vidSetPinValue>:

void DIO_vidSetPinValue(u8 port_no,u8 pin_no,u8 pin_value){
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <DIO_vidSetPinValue+0x6>
     322:	1f 92       	push	r1
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	6a 83       	std	Y+2, r22	; 0x02
     32c:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_value==HIGH){
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	09 f0       	breq	.+2      	; 0x336 <DIO_vidSetPinValue+0x1a>
     334:	67 c0       	rjmp	.+206    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		switch(port_no){
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 2f       	mov	r24, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	91 05       	cpc	r25, r1
     340:	11 f1       	breq	.+68     	; 0x386 <DIO_vidSetPinValue+0x6a>
     342:	82 30       	cpi	r24, 0x02	; 2
     344:	91 05       	cpc	r25, r1
     346:	1c f4       	brge	.+6      	; 0x34e <DIO_vidSetPinValue+0x32>
     348:	89 2b       	or	r24, r25
     34a:	41 f0       	breq	.+16     	; 0x35c <DIO_vidSetPinValue+0x40>
     34c:	5b c0       	rjmp	.+182    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     34e:	82 30       	cpi	r24, 0x02	; 2
     350:	91 05       	cpc	r25, r1
     352:	71 f1       	breq	.+92     	; 0x3b0 <DIO_vidSetPinValue+0x94>
     354:	03 97       	sbiw	r24, 0x03	; 3
     356:	09 f4       	brne	.+2      	; 0x35a <DIO_vidSetPinValue+0x3e>
     358:	40 c0       	rjmp	.+128    	; 0x3da <DIO_vidSetPinValue+0xbe>
     35a:	54 c0       	rjmp	.+168    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		case PORTA_Reg:
			Set_Bit(PORTA,pin_no);
     35c:	8b e3       	ldi	r24, 0x3B	; 59
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	2b e3       	ldi	r18, 0x3B	; 59
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	f9 01       	movw	r30, r18
     366:	20 81       	ld	r18, Z
     368:	62 2f       	mov	r22, r18
     36a:	2a 81       	ldd	r18, Y+2	; 0x02
     36c:	42 2f       	mov	r20, r18
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_vidSetPinValue+0x5e>
     376:	22 0f       	add	r18, r18
     378:	33 1f       	adc	r19, r19
     37a:	4a 95       	dec	r20
     37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_vidSetPinValue+0x5a>
     37e:	26 2b       	or	r18, r22
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
			break;
     384:	3f c0       	rjmp	.+126    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		case PORTB_Reg:
			Set_Bit(PORTB,pin_no);
     386:	88 e3       	ldi	r24, 0x38	; 56
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	28 e3       	ldi	r18, 0x38	; 56
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	f9 01       	movw	r30, r18
     390:	20 81       	ld	r18, Z
     392:	62 2f       	mov	r22, r18
     394:	2a 81       	ldd	r18, Y+2	; 0x02
     396:	42 2f       	mov	r20, r18
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_vidSetPinValue+0x88>
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	4a 95       	dec	r20
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_vidSetPinValue+0x84>
     3a8:	26 2b       	or	r18, r22
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
			break;
     3ae:	2a c0       	rjmp	.+84     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		case PORTC_Reg:
			Set_Bit(PORTC,pin_no);
     3b0:	85 e3       	ldi	r24, 0x35	; 53
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	25 e3       	ldi	r18, 0x35	; 53
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	f9 01       	movw	r30, r18
     3ba:	20 81       	ld	r18, Z
     3bc:	62 2f       	mov	r22, r18
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	42 2f       	mov	r20, r18
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	21 e0       	ldi	r18, 0x01	; 1
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_vidSetPinValue+0xb2>
     3ca:	22 0f       	add	r18, r18
     3cc:	33 1f       	adc	r19, r19
     3ce:	4a 95       	dec	r20
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_vidSetPinValue+0xae>
     3d2:	26 2b       	or	r18, r22
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 83       	st	Z, r18
			break;
     3d8:	15 c0       	rjmp	.+42     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

		case PORTD_Reg:
			Set_Bit(PORTD,pin_no);
     3da:	82 e3       	ldi	r24, 0x32	; 50
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	22 e3       	ldi	r18, 0x32	; 50
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	f9 01       	movw	r30, r18
     3e4:	20 81       	ld	r18, Z
     3e6:	62 2f       	mov	r22, r18
     3e8:	2a 81       	ldd	r18, Y+2	; 0x02
     3ea:	42 2f       	mov	r20, r18
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	21 e0       	ldi	r18, 0x01	; 1
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_vidSetPinValue+0xdc>
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	4a 95       	dec	r20
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_vidSetPinValue+0xd8>
     3fc:	26 2b       	or	r18, r22
     3fe:	fc 01       	movw	r30, r24
     400:	20 83       	st	Z, r18
			break;
     402:	00 00       	nop
		}
	}
	if(pin_value==INPUT){
     404:	8b 81       	ldd	r24, Y+3	; 0x03
     406:	88 23       	and	r24, r24
     408:	09 f0       	breq	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	6b c0       	rjmp	.+214    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		switch(port_no){
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	88 2f       	mov	r24, r24
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	91 05       	cpc	r25, r1
     416:	19 f1       	breq	.+70     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     418:	82 30       	cpi	r24, 0x02	; 2
     41a:	91 05       	cpc	r25, r1
     41c:	1c f4       	brge	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41e:	89 2b       	or	r24, r25
     420:	41 f0       	breq	.+16     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		case PORTD_Reg:
			Clr_Bit(PORTD,pin_no);
			break;
		}
	}
}
     422:	5f c0       	rjmp	.+190    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			Set_Bit(PORTD,pin_no);
			break;
		}
	}
	if(pin_value==INPUT){
		switch(port_no){
     424:	82 30       	cpi	r24, 0x02	; 2
     426:	91 05       	cpc	r25, r1
     428:	81 f1       	breq	.+96     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     42a:	03 97       	sbiw	r24, 0x03	; 3
     42c:	09 f4       	brne	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42e:	43 c0       	rjmp	.+134    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		case PORTD_Reg:
			Clr_Bit(PORTD,pin_no);
			break;
		}
	}
}
     430:	58 c0       	rjmp	.+176    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		}
	}
	if(pin_value==INPUT){
		switch(port_no){
		case PORTA_Reg:
			Clr_Bit(PORTA,pin_no);
     432:	8b e3       	ldi	r24, 0x3B	; 59
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	2b e3       	ldi	r18, 0x3B	; 59
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	f9 01       	movw	r30, r18
     43c:	20 81       	ld	r18, Z
     43e:	62 2f       	mov	r22, r18
     440:	2a 81       	ldd	r18, Y+2	; 0x02
     442:	42 2f       	mov	r20, r18
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	21 e0       	ldi	r18, 0x01	; 1
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	22 0f       	add	r18, r18
     44e:	33 1f       	adc	r19, r19
     450:	4a 95       	dec	r20
     452:	e2 f7       	brpl	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     454:	20 95       	com	r18
     456:	26 23       	and	r18, r22
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
			break;
     45c:	42 c0       	rjmp	.+132    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		case PORTB_Reg:
			Clr_Bit(PORTB,pin_no);
     45e:	88 e3       	ldi	r24, 0x38	; 56
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	28 e3       	ldi	r18, 0x38	; 56
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	f9 01       	movw	r30, r18
     468:	20 81       	ld	r18, Z
     46a:	62 2f       	mov	r22, r18
     46c:	2a 81       	ldd	r18, Y+2	; 0x02
     46e:	42 2f       	mov	r20, r18
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	21 e0       	ldi	r18, 0x01	; 1
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	02 c0       	rjmp	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     478:	22 0f       	add	r18, r18
     47a:	33 1f       	adc	r19, r19
     47c:	4a 95       	dec	r20
     47e:	e2 f7       	brpl	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     480:	20 95       	com	r18
     482:	26 23       	and	r18, r22
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
			break;
     488:	2c c0       	rjmp	.+88     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		case PORTC_Reg:
			Clr_Bit(PORTC,pin_no);
     48a:	85 e3       	ldi	r24, 0x35	; 53
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	25 e3       	ldi	r18, 0x35	; 53
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	f9 01       	movw	r30, r18
     494:	20 81       	ld	r18, Z
     496:	62 2f       	mov	r22, r18
     498:	2a 81       	ldd	r18, Y+2	; 0x02
     49a:	42 2f       	mov	r20, r18
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a4:	22 0f       	add	r18, r18
     4a6:	33 1f       	adc	r19, r19
     4a8:	4a 95       	dec	r20
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4ac:	20 95       	com	r18
     4ae:	26 23       	and	r18, r22
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
			break;
     4b4:	16 c0       	rjmp	.+44     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>

		case PORTD_Reg:
			Clr_Bit(PORTD,pin_no);
     4b6:	82 e3       	ldi	r24, 0x32	; 50
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	22 e3       	ldi	r18, 0x32	; 50
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	f9 01       	movw	r30, r18
     4c0:	20 81       	ld	r18, Z
     4c2:	62 2f       	mov	r22, r18
     4c4:	2a 81       	ldd	r18, Y+2	; 0x02
     4c6:	42 2f       	mov	r20, r18
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	21 e0       	ldi	r18, 0x01	; 1
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4d0:	22 0f       	add	r18, r18
     4d2:	33 1f       	adc	r19, r19
     4d4:	4a 95       	dec	r20
     4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d8:	20 95       	com	r18
     4da:	26 23       	and	r18, r22
     4dc:	fc 01       	movw	r30, r24
     4de:	20 83       	st	Z, r18
			break;
     4e0:	00 00       	nop
		}
	}
}
     4e2:	00 00       	nop
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <DIO_vidGetPortValue>:

u8 DIO_vidGetPortValue(u8 port_no){
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	1f 92       	push	r1
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	89 83       	std	Y+1, r24	; 0x01
	switch (port_no){
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	88 2f       	mov	r24, r24
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	91 05       	cpc	r25, r1
     506:	89 f0       	breq	.+34     	; 0x52a <DIO_vidGetPortValue+0x3a>
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	91 05       	cpc	r25, r1
     50c:	1c f4       	brge	.+6      	; 0x514 <DIO_vidGetPortValue+0x24>
     50e:	89 2b       	or	r24, r25
     510:	39 f0       	breq	.+14     	; 0x520 <DIO_vidGetPortValue+0x30>
     512:	1a c0       	rjmp	.+52     	; 0x548 <DIO_vidGetPortValue+0x58>
     514:	82 30       	cpi	r24, 0x02	; 2
     516:	91 05       	cpc	r25, r1
     518:	69 f0       	breq	.+26     	; 0x534 <DIO_vidGetPortValue+0x44>
     51a:	03 97       	sbiw	r24, 0x03	; 3
     51c:	81 f0       	breq	.+32     	; 0x53e <DIO_vidGetPortValue+0x4e>
     51e:	14 c0       	rjmp	.+40     	; 0x548 <DIO_vidGetPortValue+0x58>
	case PORTA_Reg:
		return PINA;
     520:	89 e3       	ldi	r24, 0x39	; 57
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	fc 01       	movw	r30, r24
     526:	80 81       	ld	r24, Z
     528:	10 c0       	rjmp	.+32     	; 0x54a <DIO_vidGetPortValue+0x5a>
		break;

	case PORTB_Reg:
		return PINB;
     52a:	86 e3       	ldi	r24, 0x36	; 54
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	80 81       	ld	r24, Z
     532:	0b c0       	rjmp	.+22     	; 0x54a <DIO_vidGetPortValue+0x5a>
		break;

	case PORTC_Reg:
		return PINC;
     534:	83 e3       	ldi	r24, 0x33	; 51
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	fc 01       	movw	r30, r24
     53a:	80 81       	ld	r24, Z
     53c:	06 c0       	rjmp	.+12     	; 0x54a <DIO_vidGetPortValue+0x5a>
		break;

	case PORTD_Reg:
		return PIND;
     53e:	80 e3       	ldi	r24, 0x30	; 48
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	fc 01       	movw	r30, r24
     544:	80 81       	ld	r24, Z
     546:	01 c0       	rjmp	.+2      	; 0x54a <DIO_vidGetPortValue+0x5a>
		break;

	default:
		return 0;
     548:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     54a:	0f 90       	pop	r0
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <DIO_vidGetPinValue>:

u8 DIO_vidGetPinValue(u8 port_no, u8 pin_no){
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <DIO_vidGetPinValue+0x6>
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	89 83       	std	Y+1, r24	; 0x01
     55e:	6a 83       	std	Y+2, r22	; 0x02

	switch (port_no){
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	88 2f       	mov	r24, r24
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	91 05       	cpc	r25, r1
     56a:	e1 f0       	breq	.+56     	; 0x5a4 <DIO_vidGetPinValue+0x52>
     56c:	82 30       	cpi	r24, 0x02	; 2
     56e:	91 05       	cpc	r25, r1
     570:	1c f4       	brge	.+6      	; 0x578 <DIO_vidGetPinValue+0x26>
     572:	89 2b       	or	r24, r25
     574:	39 f0       	breq	.+14     	; 0x584 <DIO_vidGetPinValue+0x32>
     576:	46 c0       	rjmp	.+140    	; 0x604 <DIO_vidGetPinValue+0xb2>
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	91 05       	cpc	r25, r1
     57c:	19 f1       	breq	.+70     	; 0x5c4 <DIO_vidGetPinValue+0x72>
     57e:	03 97       	sbiw	r24, 0x03	; 3
     580:	89 f1       	breq	.+98     	; 0x5e4 <DIO_vidGetPinValue+0x92>
     582:	40 c0       	rjmp	.+128    	; 0x604 <DIO_vidGetPinValue+0xb2>
	case PORTA_Reg:
		return Get_Bit(PINA,pin_no);
     584:	89 e3       	ldi	r24, 0x39	; 57
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	2a 81       	ldd	r18, Y+2	; 0x02
     592:	22 2f       	mov	r18, r18
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_vidGetPinValue+0x4a>
     598:	95 95       	asr	r25
     59a:	87 95       	ror	r24
     59c:	2a 95       	dec	r18
     59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_vidGetPinValue+0x46>
     5a0:	81 70       	andi	r24, 0x01	; 1
     5a2:	31 c0       	rjmp	.+98     	; 0x606 <DIO_vidGetPinValue+0xb4>
		break;

	case PORTB_Reg:
		return Get_Bit(PINB,pin_no);
     5a4:	86 e3       	ldi	r24, 0x36	; 54
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	fc 01       	movw	r30, r24
     5aa:	80 81       	ld	r24, Z
     5ac:	88 2f       	mov	r24, r24
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	2a 81       	ldd	r18, Y+2	; 0x02
     5b2:	22 2f       	mov	r18, r18
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_vidGetPinValue+0x6a>
     5b8:	95 95       	asr	r25
     5ba:	87 95       	ror	r24
     5bc:	2a 95       	dec	r18
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_vidGetPinValue+0x66>
     5c0:	81 70       	andi	r24, 0x01	; 1
     5c2:	21 c0       	rjmp	.+66     	; 0x606 <DIO_vidGetPinValue+0xb4>
		break;

	case PORTC_Reg:
		return Get_Bit(PINC,pin_no);
     5c4:	83 e3       	ldi	r24, 0x33	; 51
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 81       	ld	r24, Z
     5cc:	88 2f       	mov	r24, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	2a 81       	ldd	r18, Y+2	; 0x02
     5d2:	22 2f       	mov	r18, r18
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_vidGetPinValue+0x8a>
     5d8:	95 95       	asr	r25
     5da:	87 95       	ror	r24
     5dc:	2a 95       	dec	r18
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_vidGetPinValue+0x86>
     5e0:	81 70       	andi	r24, 0x01	; 1
     5e2:	11 c0       	rjmp	.+34     	; 0x606 <DIO_vidGetPinValue+0xb4>
		break;

	case PORTD_Reg:
		return Get_Bit(PIND,pin_no);
     5e4:	80 e3       	ldi	r24, 0x30	; 48
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	80 81       	ld	r24, Z
     5ec:	88 2f       	mov	r24, r24
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	2a 81       	ldd	r18, Y+2	; 0x02
     5f2:	22 2f       	mov	r18, r18
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_vidGetPinValue+0xaa>
     5f8:	95 95       	asr	r25
     5fa:	87 95       	ror	r24
     5fc:	2a 95       	dec	r18
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_vidGetPinValue+0xa6>
     600:	81 70       	andi	r24, 0x01	; 1
     602:	01 c0       	rjmp	.+2      	; 0x606 <DIO_vidGetPinValue+0xb4>
		break;

	default:
		return 0xff;
     604:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <DIO_vidTogglePin>:
void DIO_vidTogglePin(u8 u8Port_NO,u8 u8Pin_NO)
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	00 d0       	rcall	.+0      	; 0x616 <DIO_vidTogglePin+0x6>
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	89 83       	std	Y+1, r24	; 0x01
     61c:	6a 83       	std	Y+2, r22	; 0x02
	switch (u8Port_NO){
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	88 2f       	mov	r24, r24
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	91 05       	cpc	r25, r1
     628:	11 f1       	breq	.+68     	; 0x66e <DIO_vidTogglePin+0x5e>
     62a:	82 30       	cpi	r24, 0x02	; 2
     62c:	91 05       	cpc	r25, r1
     62e:	1c f4       	brge	.+6      	; 0x636 <DIO_vidTogglePin+0x26>
     630:	89 2b       	or	r24, r25
     632:	41 f0       	breq	.+16     	; 0x644 <DIO_vidTogglePin+0x34>
	case PORTD_Reg:
		Toggle_Bit(PORTD,u8Pin_NO);
		break;

	default:
		break;
     634:	5b c0       	rjmp	.+182    	; 0x6ec <DIO_vidTogglePin+0xdc>
		return 0xff;
	}
}
void DIO_vidTogglePin(u8 u8Port_NO,u8 u8Pin_NO)
{
	switch (u8Port_NO){
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	91 05       	cpc	r25, r1
     63a:	71 f1       	breq	.+92     	; 0x698 <DIO_vidTogglePin+0x88>
     63c:	03 97       	sbiw	r24, 0x03	; 3
     63e:	09 f4       	brne	.+2      	; 0x642 <DIO_vidTogglePin+0x32>
     640:	40 c0       	rjmp	.+128    	; 0x6c2 <DIO_vidTogglePin+0xb2>
	case PORTD_Reg:
		Toggle_Bit(PORTD,u8Pin_NO);
		break;

	default:
		break;
     642:	54 c0       	rjmp	.+168    	; 0x6ec <DIO_vidTogglePin+0xdc>
}
void DIO_vidTogglePin(u8 u8Port_NO,u8 u8Pin_NO)
{
	switch (u8Port_NO){
	case PORTA_Reg:
		Toggle_Bit(PORTA,u8Pin_NO);
     644:	8b e3       	ldi	r24, 0x3B	; 59
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	2b e3       	ldi	r18, 0x3B	; 59
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	62 2f       	mov	r22, r18
     652:	2a 81       	ldd	r18, Y+2	; 0x02
     654:	42 2f       	mov	r20, r18
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_vidTogglePin+0x52>
     65e:	22 0f       	add	r18, r18
     660:	33 1f       	adc	r19, r19
     662:	4a 95       	dec	r20
     664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_vidTogglePin+0x4e>
     666:	26 27       	eor	r18, r22
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
		break;
     66c:	3f c0       	rjmp	.+126    	; 0x6ec <DIO_vidTogglePin+0xdc>

	case PORTB_Reg:
		Toggle_Bit(PORTB,u8Pin_NO);
     66e:	88 e3       	ldi	r24, 0x38	; 56
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	28 e3       	ldi	r18, 0x38	; 56
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	f9 01       	movw	r30, r18
     678:	20 81       	ld	r18, Z
     67a:	62 2f       	mov	r22, r18
     67c:	2a 81       	ldd	r18, Y+2	; 0x02
     67e:	42 2f       	mov	r20, r18
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_vidTogglePin+0x7c>
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	4a 95       	dec	r20
     68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_vidTogglePin+0x78>
     690:	26 27       	eor	r18, r22
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
		break;
     696:	2a c0       	rjmp	.+84     	; 0x6ec <DIO_vidTogglePin+0xdc>

	case PORTC_Reg:
		Toggle_Bit(PORTC,u8Pin_NO);
     698:	85 e3       	ldi	r24, 0x35	; 53
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	25 e3       	ldi	r18, 0x35	; 53
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	62 2f       	mov	r22, r18
     6a6:	2a 81       	ldd	r18, Y+2	; 0x02
     6a8:	42 2f       	mov	r20, r18
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_vidTogglePin+0xa6>
     6b2:	22 0f       	add	r18, r18
     6b4:	33 1f       	adc	r19, r19
     6b6:	4a 95       	dec	r20
     6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_vidTogglePin+0xa2>
     6ba:	26 27       	eor	r18, r22
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
		break;
     6c0:	15 c0       	rjmp	.+42     	; 0x6ec <DIO_vidTogglePin+0xdc>

	case PORTD_Reg:
		Toggle_Bit(PORTD,u8Pin_NO);
     6c2:	82 e3       	ldi	r24, 0x32	; 50
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	22 e3       	ldi	r18, 0x32	; 50
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	62 2f       	mov	r22, r18
     6d0:	2a 81       	ldd	r18, Y+2	; 0x02
     6d2:	42 2f       	mov	r20, r18
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_vidTogglePin+0xd0>
     6dc:	22 0f       	add	r18, r18
     6de:	33 1f       	adc	r19, r19
     6e0:	4a 95       	dec	r20
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_vidTogglePin+0xcc>
     6e4:	26 27       	eor	r18, r22
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 83       	st	Z, r18
		break;
     6ea:	00 00       	nop

	default:
		break;
	}
}
     6ec:	00 00       	nop
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret

000006f8 <LCD_vidWriteData>:
#include "LCD_Confg.h"
#include "DIO_Int.h"
#include <util/delay.h>

void LCD_vidWriteData(u8 u8Data)
{
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	2f 97       	sbiw	r28, 0x0f	; 15
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	8f 87       	std	Y+15, r24	; 0x0f
	// RS=1
	DIO_vidSetPinValue(LCD_RSPORT,LCD_RSPIN,HIGH);
     70e:	41 e0       	ldi	r20, 0x01	; 1
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_vidSetPinValue>
	// R/W=0
	DIO_vidSetPinValue(LCD_RWPORT,LCD_RWPIN,LOW);
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_vidSetPinValue>
	// Data->data lines
	DIO_vidSetPORTValue(LCD_DATAPORT,u8Data) ;
     722:	6f 85       	ldd	r22, Y+15	; 0x0f
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_vidSetPORTValue>
	//Enable=1
	DIO_vidSetPinValue(LCD_ENPORT,LCD_ENPIN,HIGH);
     72a:	41 e0       	ldi	r20, 0x01	; 1
     72c:	62 e0       	ldi	r22, 0x02	; 2
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_vidSetPinValue>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	a0 ea       	ldi	r26, 0xA0	; 160
     73a:	b0 e4       	ldi	r27, 0x40	; 64
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	9a 83       	std	Y+2, r25	; 0x02
     740:	ab 83       	std	Y+3, r26	; 0x03
     742:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e8       	ldi	r19, 0x80	; 128
     748:	4b e3       	ldi	r20, 0x3B	; 59
     74a:	55 e4       	ldi	r21, 0x45	; 69
     74c:	69 81       	ldd	r22, Y+1	; 0x01
     74e:	7a 81       	ldd	r23, Y+2	; 0x02
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	9c 81       	ldd	r25, Y+4	; 0x04
     754:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	8d 83       	std	Y+5, r24	; 0x05
     75e:	9e 83       	std	Y+6, r25	; 0x06
     760:	af 83       	std	Y+7, r26	; 0x07
     762:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	40 e8       	ldi	r20, 0x80	; 128
     76a:	5f e3       	ldi	r21, 0x3F	; 63
     76c:	6d 81       	ldd	r22, Y+5	; 0x05
     76e:	7e 81       	ldd	r23, Y+6	; 0x06
     770:	8f 81       	ldd	r24, Y+7	; 0x07
     772:	98 85       	ldd	r25, Y+8	; 0x08
     774:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
     778:	88 23       	and	r24, r24
     77a:	2c f4       	brge	.+10     	; 0x786 <LCD_vidWriteData+0x8e>
		__ticks = 1;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	9a 87       	std	Y+10, r25	; 0x0a
     782:	89 87       	std	Y+9, r24	; 0x09
     784:	3f c0       	rjmp	.+126    	; 0x804 <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	3f ef       	ldi	r19, 0xFF	; 255
     78a:	4f e7       	ldi	r20, 0x7F	; 127
     78c:	57 e4       	ldi	r21, 0x47	; 71
     78e:	6d 81       	ldd	r22, Y+5	; 0x05
     790:	7e 81       	ldd	r23, Y+6	; 0x06
     792:	8f 81       	ldd	r24, Y+7	; 0x07
     794:	98 85       	ldd	r25, Y+8	; 0x08
     796:	0e 94 ba 09 	call	0x1374	; 0x1374 <__gesf2>
     79a:	18 16       	cp	r1, r24
     79c:	4c f5       	brge	.+82     	; 0x7f0 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e2       	ldi	r20, 0x20	; 32
     7a4:	51 e4       	ldi	r21, 0x41	; 65
     7a6:	69 81       	ldd	r22, Y+1	; 0x01
     7a8:	7a 81       	ldd	r23, Y+2	; 0x02
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	9c 81       	ldd	r25, Y+4	; 0x04
     7ae:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     7b2:	dc 01       	movw	r26, r24
     7b4:	cb 01       	movw	r24, r22
     7b6:	bc 01       	movw	r22, r24
     7b8:	cd 01       	movw	r24, r26
     7ba:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     7be:	dc 01       	movw	r26, r24
     7c0:	cb 01       	movw	r24, r22
     7c2:	9a 87       	std	Y+10, r25	; 0x0a
     7c4:	89 87       	std	Y+9, r24	; 0x09
     7c6:	0f c0       	rjmp	.+30     	; 0x7e6 <LCD_vidWriteData+0xee>
     7c8:	8c e2       	ldi	r24, 0x2C	; 44
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	9c 87       	std	Y+12, r25	; 0x0c
     7ce:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     7d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <LCD_vidWriteData+0xdc>
     7d8:	9c 87       	std	Y+12, r25	; 0x0c
     7da:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7dc:	89 85       	ldd	r24, Y+9	; 0x09
     7de:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	9a 87       	std	Y+10, r25	; 0x0a
     7e4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e6:	89 85       	ldd	r24, Y+9	; 0x09
     7e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ea:	89 2b       	or	r24, r25
     7ec:	69 f7       	brne	.-38     	; 0x7c8 <LCD_vidWriteData+0xd0>
     7ee:	14 c0       	rjmp	.+40     	; 0x818 <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7f0:	6d 81       	ldd	r22, Y+5	; 0x05
     7f2:	7e 81       	ldd	r23, Y+6	; 0x06
     7f4:	8f 81       	ldd	r24, Y+7	; 0x07
     7f6:	98 85       	ldd	r25, Y+8	; 0x08
     7f8:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     7fc:	dc 01       	movw	r26, r24
     7fe:	cb 01       	movw	r24, r22
     800:	9a 87       	std	Y+10, r25	; 0x0a
     802:	89 87       	std	Y+9, r24	; 0x09
     804:	89 85       	ldd	r24, Y+9	; 0x09
     806:	9a 85       	ldd	r25, Y+10	; 0x0a
     808:	9e 87       	std	Y+14, r25	; 0x0e
     80a:	8d 87       	std	Y+13, r24	; 0x0d
     80c:	8d 85       	ldd	r24, Y+13	; 0x0d
     80e:	9e 85       	ldd	r25, Y+14	; 0x0e
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <LCD_vidWriteData+0x118>
     814:	9e 87       	std	Y+14, r25	; 0x0e
     816:	8d 87       	std	Y+13, r24	; 0x0d
	//delay 5 ms
	_delay_ms(5);
	//Disable
	DIO_vidSetPinValue(LCD_ENPORT,LCD_ENPIN,LOW);
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	62 e0       	ldi	r22, 0x02	; 2
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_vidSetPinValue>
}
     822:	00 00       	nop
     824:	2f 96       	adiw	r28, 0x0f	; 15
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <LCD_vidWriteCommund>:

void LCD_vidWriteCommund(u8 u8Commuand)
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	2f 97       	sbiw	r28, 0x0f	; 15
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
     84a:	8f 87       	std	Y+15, r24	; 0x0f
	// RS=0
	DIO_vidSetPinValue(LCD_RSPORT,LCD_RSPIN,LOW);
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_vidSetPinValue>
	// R/W=0
	DIO_vidSetPinValue(LCD_RWPORT,LCD_RWPIN,LOW);
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_vidSetPinValue>
	// Command->data lines
	DIO_vidSetPORTValue(LCD_DATAPORT,u8Commuand) ;
     860:	6f 85       	ldd	r22, Y+15	; 0x0f
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	0e 94 57 01 	call	0x2ae	; 0x2ae <DIO_vidSetPORTValue>
	///Enable=1
	DIO_vidSetPinValue(LCD_ENPORT,LCD_ENPIN,HIGH);
     868:	41 e0       	ldi	r20, 0x01	; 1
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_vidSetPinValue>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	a0 ea       	ldi	r26, 0xA0	; 160
     878:	b0 e4       	ldi	r27, 0x40	; 64
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	9a 83       	std	Y+2, r25	; 0x02
     87e:	ab 83       	std	Y+3, r26	; 0x03
     880:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e8       	ldi	r19, 0x80	; 128
     886:	4b e3       	ldi	r20, 0x3B	; 59
     888:	55 e4       	ldi	r21, 0x45	; 69
     88a:	69 81       	ldd	r22, Y+1	; 0x01
     88c:	7a 81       	ldd	r23, Y+2	; 0x02
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	9c 81       	ldd	r25, Y+4	; 0x04
     892:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	8d 83       	std	Y+5, r24	; 0x05
     89c:	9e 83       	std	Y+6, r25	; 0x06
     89e:	af 83       	std	Y+7, r26	; 0x07
     8a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e8       	ldi	r20, 0x80	; 128
     8a8:	5f e3       	ldi	r21, 0x3F	; 63
     8aa:	6d 81       	ldd	r22, Y+5	; 0x05
     8ac:	7e 81       	ldd	r23, Y+6	; 0x06
     8ae:	8f 81       	ldd	r24, Y+7	; 0x07
     8b0:	98 85       	ldd	r25, Y+8	; 0x08
     8b2:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
     8b6:	88 23       	and	r24, r24
     8b8:	2c f4       	brge	.+10     	; 0x8c4 <__stack+0x65>
		__ticks = 1;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	9a 87       	std	Y+10, r25	; 0x0a
     8c0:	89 87       	std	Y+9, r24	; 0x09
     8c2:	3f c0       	rjmp	.+126    	; 0x942 <__stack+0xe3>
	else if (__tmp > 65535)
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	3f ef       	ldi	r19, 0xFF	; 255
     8c8:	4f e7       	ldi	r20, 0x7F	; 127
     8ca:	57 e4       	ldi	r21, 0x47	; 71
     8cc:	6d 81       	ldd	r22, Y+5	; 0x05
     8ce:	7e 81       	ldd	r23, Y+6	; 0x06
     8d0:	8f 81       	ldd	r24, Y+7	; 0x07
     8d2:	98 85       	ldd	r25, Y+8	; 0x08
     8d4:	0e 94 ba 09 	call	0x1374	; 0x1374 <__gesf2>
     8d8:	18 16       	cp	r1, r24
     8da:	4c f5       	brge	.+82     	; 0x92e <__stack+0xcf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e2       	ldi	r20, 0x20	; 32
     8e2:	51 e4       	ldi	r21, 0x41	; 65
     8e4:	69 81       	ldd	r22, Y+1	; 0x01
     8e6:	7a 81       	ldd	r23, Y+2	; 0x02
     8e8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ea:	9c 81       	ldd	r25, Y+4	; 0x04
     8ec:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	bc 01       	movw	r22, r24
     8f6:	cd 01       	movw	r24, r26
     8f8:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     8fc:	dc 01       	movw	r26, r24
     8fe:	cb 01       	movw	r24, r22
     900:	9a 87       	std	Y+10, r25	; 0x0a
     902:	89 87       	std	Y+9, r24	; 0x09
     904:	0f c0       	rjmp	.+30     	; 0x924 <__stack+0xc5>
     906:	8c e2       	ldi	r24, 0x2C	; 44
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	9c 87       	std	Y+12, r25	; 0x0c
     90c:	8b 87       	std	Y+11, r24	; 0x0b
     90e:	8b 85       	ldd	r24, Y+11	; 0x0b
     910:	9c 85       	ldd	r25, Y+12	; 0x0c
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	f1 f7       	brne	.-4      	; 0x912 <__stack+0xb3>
     916:	9c 87       	std	Y+12, r25	; 0x0c
     918:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91a:	89 85       	ldd	r24, Y+9	; 0x09
     91c:	9a 85       	ldd	r25, Y+10	; 0x0a
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	9a 87       	std	Y+10, r25	; 0x0a
     922:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	9a 85       	ldd	r25, Y+10	; 0x0a
     928:	89 2b       	or	r24, r25
     92a:	69 f7       	brne	.-38     	; 0x906 <__stack+0xa7>
     92c:	14 c0       	rjmp	.+40     	; 0x956 <__stack+0xf7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     92e:	6d 81       	ldd	r22, Y+5	; 0x05
     930:	7e 81       	ldd	r23, Y+6	; 0x06
     932:	8f 81       	ldd	r24, Y+7	; 0x07
     934:	98 85       	ldd	r25, Y+8	; 0x08
     936:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	9a 87       	std	Y+10, r25	; 0x0a
     940:	89 87       	std	Y+9, r24	; 0x09
     942:	89 85       	ldd	r24, Y+9	; 0x09
     944:	9a 85       	ldd	r25, Y+10	; 0x0a
     946:	9e 87       	std	Y+14, r25	; 0x0e
     948:	8d 87       	std	Y+13, r24	; 0x0d
     94a:	8d 85       	ldd	r24, Y+13	; 0x0d
     94c:	9e 85       	ldd	r25, Y+14	; 0x0e
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <__stack+0xef>
     952:	9e 87       	std	Y+14, r25	; 0x0e
     954:	8d 87       	std	Y+13, r24	; 0x0d
	//delay 5 ms
	_delay_ms(5);
	//Disable
	DIO_vidSetPinValue(LCD_ENPORT,LCD_ENPIN,LOW);
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	62 e0       	ldi	r22, 0x02	; 2
     95a:	82 e0       	ldi	r24, 0x02	; 2
     95c:	0e 94 8e 01 	call	0x31c	; 0x31c <DIO_vidSetPinValue>
}
     960:	00 00       	nop
     962:	2f 96       	adiw	r28, 0x0f	; 15
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <LCD_vidInitialize>:

void LCD_vidInitialize(void)
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	e8 97       	sbiw	r28, 0x38	; 56
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
	//RS Direction output
	DIO_vidSetPinDirection(LCD_RSPORT,LCD_RSPIN,OUTPUT);
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	0e 94 6d 00 	call	0xda	; 0xda <DIO_vidSetPinDirection>
	//Enable Direction output
	DIO_vidSetPinDirection(LCD_ENPORT,LCD_ENPIN,OUTPUT);
     992:	41 e0       	ldi	r20, 0x01	; 1
     994:	62 e0       	ldi	r22, 0x02	; 2
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	0e 94 6d 00 	call	0xda	; 0xda <DIO_vidSetPinDirection>
	//R/E Direction output
	DIO_vidSetPinDirection(LCD_RWPORT,LCD_RWPIN,OUTPUT);
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	0e 94 6d 00 	call	0xda	; 0xda <DIO_vidSetPinDirection>
	//Data Direction output
	DIO_vidSetPortDirection(LCD_DATAPORT,FULL_OUTPUT);
     9a6:	6f ef       	ldi	r22, 0xFF	; 255
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vidSetPortDirection>
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	a8 e4       	ldi	r26, 0x48	; 72
     9b4:	b2 e4       	ldi	r27, 0x42	; 66
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	9a 83       	std	Y+2, r25	; 0x02
     9ba:	ab 83       	std	Y+3, r26	; 0x03
     9bc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e8       	ldi	r19, 0x80	; 128
     9c2:	4b e3       	ldi	r20, 0x3B	; 59
     9c4:	55 e4       	ldi	r21, 0x45	; 69
     9c6:	69 81       	ldd	r22, Y+1	; 0x01
     9c8:	7a 81       	ldd	r23, Y+2	; 0x02
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     9d2:	dc 01       	movw	r26, r24
     9d4:	cb 01       	movw	r24, r22
     9d6:	8f a7       	std	Y+47, r24	; 0x2f
     9d8:	98 ab       	std	Y+48, r25	; 0x30
     9da:	a9 ab       	std	Y+49, r26	; 0x31
     9dc:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e8       	ldi	r20, 0x80	; 128
     9e4:	5f e3       	ldi	r21, 0x3F	; 63
     9e6:	6f a5       	ldd	r22, Y+47	; 0x2f
     9e8:	78 a9       	ldd	r23, Y+48	; 0x30
     9ea:	89 a9       	ldd	r24, Y+49	; 0x31
     9ec:	9a a9       	ldd	r25, Y+50	; 0x32
     9ee:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
     9f2:	88 23       	and	r24, r24
     9f4:	2c f4       	brge	.+10     	; 0xa00 <LCD_vidInitialize+0x8c>
		__ticks = 1;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	9c ab       	std	Y+52, r25	; 0x34
     9fc:	8b ab       	std	Y+51, r24	; 0x33
     9fe:	3f c0       	rjmp	.+126    	; 0xa7e <LCD_vidInitialize+0x10a>
	else if (__tmp > 65535)
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	3f ef       	ldi	r19, 0xFF	; 255
     a04:	4f e7       	ldi	r20, 0x7F	; 127
     a06:	57 e4       	ldi	r21, 0x47	; 71
     a08:	6f a5       	ldd	r22, Y+47	; 0x2f
     a0a:	78 a9       	ldd	r23, Y+48	; 0x30
     a0c:	89 a9       	ldd	r24, Y+49	; 0x31
     a0e:	9a a9       	ldd	r25, Y+50	; 0x32
     a10:	0e 94 ba 09 	call	0x1374	; 0x1374 <__gesf2>
     a14:	18 16       	cp	r1, r24
     a16:	4c f5       	brge	.+82     	; 0xa6a <LCD_vidInitialize+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e2       	ldi	r20, 0x20	; 32
     a1e:	51 e4       	ldi	r21, 0x41	; 65
     a20:	69 81       	ldd	r22, Y+1	; 0x01
     a22:	7a 81       	ldd	r23, Y+2	; 0x02
     a24:	8b 81       	ldd	r24, Y+3	; 0x03
     a26:	9c 81       	ldd	r25, Y+4	; 0x04
     a28:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	bc 01       	movw	r22, r24
     a32:	cd 01       	movw	r24, r26
     a34:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	9c ab       	std	Y+52, r25	; 0x34
     a3e:	8b ab       	std	Y+51, r24	; 0x33
     a40:	0f c0       	rjmp	.+30     	; 0xa60 <LCD_vidInitialize+0xec>
     a42:	8c e2       	ldi	r24, 0x2C	; 44
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	9e ab       	std	Y+54, r25	; 0x36
     a48:	8d ab       	std	Y+53, r24	; 0x35
     a4a:	8d a9       	ldd	r24, Y+53	; 0x35
     a4c:	9e a9       	ldd	r25, Y+54	; 0x36
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <LCD_vidInitialize+0xda>
     a52:	9e ab       	std	Y+54, r25	; 0x36
     a54:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a56:	8b a9       	ldd	r24, Y+51	; 0x33
     a58:	9c a9       	ldd	r25, Y+52	; 0x34
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	9c ab       	std	Y+52, r25	; 0x34
     a5e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a60:	8b a9       	ldd	r24, Y+51	; 0x33
     a62:	9c a9       	ldd	r25, Y+52	; 0x34
     a64:	89 2b       	or	r24, r25
     a66:	69 f7       	brne	.-38     	; 0xa42 <LCD_vidInitialize+0xce>
     a68:	14 c0       	rjmp	.+40     	; 0xa92 <LCD_vidInitialize+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a6a:	6f a5       	ldd	r22, Y+47	; 0x2f
     a6c:	78 a9       	ldd	r23, Y+48	; 0x30
     a6e:	89 a9       	ldd	r24, Y+49	; 0x31
     a70:	9a a9       	ldd	r25, Y+50	; 0x32
     a72:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     a76:	dc 01       	movw	r26, r24
     a78:	cb 01       	movw	r24, r22
     a7a:	9c ab       	std	Y+52, r25	; 0x34
     a7c:	8b ab       	std	Y+51, r24	; 0x33
     a7e:	8b a9       	ldd	r24, Y+51	; 0x33
     a80:	9c a9       	ldd	r25, Y+52	; 0x34
     a82:	98 af       	std	Y+56, r25	; 0x38
     a84:	8f ab       	std	Y+55, r24	; 0x37
     a86:	8f a9       	ldd	r24, Y+55	; 0x37
     a88:	98 ad       	ldd	r25, Y+56	; 0x38
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	f1 f7       	brne	.-4      	; 0xa8a <LCD_vidInitialize+0x116>
     a8e:	98 af       	std	Y+56, r25	; 0x38
     a90:	8f ab       	std	Y+55, r24	; 0x37
	//delay 50ms
	_delay_ms(50);
	//(0b0011nfxx)2 lines ,5*8pixcel
	LCD_vidWriteCommund(0b00111000);
     a92:	88 e3       	ldi	r24, 0x38	; 56
     a94:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_vidWriteCommund>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e4       	ldi	r27, 0x40	; 64
     aa0:	8d 83       	std	Y+5, r24	; 0x05
     aa2:	9e 83       	std	Y+6, r25	; 0x06
     aa4:	af 83       	std	Y+7, r26	; 0x07
     aa6:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e8       	ldi	r19, 0x80	; 128
     aac:	4b e3       	ldi	r20, 0x3B	; 59
     aae:	55 e4       	ldi	r21, 0x45	; 69
     ab0:	6d 81       	ldd	r22, Y+5	; 0x05
     ab2:	7e 81       	ldd	r23, Y+6	; 0x06
     ab4:	8f 81       	ldd	r24, Y+7	; 0x07
     ab6:	98 85       	ldd	r25, Y+8	; 0x08
     ab8:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	8d a3       	std	Y+37, r24	; 0x25
     ac2:	9e a3       	std	Y+38, r25	; 0x26
     ac4:	af a3       	std	Y+39, r26	; 0x27
     ac6:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e8       	ldi	r20, 0x80	; 128
     ace:	5f e3       	ldi	r21, 0x3F	; 63
     ad0:	6d a1       	ldd	r22, Y+37	; 0x25
     ad2:	7e a1       	ldd	r23, Y+38	; 0x26
     ad4:	8f a1       	ldd	r24, Y+39	; 0x27
     ad6:	98 a5       	ldd	r25, Y+40	; 0x28
     ad8:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
     adc:	88 23       	and	r24, r24
     ade:	2c f4       	brge	.+10     	; 0xaea <LCD_vidInitialize+0x176>
		__ticks = 1;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	9a a7       	std	Y+42, r25	; 0x2a
     ae6:	89 a7       	std	Y+41, r24	; 0x29
     ae8:	3f c0       	rjmp	.+126    	; 0xb68 <LCD_vidInitialize+0x1f4>
	else if (__tmp > 65535)
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f e7       	ldi	r20, 0x7F	; 127
     af0:	57 e4       	ldi	r21, 0x47	; 71
     af2:	6d a1       	ldd	r22, Y+37	; 0x25
     af4:	7e a1       	ldd	r23, Y+38	; 0x26
     af6:	8f a1       	ldd	r24, Y+39	; 0x27
     af8:	98 a5       	ldd	r25, Y+40	; 0x28
     afa:	0e 94 ba 09 	call	0x1374	; 0x1374 <__gesf2>
     afe:	18 16       	cp	r1, r24
     b00:	4c f5       	brge	.+82     	; 0xb54 <LCD_vidInitialize+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e2       	ldi	r20, 0x20	; 32
     b08:	51 e4       	ldi	r21, 0x41	; 65
     b0a:	6d 81       	ldd	r22, Y+5	; 0x05
     b0c:	7e 81       	ldd	r23, Y+6	; 0x06
     b0e:	8f 81       	ldd	r24, Y+7	; 0x07
     b10:	98 85       	ldd	r25, Y+8	; 0x08
     b12:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     b16:	dc 01       	movw	r26, r24
     b18:	cb 01       	movw	r24, r22
     b1a:	bc 01       	movw	r22, r24
     b1c:	cd 01       	movw	r24, r26
     b1e:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	9a a7       	std	Y+42, r25	; 0x2a
     b28:	89 a7       	std	Y+41, r24	; 0x29
     b2a:	0f c0       	rjmp	.+30     	; 0xb4a <LCD_vidInitialize+0x1d6>
     b2c:	8c e2       	ldi	r24, 0x2C	; 44
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	9c a7       	std	Y+44, r25	; 0x2c
     b32:	8b a7       	std	Y+43, r24	; 0x2b
     b34:	8b a5       	ldd	r24, Y+43	; 0x2b
     b36:	9c a5       	ldd	r25, Y+44	; 0x2c
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <LCD_vidInitialize+0x1c4>
     b3c:	9c a7       	std	Y+44, r25	; 0x2c
     b3e:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b40:	89 a5       	ldd	r24, Y+41	; 0x29
     b42:	9a a5       	ldd	r25, Y+42	; 0x2a
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	9a a7       	std	Y+42, r25	; 0x2a
     b48:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b4a:	89 a5       	ldd	r24, Y+41	; 0x29
     b4c:	9a a5       	ldd	r25, Y+42	; 0x2a
     b4e:	89 2b       	or	r24, r25
     b50:	69 f7       	brne	.-38     	; 0xb2c <LCD_vidInitialize+0x1b8>
     b52:	14 c0       	rjmp	.+40     	; 0xb7c <LCD_vidInitialize+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b54:	6d a1       	ldd	r22, Y+37	; 0x25
     b56:	7e a1       	ldd	r23, Y+38	; 0x26
     b58:	8f a1       	ldd	r24, Y+39	; 0x27
     b5a:	98 a5       	ldd	r25, Y+40	; 0x28
     b5c:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	9a a7       	std	Y+42, r25	; 0x2a
     b66:	89 a7       	std	Y+41, r24	; 0x29
     b68:	89 a5       	ldd	r24, Y+41	; 0x29
     b6a:	9a a5       	ldd	r25, Y+42	; 0x2a
     b6c:	9e a7       	std	Y+46, r25	; 0x2e
     b6e:	8d a7       	std	Y+45, r24	; 0x2d
     b70:	8d a5       	ldd	r24, Y+45	; 0x2d
     b72:	9e a5       	ldd	r25, Y+46	; 0x2e
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <LCD_vidInitialize+0x200>
     b78:	9e a7       	std	Y+46, r25	; 0x2e
     b7a:	8d a7       	std	Y+45, r24	; 0x2d
	//delay 2ms
	_delay_ms(2);
	//(00001DCA)Display on,cursor on,cursor blinking
	LCD_vidWriteCommund(0b00001110);
     b7c:	8e e0       	ldi	r24, 0x0E	; 14
     b7e:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_vidWriteCommund>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	89 87       	std	Y+9, r24	; 0x09
     b8c:	9a 87       	std	Y+10, r25	; 0x0a
     b8e:	ab 87       	std	Y+11, r26	; 0x0b
     b90:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e8       	ldi	r19, 0x80	; 128
     b96:	4b e3       	ldi	r20, 0x3B	; 59
     b98:	55 e4       	ldi	r21, 0x45	; 69
     b9a:	69 85       	ldd	r22, Y+9	; 0x09
     b9c:	7a 85       	ldd	r23, Y+10	; 0x0a
     b9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     ba0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ba2:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8b 8f       	std	Y+27, r24	; 0x1b
     bac:	9c 8f       	std	Y+28, r25	; 0x1c
     bae:	ad 8f       	std	Y+29, r26	; 0x1d
     bb0:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e8       	ldi	r20, 0x80	; 128
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	6b 8d       	ldd	r22, Y+27	; 0x1b
     bbc:	7c 8d       	ldd	r23, Y+28	; 0x1c
     bbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bc2:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <LCD_vidInitialize+0x260>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	98 a3       	std	Y+32, r25	; 0x20
     bd0:	8f 8f       	std	Y+31, r24	; 0x1f
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <LCD_vidInitialize+0x2de>
	else if (__tmp > 65535)
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f e7       	ldi	r20, 0x7F	; 127
     bda:	57 e4       	ldi	r21, 0x47	; 71
     bdc:	6b 8d       	ldd	r22, Y+27	; 0x1b
     bde:	7c 8d       	ldd	r23, Y+28	; 0x1c
     be0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     be2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     be4:	0e 94 ba 09 	call	0x1374	; 0x1374 <__gesf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <LCD_vidInitialize+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e2       	ldi	r20, 0x20	; 32
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	69 85       	ldd	r22, Y+9	; 0x09
     bf6:	7a 85       	ldd	r23, Y+10	; 0x0a
     bf8:	8b 85       	ldd	r24, Y+11	; 0x0b
     bfa:	9c 85       	ldd	r25, Y+12	; 0x0c
     bfc:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	98 a3       	std	Y+32, r25	; 0x20
     c12:	8f 8f       	std	Y+31, r24	; 0x1f
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <LCD_vidInitialize+0x2c0>
     c16:	8c e2       	ldi	r24, 0x2C	; 44
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	9a a3       	std	Y+34, r25	; 0x22
     c1c:	89 a3       	std	Y+33, r24	; 0x21
     c1e:	89 a1       	ldd	r24, Y+33	; 0x21
     c20:	9a a1       	ldd	r25, Y+34	; 0x22
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <LCD_vidInitialize+0x2ae>
     c26:	9a a3       	std	Y+34, r25	; 0x22
     c28:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c2c:	98 a1       	ldd	r25, Y+32	; 0x20
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	98 a3       	std	Y+32, r25	; 0x20
     c32:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c36:	98 a1       	ldd	r25, Y+32	; 0x20
     c38:	89 2b       	or	r24, r25
     c3a:	69 f7       	brne	.-38     	; 0xc16 <LCD_vidInitialize+0x2a2>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <LCD_vidInitialize+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     c40:	7c 8d       	ldd	r23, Y+28	; 0x1c
     c42:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c44:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c46:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	98 a3       	std	Y+32, r25	; 0x20
     c50:	8f 8f       	std	Y+31, r24	; 0x1f
     c52:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c54:	98 a1       	ldd	r25, Y+32	; 0x20
     c56:	9c a3       	std	Y+36, r25	; 0x24
     c58:	8b a3       	std	Y+35, r24	; 0x23
     c5a:	8b a1       	ldd	r24, Y+35	; 0x23
     c5c:	9c a1       	ldd	r25, Y+36	; 0x24
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <LCD_vidInitialize+0x2ea>
     c62:	9c a3       	std	Y+36, r25	; 0x24
     c64:	8b a3       	std	Y+35, r24	; 0x23
	//delay 2ms
	_delay_ms(2);
	//Clear command
	LCD_vidWriteCommund(0b00000001);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_vidWriteCommund>
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a8 e4       	ldi	r26, 0x48	; 72
     c72:	b2 e4       	ldi	r27, 0x42	; 66
     c74:	8d 87       	std	Y+13, r24	; 0x0d
     c76:	9e 87       	std	Y+14, r25	; 0x0e
     c78:	af 87       	std	Y+15, r26	; 0x0f
     c7a:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e8       	ldi	r19, 0x80	; 128
     c80:	4b e3       	ldi	r20, 0x3B	; 59
     c82:	55 e4       	ldi	r21, 0x45	; 69
     c84:	6d 85       	ldd	r22, Y+13	; 0x0d
     c86:	7e 85       	ldd	r23, Y+14	; 0x0e
     c88:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8a:	98 89       	ldd	r25, Y+16	; 0x10
     c8c:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	89 8b       	std	Y+17, r24	; 0x11
     c96:	9a 8b       	std	Y+18, r25	; 0x12
     c98:	ab 8b       	std	Y+19, r26	; 0x13
     c9a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e8       	ldi	r20, 0x80	; 128
     ca2:	5f e3       	ldi	r21, 0x3F	; 63
     ca4:	69 89       	ldd	r22, Y+17	; 0x11
     ca6:	7a 89       	ldd	r23, Y+18	; 0x12
     ca8:	8b 89       	ldd	r24, Y+19	; 0x13
     caa:	9c 89       	ldd	r25, Y+20	; 0x14
     cac:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
     cb0:	88 23       	and	r24, r24
     cb2:	2c f4       	brge	.+10     	; 0xcbe <LCD_vidInitialize+0x34a>
		__ticks = 1;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9e 8b       	std	Y+22, r25	; 0x16
     cba:	8d 8b       	std	Y+21, r24	; 0x15
     cbc:	3f c0       	rjmp	.+126    	; 0xd3c <LCD_vidInitialize+0x3c8>
	else if (__tmp > 65535)
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	3f ef       	ldi	r19, 0xFF	; 255
     cc2:	4f e7       	ldi	r20, 0x7F	; 127
     cc4:	57 e4       	ldi	r21, 0x47	; 71
     cc6:	69 89       	ldd	r22, Y+17	; 0x11
     cc8:	7a 89       	ldd	r23, Y+18	; 0x12
     cca:	8b 89       	ldd	r24, Y+19	; 0x13
     ccc:	9c 89       	ldd	r25, Y+20	; 0x14
     cce:	0e 94 ba 09 	call	0x1374	; 0x1374 <__gesf2>
     cd2:	18 16       	cp	r1, r24
     cd4:	4c f5       	brge	.+82     	; 0xd28 <LCD_vidInitialize+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e2       	ldi	r20, 0x20	; 32
     cdc:	51 e4       	ldi	r21, 0x41	; 65
     cde:	6d 85       	ldd	r22, Y+13	; 0x0d
     ce0:	7e 85       	ldd	r23, Y+14	; 0x0e
     ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce4:	98 89       	ldd	r25, Y+16	; 0x10
     ce6:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	bc 01       	movw	r22, r24
     cf0:	cd 01       	movw	r24, r26
     cf2:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	9e 8b       	std	Y+22, r25	; 0x16
     cfc:	8d 8b       	std	Y+21, r24	; 0x15
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <LCD_vidInitialize+0x3aa>
     d00:	8c e2       	ldi	r24, 0x2C	; 44
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	98 8f       	std	Y+24, r25	; 0x18
     d06:	8f 8b       	std	Y+23, r24	; 0x17
     d08:	8f 89       	ldd	r24, Y+23	; 0x17
     d0a:	98 8d       	ldd	r25, Y+24	; 0x18
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <LCD_vidInitialize+0x398>
     d10:	98 8f       	std	Y+24, r25	; 0x18
     d12:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d14:	8d 89       	ldd	r24, Y+21	; 0x15
     d16:	9e 89       	ldd	r25, Y+22	; 0x16
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	9e 8b       	std	Y+22, r25	; 0x16
     d1c:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1e:	8d 89       	ldd	r24, Y+21	; 0x15
     d20:	9e 89       	ldd	r25, Y+22	; 0x16
     d22:	89 2b       	or	r24, r25
     d24:	69 f7       	brne	.-38     	; 0xd00 <LCD_vidInitialize+0x38c>
	//delay 2ms
	_delay_ms(50);

}
     d26:	14 c0       	rjmp	.+40     	; 0xd50 <LCD_vidInitialize+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d28:	69 89       	ldd	r22, Y+17	; 0x11
     d2a:	7a 89       	ldd	r23, Y+18	; 0x12
     d2c:	8b 89       	ldd	r24, Y+19	; 0x13
     d2e:	9c 89       	ldd	r25, Y+20	; 0x14
     d30:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	9e 8b       	std	Y+22, r25	; 0x16
     d3a:	8d 8b       	std	Y+21, r24	; 0x15
     d3c:	8d 89       	ldd	r24, Y+21	; 0x15
     d3e:	9e 89       	ldd	r25, Y+22	; 0x16
     d40:	9a 8f       	std	Y+26, r25	; 0x1a
     d42:	89 8f       	std	Y+25, r24	; 0x19
     d44:	89 8d       	ldd	r24, Y+25	; 0x19
     d46:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <LCD_vidInitialize+0x3d4>
     d4c:	9a 8f       	std	Y+26, r25	; 0x1a
     d4e:	89 8f       	std	Y+25, r24	; 0x19
     d50:	00 00       	nop
     d52:	e8 96       	adiw	r28, 0x38	; 56
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <LCD_vidWriteDatgotoaxy>:
void LCD_vidWriteDatgotoaxy(u8  u8x,u8 u8y)
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	00 d0       	rcall	.+0      	; 0xd6a <LCD_vidWriteDatgotoaxy+0x6>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	6a 83       	std	Y+2, r22	; 0x02
	//0 means first row
	if(u8x==0)
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	88 23       	and	r24, r24
     d76:	21 f4       	brne	.+8      	; 0xd80 <LCD_vidWriteDatgotoaxy+0x1c>
	{
		//(1(Adress))changeDDRAM to address
		LCD_vidWriteCommund((128+u8y));
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	80 58       	subi	r24, 0x80	; 128
     d7c:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_vidWriteCommund>
	}
	if(u8x==1)
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	21 f4       	brne	.+8      	; 0xd8e <LCD_vidWriteDatgotoaxy+0x2a>
	{
		//second start from address 0x40(64)
		LCD_vidWriteCommund((128+64+u8y));
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	80 54       	subi	r24, 0x40	; 64
     d8a:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_vidWriteCommund>
	}
}
     d8e:	00 00       	nop
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <LCD_vidWriteString>:

void LCD_vidWriteString(char *pu8arr,u8 u8charnum)
{
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <LCD_vidWriteString+0x6>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <LCD_vidWriteString+0x8>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	9b 83       	std	Y+3, r25	; 0x03
     da8:	8a 83       	std	Y+2, r24	; 0x02
     daa:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for(i=0;i<u8charnum;i++){
     dac:	19 82       	std	Y+1, r1	; 0x01
     dae:	0e c0       	rjmp	.+28     	; 0xdcc <LCD_vidWriteString+0x32>
		LCD_vidWriteData(pu8arr[i]);
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	2a 81       	ldd	r18, Y+2	; 0x02
     db8:	3b 81       	ldd	r19, Y+3	; 0x03
     dba:	82 0f       	add	r24, r18
     dbc:	93 1f       	adc	r25, r19
     dbe:	fc 01       	movw	r30, r24
     dc0:	80 81       	ld	r24, Z
     dc2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_vidWriteData>
}

void LCD_vidWriteString(char *pu8arr,u8 u8charnum)
{
	u8 i;
	for(i=0;i<u8charnum;i++){
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	99 81       	ldd	r25, Y+1	; 0x01
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	98 17       	cp	r25, r24
     dd2:	70 f3       	brcs	.-36     	; 0xdb0 <LCD_vidWriteString+0x16>
		LCD_vidWriteData(pu8arr[i]);
	}

}
     dd4:	00 00       	nop
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <LCD_vidWriteNumber>:
void LCD_vidWriteNumber(u16 u16num){
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	27 97       	sbiw	r28, 0x07	; 7
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	9f 83       	std	Y+7, r25	; 0x07
     dfa:	8e 83       	std	Y+6, r24	; 0x06
	u16 m=1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
	u16 u16i;
	u8 u16Digit;
	while(u16num/m >=10){
     e04:	0d c0       	rjmp	.+26     	; 0xe20 <LCD_vidWriteNumber+0x3c>
		m*=10;
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	9c 01       	movw	r18, r24
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	82 0f       	add	r24, r18
     e1a:	93 1f       	adc	r25, r19
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_vidWriteNumber(u16 u16num){
	u16 m=1;
	u16 u16i;
	u8 u16Digit;
	while(u16num/m >=10){
     e20:	8e 81       	ldd	r24, Y+6	; 0x06
     e22:	9f 81       	ldd	r25, Y+7	; 0x07
     e24:	29 81       	ldd	r18, Y+1	; 0x01
     e26:	3a 81       	ldd	r19, Y+2	; 0x02
     e28:	b9 01       	movw	r22, r18
     e2a:	0e 94 16 09 	call	0x122c	; 0x122c <__udivmodhi4>
     e2e:	cb 01       	movw	r24, r22
     e30:	0a 97       	sbiw	r24, 0x0a	; 10
     e32:	48 f7       	brcc	.-46     	; 0xe06 <LCD_vidWriteNumber+0x22>
		m*=10;
	}
	for(u16i=m;u16i>=1;u16i/=10){
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	9c 83       	std	Y+4, r25	; 0x04
     e3a:	8b 83       	std	Y+3, r24	; 0x03
     e3c:	35 c0       	rjmp	.+106    	; 0xea8 <LCD_vidWriteNumber+0xc4>
		u16Digit=(u16num/u16i)%10;
     e3e:	8e 81       	ldd	r24, Y+6	; 0x06
     e40:	9f 81       	ldd	r25, Y+7	; 0x07
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	3c 81       	ldd	r19, Y+4	; 0x04
     e46:	b9 01       	movw	r22, r18
     e48:	0e 94 16 09 	call	0x122c	; 0x122c <__udivmodhi4>
     e4c:	cb 01       	movw	r24, r22
     e4e:	ac 01       	movw	r20, r24
     e50:	9a 01       	movw	r18, r20
     e52:	ad ec       	ldi	r26, 0xCD	; 205
     e54:	bc ec       	ldi	r27, 0xCC	; 204
     e56:	0e 94 2a 09 	call	0x1254	; 0x1254 <__umulhisi3>
     e5a:	96 95       	lsr	r25
     e5c:	87 95       	ror	r24
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	96 95       	lsr	r25
     e64:	87 95       	ror	r24
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	9c 01       	movw	r18, r24
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	82 0f       	add	r24, r18
     e76:	93 1f       	adc	r25, r19
     e78:	9a 01       	movw	r18, r20
     e7a:	28 1b       	sub	r18, r24
     e7c:	39 0b       	sbc	r19, r25
     e7e:	c9 01       	movw	r24, r18
     e80:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vidWriteData(u16Digit+'0');
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	80 5d       	subi	r24, 0xD0	; 208
     e86:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <LCD_vidWriteData>
	u16 u16i;
	u8 u16Digit;
	while(u16num/m >=10){
		m*=10;
	}
	for(u16i=m;u16i>=1;u16i/=10){
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	9c 01       	movw	r18, r24
     e90:	ad ec       	ldi	r26, 0xCD	; 205
     e92:	bc ec       	ldi	r27, 0xCC	; 204
     e94:	0e 94 2a 09 	call	0x1254	; 0x1254 <__umulhisi3>
     e98:	96 95       	lsr	r25
     e9a:	87 95       	ror	r24
     e9c:	96 95       	lsr	r25
     e9e:	87 95       	ror	r24
     ea0:	96 95       	lsr	r25
     ea2:	87 95       	ror	r24
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	89 2b       	or	r24, r25
     eae:	39 f6       	brne	.-114    	; 0xe3e <LCD_vidWriteNumber+0x5a>
		u16Digit=(u16num/u16i)%10;
		LCD_vidWriteData(u16Digit+'0');
	}

}
     eb0:	00 00       	nop
     eb2:	27 96       	adiw	r28, 0x07	; 7
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <main>:
#include <util/delay.h>
void ADC_vidRead(u16 *voltptr);
void ADC_vidInitalize();
void TEMP_vidConvertVolttoTemp(u16 u16volt,u16 *pu16temp);
int main(void)
{
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	a0 97       	sbiw	r28, 0x20	; 32
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
	/* LCD Initialization */
	LCD_vidInitialize();
     ed8:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_vidInitialize>
	/*ADC Initialization*/
	ADC_vidInitalize();
     edc:	0e 94 70 08 	call	0x10e0	; 0x10e0 <ADC_vidInitalize>
	u16	u16temp;

	//LCD_vidWriteString("ahmed",5);
	while(1)
	{
		ADC_vidRead(&u16Read);
     ee0:	ce 01       	movw	r24, r28
     ee2:	4d 96       	adiw	r24, 0x1d	; 29
     ee4:	0e 94 a5 08 	call	0x114a	; 0x114a <ADC_vidRead>
		LCD_vidWriteNumber(u16Read);
     ee8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eec:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_vidWriteNumber>
		TEMP_vidConvertVolttoTemp(u16Read,&u16temp);
     ef0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ef2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ef4:	9e 01       	movw	r18, r28
     ef6:	21 5e       	subi	r18, 0xE1	; 225
     ef8:	3f 4f       	sbci	r19, 0xFF	; 255
     efa:	b9 01       	movw	r22, r18
     efc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TEMP_vidConvertVolttoTemp>
		LCD_vidWriteDatgotoaxy(1,0);
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 b2 06 	call	0xd64	; 0xd64 <LCD_vidWriteDatgotoaxy>
		LCD_vidWriteNumber(u16temp);
     f08:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f0a:	98 a1       	ldd	r25, Y+32	; 0x20
     f0c:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_vidWriteNumber>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	aa ef       	ldi	r26, 0xFA	; 250
     f16:	b3 e4       	ldi	r27, 0x43	; 67
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	ab 83       	std	Y+3, r26	; 0x03
     f1e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e8       	ldi	r19, 0x80	; 128
     f24:	4b e3       	ldi	r20, 0x3B	; 59
     f26:	55 e4       	ldi	r21, 0x45	; 69
     f28:	69 81       	ldd	r22, Y+1	; 0x01
     f2a:	7a 81       	ldd	r23, Y+2	; 0x02
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	8b 8b       	std	Y+19, r24	; 0x13
     f3a:	9c 8b       	std	Y+20, r25	; 0x14
     f3c:	ad 8b       	std	Y+21, r26	; 0x15
     f3e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e8       	ldi	r20, 0x80	; 128
     f46:	5f e3       	ldi	r21, 0x3F	; 63
     f48:	6b 89       	ldd	r22, Y+19	; 0x13
     f4a:	7c 89       	ldd	r23, Y+20	; 0x14
     f4c:	8d 89       	ldd	r24, Y+21	; 0x15
     f4e:	9e 89       	ldd	r25, Y+22	; 0x16
     f50:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
     f54:	88 23       	and	r24, r24
     f56:	2c f4       	brge	.+10     	; 0xf62 <main+0x9e>
		__ticks = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	98 8f       	std	Y+24, r25	; 0x18
     f5e:	8f 8b       	std	Y+23, r24	; 0x17
     f60:	3f c0       	rjmp	.+126    	; 0xfe0 <main+0x11c>
	else if (__tmp > 65535)
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	3f ef       	ldi	r19, 0xFF	; 255
     f66:	4f e7       	ldi	r20, 0x7F	; 127
     f68:	57 e4       	ldi	r21, 0x47	; 71
     f6a:	6b 89       	ldd	r22, Y+19	; 0x13
     f6c:	7c 89       	ldd	r23, Y+20	; 0x14
     f6e:	8d 89       	ldd	r24, Y+21	; 0x15
     f70:	9e 89       	ldd	r25, Y+22	; 0x16
     f72:	0e 94 ba 09 	call	0x1374	; 0x1374 <__gesf2>
     f76:	18 16       	cp	r1, r24
     f78:	4c f5       	brge	.+82     	; 0xfcc <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e2       	ldi	r20, 0x20	; 32
     f80:	51 e4       	ldi	r21, 0x41	; 65
     f82:	69 81       	ldd	r22, Y+1	; 0x01
     f84:	7a 81       	ldd	r23, Y+2	; 0x02
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	98 8f       	std	Y+24, r25	; 0x18
     fa0:	8f 8b       	std	Y+23, r24	; 0x17
     fa2:	0f c0       	rjmp	.+30     	; 0xfc2 <main+0xfe>
     fa4:	8c e2       	ldi	r24, 0x2C	; 44
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	9a 8f       	std	Y+26, r25	; 0x1a
     faa:	89 8f       	std	Y+25, r24	; 0x19
     fac:	89 8d       	ldd	r24, Y+25	; 0x19
     fae:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <main+0xec>
     fb4:	9a 8f       	std	Y+26, r25	; 0x1a
     fb6:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb8:	8f 89       	ldd	r24, Y+23	; 0x17
     fba:	98 8d       	ldd	r25, Y+24	; 0x18
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	98 8f       	std	Y+24, r25	; 0x18
     fc0:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	89 2b       	or	r24, r25
     fc8:	69 f7       	brne	.-38     	; 0xfa4 <main+0xe0>
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fcc:	6b 89       	ldd	r22, Y+19	; 0x13
     fce:	7c 89       	ldd	r23, Y+20	; 0x14
     fd0:	8d 89       	ldd	r24, Y+21	; 0x15
     fd2:	9e 89       	ldd	r25, Y+22	; 0x16
     fd4:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	98 8f       	std	Y+24, r25	; 0x18
     fde:	8f 8b       	std	Y+23, r24	; 0x17
     fe0:	8f 89       	ldd	r24, Y+23	; 0x17
     fe2:	98 8d       	ldd	r25, Y+24	; 0x18
     fe4:	9c 8f       	std	Y+28, r25	; 0x1c
     fe6:	8b 8f       	std	Y+27, r24	; 0x1b
     fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <main+0x128>
     ff0:	9c 8f       	std	Y+28, r25	; 0x1c
     ff2:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(500);
		LCD_vidWriteCommund(0x01);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	0e 94 1b 04 	call	0x836	; 0x836 <LCD_vidWriteCommund>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a0 ea       	ldi	r26, 0xA0	; 160
    1000:	b1 e4       	ldi	r27, 0x41	; 65
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	9e 83       	std	Y+6, r25	; 0x06
    1006:	af 83       	std	Y+7, r26	; 0x07
    1008:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e8       	ldi	r19, 0x80	; 128
    100e:	4b e3       	ldi	r20, 0x3B	; 59
    1010:	55 e4       	ldi	r21, 0x45	; 69
    1012:	6d 81       	ldd	r22, Y+5	; 0x05
    1014:	7e 81       	ldd	r23, Y+6	; 0x06
    1016:	8f 81       	ldd	r24, Y+7	; 0x07
    1018:	98 85       	ldd	r25, Y+8	; 0x08
    101a:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	89 87       	std	Y+9, r24	; 0x09
    1024:	9a 87       	std	Y+10, r25	; 0x0a
    1026:	ab 87       	std	Y+11, r26	; 0x0b
    1028:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	5f e3       	ldi	r21, 0x3F	; 63
    1032:	69 85       	ldd	r22, Y+9	; 0x09
    1034:	7a 85       	ldd	r23, Y+10	; 0x0a
    1036:	8b 85       	ldd	r24, Y+11	; 0x0b
    1038:	9c 85       	ldd	r25, Y+12	; 0x0c
    103a:	0e 94 39 09 	call	0x1272	; 0x1272 <__cmpsf2>
    103e:	88 23       	and	r24, r24
    1040:	2c f4       	brge	.+10     	; 0x104c <main+0x188>
		__ticks = 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9e 87       	std	Y+14, r25	; 0x0e
    1048:	8d 87       	std	Y+13, r24	; 0x0d
    104a:	3f c0       	rjmp	.+126    	; 0x10ca <main+0x206>
	else if (__tmp > 65535)
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	3f ef       	ldi	r19, 0xFF	; 255
    1050:	4f e7       	ldi	r20, 0x7F	; 127
    1052:	57 e4       	ldi	r21, 0x47	; 71
    1054:	69 85       	ldd	r22, Y+9	; 0x09
    1056:	7a 85       	ldd	r23, Y+10	; 0x0a
    1058:	8b 85       	ldd	r24, Y+11	; 0x0b
    105a:	9c 85       	ldd	r25, Y+12	; 0x0c
    105c:	0e 94 ba 09 	call	0x1374	; 0x1374 <__gesf2>
    1060:	18 16       	cp	r1, r24
    1062:	4c f5       	brge	.+82     	; 0x10b6 <main+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e2       	ldi	r20, 0x20	; 32
    106a:	51 e4       	ldi	r21, 0x41	; 65
    106c:	6d 81       	ldd	r22, Y+5	; 0x05
    106e:	7e 81       	ldd	r23, Y+6	; 0x06
    1070:	8f 81       	ldd	r24, Y+7	; 0x07
    1072:	98 85       	ldd	r25, Y+8	; 0x08
    1074:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	9e 87       	std	Y+14, r25	; 0x0e
    108a:	8d 87       	std	Y+13, r24	; 0x0d
    108c:	0f c0       	rjmp	.+30     	; 0x10ac <main+0x1e8>
    108e:	8c e2       	ldi	r24, 0x2C	; 44
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	98 8b       	std	Y+16, r25	; 0x10
    1094:	8f 87       	std	Y+15, r24	; 0x0f
    1096:	8f 85       	ldd	r24, Y+15	; 0x0f
    1098:	98 89       	ldd	r25, Y+16	; 0x10
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <main+0x1d6>
    109e:	98 8b       	std	Y+16, r25	; 0x10
    10a0:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	9e 87       	std	Y+14, r25	; 0x0e
    10aa:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b0:	89 2b       	or	r24, r25
    10b2:	69 f7       	brne	.-38     	; 0x108e <main+0x1ca>
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b6:	69 85       	ldd	r22, Y+9	; 0x09
    10b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    10ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    10bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    10be:	0e 94 3e 09 	call	0x127c	; 0x127c <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9e 87       	std	Y+14, r25	; 0x0e
    10c8:	8d 87       	std	Y+13, r24	; 0x0d
    10ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    10cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ce:	9a 8b       	std	Y+18, r25	; 0x12
    10d0:	89 8b       	std	Y+17, r24	; 0x11
    10d2:	89 89       	ldd	r24, Y+17	; 0x11
    10d4:	9a 89       	ldd	r25, Y+18	; 0x12
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <main+0x212>
    10da:	9a 8b       	std	Y+18, r25	; 0x12
    10dc:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(20);
	}
    10de:	00 cf       	rjmp	.-512    	; 0xee0 <main+0x1c>

000010e0 <ADC_vidInitalize>:
}

void ADC_vidInitalize()
{
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	/*ADC pin input */
	Clr_Bit(PORTA,PIN0);
    10e8:	8b e3       	ldi	r24, 0x3B	; 59
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	2b e3       	ldi	r18, 0x3B	; 59
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	2e 7f       	andi	r18, 0xFE	; 254
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
	//set reference VCC
	Set_Bit(ADMUX,REFS0);
    10fa:	87 e2       	ldi	r24, 0x27	; 39
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	27 e2       	ldi	r18, 0x27	; 39
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	f9 01       	movw	r30, r18
    1104:	20 81       	ld	r18, Z
    1106:	20 64       	ori	r18, 0x40	; 64
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
	//set left adjust
	Set_Bit(ADMUX,ADLAR);
    110c:	87 e2       	ldi	r24, 0x27	; 39
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	27 e2       	ldi	r18, 0x27	; 39
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	f9 01       	movw	r30, r18
    1116:	20 81       	ld	r18, Z
    1118:	20 62       	ori	r18, 0x20	; 32
    111a:	fc 01       	movw	r30, r24
    111c:	20 83       	st	Z, r18
	//set ADC channel ,ADC0 MUX4:0=0

	//ADC Perscaler 16
	Set_Bit(ADCSRA,ADPS2);
    111e:	86 e2       	ldi	r24, 0x26	; 38
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	26 e2       	ldi	r18, 0x26	; 38
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	f9 01       	movw	r30, r18
    1128:	20 81       	ld	r18, Z
    112a:	24 60       	ori	r18, 0x04	; 4
    112c:	fc 01       	movw	r30, r24
    112e:	20 83       	st	Z, r18

	//enable ADC
	Set_Bit(ADCSRA,ADEN);
    1130:	86 e2       	ldi	r24, 0x26	; 38
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	26 e2       	ldi	r18, 0x26	; 38
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	f9 01       	movw	r30, r18
    113a:	20 81       	ld	r18, Z
    113c:	20 68       	ori	r18, 0x80	; 128
    113e:	fc 01       	movw	r30, r24
    1140:	20 83       	st	Z, r18

}
    1142:	00 00       	nop
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret

0000114a <ADC_vidRead>:

void ADC_vidRead(u16 *voltptr)
{
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	00 d0       	rcall	.+0      	; 0x1150 <ADC_vidRead+0x6>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <ADC_vidRead+0x8>
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
	u16 u16CounterValue;
	//start conversion
	Set_Bit(ADCSRA,ADSC);
    115a:	86 e2       	ldi	r24, 0x26	; 38
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	26 e2       	ldi	r18, 0x26	; 38
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	f9 01       	movw	r30, r18
    1164:	20 81       	ld	r18, Z
    1166:	20 64       	ori	r18, 0x40	; 64
    1168:	fc 01       	movw	r30, r24
    116a:	20 83       	st	Z, r18
	//wait conversion
	while(Get_Bit(ADCSRA,ADSC)==1);
    116c:	00 00       	nop
    116e:	86 e2       	ldi	r24, 0x26	; 38
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	fc 01       	movw	r30, r24
    1174:	80 81       	ld	r24, Z
    1176:	82 95       	swap	r24
    1178:	86 95       	lsr	r24
    117a:	86 95       	lsr	r24
    117c:	83 70       	andi	r24, 0x03	; 3
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	81 70       	andi	r24, 0x01	; 1
    1184:	99 27       	eor	r25, r25
    1186:	89 2b       	or	r24, r25
    1188:	91 f7       	brne	.-28     	; 0x116e <ADC_vidRead+0x24>
	//read step number
	//u16CounterValue=ADC;
	u16CounterValue=((u16)(ADCL>>6))+((((u16)ADCH)*4));
    118a:	84 e2       	ldi	r24, 0x24	; 36
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	fc 01       	movw	r30, r24
    1190:	80 81       	ld	r24, Z
    1192:	82 95       	swap	r24
    1194:	86 95       	lsr	r24
    1196:	86 95       	lsr	r24
    1198:	83 70       	andi	r24, 0x03	; 3
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	85 e2       	ldi	r24, 0x25	; 37
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	82 0f       	add	r24, r18
    11b4:	93 1f       	adc	r25, r19
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
	//convert from step number to voltage value
	*voltptr=(u16CounterValue)*(5000/1023);
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	9c 01       	movw	r18, r24
    11c0:	22 0f       	add	r18, r18
    11c2:	33 1f       	adc	r19, r19
    11c4:	22 0f       	add	r18, r18
    11c6:	33 1f       	adc	r19, r19
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	fc 01       	movw	r30, r24
    11ce:	31 83       	std	Z+1, r19	; 0x01
    11d0:	20 83       	st	Z, r18
	//*voltptr=((u16CounterValue*5000)/1023);
}
    11d2:	00 00       	nop
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	08 95       	ret

000011e2 <TEMP_vidConvertVolttoTemp>:

void TEMP_vidConvertVolttoTemp(u16 u16volt,u16 *pu16temp)
{
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <TEMP_vidConvertVolttoTemp+0x6>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <TEMP_vidConvertVolttoTemp+0x8>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	7c 83       	std	Y+4, r23	; 0x04
    11f4:	6b 83       	std	Y+3, r22	; 0x03
	*pu16temp=u16volt/10;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	9c 01       	movw	r18, r24
    11fc:	ad ec       	ldi	r26, 0xCD	; 205
    11fe:	bc ec       	ldi	r27, 0xCC	; 204
    1200:	0e 94 2a 09 	call	0x1254	; 0x1254 <__umulhisi3>
    1204:	9c 01       	movw	r18, r24
    1206:	36 95       	lsr	r19
    1208:	27 95       	ror	r18
    120a:	36 95       	lsr	r19
    120c:	27 95       	ror	r18
    120e:	36 95       	lsr	r19
    1210:	27 95       	ror	r18
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	fc 01       	movw	r30, r24
    1218:	31 83       	std	Z+1, r19	; 0x01
    121a:	20 83       	st	Z, r18
}
    121c:	00 00       	nop
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <__udivmodhi4>:
    122c:	aa 1b       	sub	r26, r26
    122e:	bb 1b       	sub	r27, r27
    1230:	51 e1       	ldi	r21, 0x11	; 17
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <__udivmodhi4_ep>

00001234 <__udivmodhi4_loop>:
    1234:	aa 1f       	adc	r26, r26
    1236:	bb 1f       	adc	r27, r27
    1238:	a6 17       	cp	r26, r22
    123a:	b7 07       	cpc	r27, r23
    123c:	10 f0       	brcs	.+4      	; 0x1242 <__udivmodhi4_ep>
    123e:	a6 1b       	sub	r26, r22
    1240:	b7 0b       	sbc	r27, r23

00001242 <__udivmodhi4_ep>:
    1242:	88 1f       	adc	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	5a 95       	dec	r21
    1248:	a9 f7       	brne	.-22     	; 0x1234 <__udivmodhi4_loop>
    124a:	80 95       	com	r24
    124c:	90 95       	com	r25
    124e:	bc 01       	movw	r22, r24
    1250:	cd 01       	movw	r24, r26
    1252:	08 95       	ret

00001254 <__umulhisi3>:
    1254:	a2 9f       	mul	r26, r18
    1256:	b0 01       	movw	r22, r0
    1258:	b3 9f       	mul	r27, r19
    125a:	c0 01       	movw	r24, r0
    125c:	a3 9f       	mul	r26, r19
    125e:	70 0d       	add	r23, r0
    1260:	81 1d       	adc	r24, r1
    1262:	11 24       	eor	r1, r1
    1264:	91 1d       	adc	r25, r1
    1266:	b2 9f       	mul	r27, r18
    1268:	70 0d       	add	r23, r0
    126a:	81 1d       	adc	r24, r1
    126c:	11 24       	eor	r1, r1
    126e:	91 1d       	adc	r25, r1
    1270:	08 95       	ret

00001272 <__cmpsf2>:
    1272:	0e 94 6d 09 	call	0x12da	; 0x12da <__fp_cmp>
    1276:	08 f4       	brcc	.+2      	; 0x127a <__cmpsf2+0x8>
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	08 95       	ret

0000127c <__fixunssfsi>:
    127c:	0e 94 99 09 	call	0x1332	; 0x1332 <__fp_splitA>
    1280:	88 f0       	brcs	.+34     	; 0x12a4 <__fixunssfsi+0x28>
    1282:	9f 57       	subi	r25, 0x7F	; 127
    1284:	98 f0       	brcs	.+38     	; 0x12ac <__fixunssfsi+0x30>
    1286:	b9 2f       	mov	r27, r25
    1288:	99 27       	eor	r25, r25
    128a:	b7 51       	subi	r27, 0x17	; 23
    128c:	b0 f0       	brcs	.+44     	; 0x12ba <__fixunssfsi+0x3e>
    128e:	e1 f0       	breq	.+56     	; 0x12c8 <__fixunssfsi+0x4c>
    1290:	66 0f       	add	r22, r22
    1292:	77 1f       	adc	r23, r23
    1294:	88 1f       	adc	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	1a f0       	brmi	.+6      	; 0x12a0 <__fixunssfsi+0x24>
    129a:	ba 95       	dec	r27
    129c:	c9 f7       	brne	.-14     	; 0x1290 <__fixunssfsi+0x14>
    129e:	14 c0       	rjmp	.+40     	; 0x12c8 <__fixunssfsi+0x4c>
    12a0:	b1 30       	cpi	r27, 0x01	; 1
    12a2:	91 f0       	breq	.+36     	; 0x12c8 <__fixunssfsi+0x4c>
    12a4:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_zero>
    12a8:	b1 e0       	ldi	r27, 0x01	; 1
    12aa:	08 95       	ret
    12ac:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_zero>
    12b0:	67 2f       	mov	r22, r23
    12b2:	78 2f       	mov	r23, r24
    12b4:	88 27       	eor	r24, r24
    12b6:	b8 5f       	subi	r27, 0xF8	; 248
    12b8:	39 f0       	breq	.+14     	; 0x12c8 <__fixunssfsi+0x4c>
    12ba:	b9 3f       	cpi	r27, 0xF9	; 249
    12bc:	cc f3       	brlt	.-14     	; 0x12b0 <__fixunssfsi+0x34>
    12be:	86 95       	lsr	r24
    12c0:	77 95       	ror	r23
    12c2:	67 95       	ror	r22
    12c4:	b3 95       	inc	r27
    12c6:	d9 f7       	brne	.-10     	; 0x12be <__fixunssfsi+0x42>
    12c8:	3e f4       	brtc	.+14     	; 0x12d8 <__fixunssfsi+0x5c>
    12ca:	90 95       	com	r25
    12cc:	80 95       	com	r24
    12ce:	70 95       	com	r23
    12d0:	61 95       	neg	r22
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	8f 4f       	sbci	r24, 0xFF	; 255
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	08 95       	ret

000012da <__fp_cmp>:
    12da:	99 0f       	add	r25, r25
    12dc:	00 08       	sbc	r0, r0
    12de:	55 0f       	add	r21, r21
    12e0:	aa 0b       	sbc	r26, r26
    12e2:	e0 e8       	ldi	r30, 0x80	; 128
    12e4:	fe ef       	ldi	r31, 0xFE	; 254
    12e6:	16 16       	cp	r1, r22
    12e8:	17 06       	cpc	r1, r23
    12ea:	e8 07       	cpc	r30, r24
    12ec:	f9 07       	cpc	r31, r25
    12ee:	c0 f0       	brcs	.+48     	; 0x1320 <__fp_cmp+0x46>
    12f0:	12 16       	cp	r1, r18
    12f2:	13 06       	cpc	r1, r19
    12f4:	e4 07       	cpc	r30, r20
    12f6:	f5 07       	cpc	r31, r21
    12f8:	98 f0       	brcs	.+38     	; 0x1320 <__fp_cmp+0x46>
    12fa:	62 1b       	sub	r22, r18
    12fc:	73 0b       	sbc	r23, r19
    12fe:	84 0b       	sbc	r24, r20
    1300:	95 0b       	sbc	r25, r21
    1302:	39 f4       	brne	.+14     	; 0x1312 <__fp_cmp+0x38>
    1304:	0a 26       	eor	r0, r26
    1306:	61 f0       	breq	.+24     	; 0x1320 <__fp_cmp+0x46>
    1308:	23 2b       	or	r18, r19
    130a:	24 2b       	or	r18, r20
    130c:	25 2b       	or	r18, r21
    130e:	21 f4       	brne	.+8      	; 0x1318 <__fp_cmp+0x3e>
    1310:	08 95       	ret
    1312:	0a 26       	eor	r0, r26
    1314:	09 f4       	brne	.+2      	; 0x1318 <__fp_cmp+0x3e>
    1316:	a1 40       	sbci	r26, 0x01	; 1
    1318:	a6 95       	lsr	r26
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	81 1d       	adc	r24, r1
    131e:	81 1d       	adc	r24, r1
    1320:	08 95       	ret

00001322 <__fp_split3>:
    1322:	57 fd       	sbrc	r21, 7
    1324:	90 58       	subi	r25, 0x80	; 128
    1326:	44 0f       	add	r20, r20
    1328:	55 1f       	adc	r21, r21
    132a:	59 f0       	breq	.+22     	; 0x1342 <__fp_splitA+0x10>
    132c:	5f 3f       	cpi	r21, 0xFF	; 255
    132e:	71 f0       	breq	.+28     	; 0x134c <__fp_splitA+0x1a>
    1330:	47 95       	ror	r20

00001332 <__fp_splitA>:
    1332:	88 0f       	add	r24, r24
    1334:	97 fb       	bst	r25, 7
    1336:	99 1f       	adc	r25, r25
    1338:	61 f0       	breq	.+24     	; 0x1352 <__fp_splitA+0x20>
    133a:	9f 3f       	cpi	r25, 0xFF	; 255
    133c:	79 f0       	breq	.+30     	; 0x135c <__fp_splitA+0x2a>
    133e:	87 95       	ror	r24
    1340:	08 95       	ret
    1342:	12 16       	cp	r1, r18
    1344:	13 06       	cpc	r1, r19
    1346:	14 06       	cpc	r1, r20
    1348:	55 1f       	adc	r21, r21
    134a:	f2 cf       	rjmp	.-28     	; 0x1330 <__fp_split3+0xe>
    134c:	46 95       	lsr	r20
    134e:	f1 df       	rcall	.-30     	; 0x1332 <__fp_splitA>
    1350:	08 c0       	rjmp	.+16     	; 0x1362 <__fp_splitA+0x30>
    1352:	16 16       	cp	r1, r22
    1354:	17 06       	cpc	r1, r23
    1356:	18 06       	cpc	r1, r24
    1358:	99 1f       	adc	r25, r25
    135a:	f1 cf       	rjmp	.-30     	; 0x133e <__fp_splitA+0xc>
    135c:	86 95       	lsr	r24
    135e:	71 05       	cpc	r23, r1
    1360:	61 05       	cpc	r22, r1
    1362:	08 94       	sec
    1364:	08 95       	ret

00001366 <__fp_zero>:
    1366:	e8 94       	clt

00001368 <__fp_szero>:
    1368:	bb 27       	eor	r27, r27
    136a:	66 27       	eor	r22, r22
    136c:	77 27       	eor	r23, r23
    136e:	cb 01       	movw	r24, r22
    1370:	97 f9       	bld	r25, 7
    1372:	08 95       	ret

00001374 <__gesf2>:
    1374:	0e 94 6d 09 	call	0x12da	; 0x12da <__fp_cmp>
    1378:	08 f4       	brcc	.+2      	; 0x137c <__gesf2+0x8>
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	08 95       	ret

0000137e <__mulsf3>:
    137e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__mulsf3x>
    1382:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_round>
    1386:	0e 94 35 0a 	call	0x146a	; 0x146a <__fp_pscA>
    138a:	38 f0       	brcs	.+14     	; 0x139a <__mulsf3+0x1c>
    138c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__fp_pscB>
    1390:	20 f0       	brcs	.+8      	; 0x139a <__mulsf3+0x1c>
    1392:	95 23       	and	r25, r21
    1394:	11 f0       	breq	.+4      	; 0x139a <__mulsf3+0x1c>
    1396:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__fp_inf>
    139a:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_nan>
    139e:	11 24       	eor	r1, r1
    13a0:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__fp_szero>

000013a4 <__mulsf3x>:
    13a4:	0e 94 91 09 	call	0x1322	; 0x1322 <__fp_split3>
    13a8:	70 f3       	brcs	.-36     	; 0x1386 <__mulsf3+0x8>

000013aa <__mulsf3_pse>:
    13aa:	95 9f       	mul	r25, r21
    13ac:	c1 f3       	breq	.-16     	; 0x139e <__mulsf3+0x20>
    13ae:	95 0f       	add	r25, r21
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	55 1f       	adc	r21, r21
    13b4:	62 9f       	mul	r22, r18
    13b6:	f0 01       	movw	r30, r0
    13b8:	72 9f       	mul	r23, r18
    13ba:	bb 27       	eor	r27, r27
    13bc:	f0 0d       	add	r31, r0
    13be:	b1 1d       	adc	r27, r1
    13c0:	63 9f       	mul	r22, r19
    13c2:	aa 27       	eor	r26, r26
    13c4:	f0 0d       	add	r31, r0
    13c6:	b1 1d       	adc	r27, r1
    13c8:	aa 1f       	adc	r26, r26
    13ca:	64 9f       	mul	r22, r20
    13cc:	66 27       	eor	r22, r22
    13ce:	b0 0d       	add	r27, r0
    13d0:	a1 1d       	adc	r26, r1
    13d2:	66 1f       	adc	r22, r22
    13d4:	82 9f       	mul	r24, r18
    13d6:	22 27       	eor	r18, r18
    13d8:	b0 0d       	add	r27, r0
    13da:	a1 1d       	adc	r26, r1
    13dc:	62 1f       	adc	r22, r18
    13de:	73 9f       	mul	r23, r19
    13e0:	b0 0d       	add	r27, r0
    13e2:	a1 1d       	adc	r26, r1
    13e4:	62 1f       	adc	r22, r18
    13e6:	83 9f       	mul	r24, r19
    13e8:	a0 0d       	add	r26, r0
    13ea:	61 1d       	adc	r22, r1
    13ec:	22 1f       	adc	r18, r18
    13ee:	74 9f       	mul	r23, r20
    13f0:	33 27       	eor	r19, r19
    13f2:	a0 0d       	add	r26, r0
    13f4:	61 1d       	adc	r22, r1
    13f6:	23 1f       	adc	r18, r19
    13f8:	84 9f       	mul	r24, r20
    13fa:	60 0d       	add	r22, r0
    13fc:	21 1d       	adc	r18, r1
    13fe:	82 2f       	mov	r24, r18
    1400:	76 2f       	mov	r23, r22
    1402:	6a 2f       	mov	r22, r26
    1404:	11 24       	eor	r1, r1
    1406:	9f 57       	subi	r25, 0x7F	; 127
    1408:	50 40       	sbci	r21, 0x00	; 0
    140a:	9a f0       	brmi	.+38     	; 0x1432 <__mulsf3_pse+0x88>
    140c:	f1 f0       	breq	.+60     	; 0x144a <__mulsf3_pse+0xa0>
    140e:	88 23       	and	r24, r24
    1410:	4a f0       	brmi	.+18     	; 0x1424 <__mulsf3_pse+0x7a>
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	bb 1f       	adc	r27, r27
    1418:	66 1f       	adc	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	88 1f       	adc	r24, r24
    141e:	91 50       	subi	r25, 0x01	; 1
    1420:	50 40       	sbci	r21, 0x00	; 0
    1422:	a9 f7       	brne	.-22     	; 0x140e <__mulsf3_pse+0x64>
    1424:	9e 3f       	cpi	r25, 0xFE	; 254
    1426:	51 05       	cpc	r21, r1
    1428:	80 f0       	brcs	.+32     	; 0x144a <__mulsf3_pse+0xa0>
    142a:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__fp_inf>
    142e:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__fp_szero>
    1432:	5f 3f       	cpi	r21, 0xFF	; 255
    1434:	e4 f3       	brlt	.-8      	; 0x142e <__mulsf3_pse+0x84>
    1436:	98 3e       	cpi	r25, 0xE8	; 232
    1438:	d4 f3       	brlt	.-12     	; 0x142e <__mulsf3_pse+0x84>
    143a:	86 95       	lsr	r24
    143c:	77 95       	ror	r23
    143e:	67 95       	ror	r22
    1440:	b7 95       	ror	r27
    1442:	f7 95       	ror	r31
    1444:	e7 95       	ror	r30
    1446:	9f 5f       	subi	r25, 0xFF	; 255
    1448:	c1 f7       	brne	.-16     	; 0x143a <__mulsf3_pse+0x90>
    144a:	fe 2b       	or	r31, r30
    144c:	88 0f       	add	r24, r24
    144e:	91 1d       	adc	r25, r1
    1450:	96 95       	lsr	r25
    1452:	87 95       	ror	r24
    1454:	97 f9       	bld	r25, 7
    1456:	08 95       	ret

00001458 <__fp_inf>:
    1458:	97 f9       	bld	r25, 7
    145a:	9f 67       	ori	r25, 0x7F	; 127
    145c:	80 e8       	ldi	r24, 0x80	; 128
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	08 95       	ret

00001464 <__fp_nan>:
    1464:	9f ef       	ldi	r25, 0xFF	; 255
    1466:	80 ec       	ldi	r24, 0xC0	; 192
    1468:	08 95       	ret

0000146a <__fp_pscA>:
    146a:	00 24       	eor	r0, r0
    146c:	0a 94       	dec	r0
    146e:	16 16       	cp	r1, r22
    1470:	17 06       	cpc	r1, r23
    1472:	18 06       	cpc	r1, r24
    1474:	09 06       	cpc	r0, r25
    1476:	08 95       	ret

00001478 <__fp_pscB>:
    1478:	00 24       	eor	r0, r0
    147a:	0a 94       	dec	r0
    147c:	12 16       	cp	r1, r18
    147e:	13 06       	cpc	r1, r19
    1480:	14 06       	cpc	r1, r20
    1482:	05 06       	cpc	r0, r21
    1484:	08 95       	ret

00001486 <__fp_round>:
    1486:	09 2e       	mov	r0, r25
    1488:	03 94       	inc	r0
    148a:	00 0c       	add	r0, r0
    148c:	11 f4       	brne	.+4      	; 0x1492 <__fp_round+0xc>
    148e:	88 23       	and	r24, r24
    1490:	52 f0       	brmi	.+20     	; 0x14a6 <__fp_round+0x20>
    1492:	bb 0f       	add	r27, r27
    1494:	40 f4       	brcc	.+16     	; 0x14a6 <__fp_round+0x20>
    1496:	bf 2b       	or	r27, r31
    1498:	11 f4       	brne	.+4      	; 0x149e <__fp_round+0x18>
    149a:	60 ff       	sbrs	r22, 0
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <__fp_round+0x20>
    149e:	6f 5f       	subi	r22, 0xFF	; 255
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	8f 4f       	sbci	r24, 0xFF	; 255
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	08 95       	ret

000014a8 <_exit>:
    14a8:	f8 94       	cli

000014aa <__stop_program>:
    14aa:	ff cf       	rjmp	.-2      	; 0x14aa <__stop_program>
